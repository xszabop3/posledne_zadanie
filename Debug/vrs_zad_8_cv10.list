
vrs_zad_8_cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003444  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003608  08003608  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003608  08003608  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003608  08003608  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003608  08003608  00013608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  0800361c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  0800361c  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000052d1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fd3  00000000  00000000  0002530d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  000262e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  000269f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a93  00000000  00000000  00027088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003ce4  00000000  00000000  0003cb1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007552a  00000000  00000000  000407ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5d29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec4  00000000  00000000  000b5da4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035b4 	.word	0x080035b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080035b4 	.word	0x080035b4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <__NVIC_EnableIRQ+0x38>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <LL_I2C_DisableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_DisableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableClockStretching(I2C_TypeDef *I2Cx)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	601a      	str	r2, [r3, #0]
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b085      	sub	sp, #20
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000bb2:	f023 0306 	bic.w	r3, r3, #6
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	60da      	str	r2, [r3, #12]
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60da      	str	r2, [r3, #12]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f043 0204 	orr.w	r2, r3, #4
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	601a      	str	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 0204 	bic.w	r2, r3, #4
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d101      	bne.n	8000c46 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0320 	and.w	r3, r3, #32
 8000c64:	2b20      	cmp	r3, #32
 8000c66:	d101      	bne.n	8000c6c <LL_I2C_IsActiveFlag_STOP+0x18>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f043 0220 	orr.w	r2, r3, #32
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	61da      	str	r2, [r3, #28]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	605a      	str	r2, [r3, #4]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	0d5b      	lsrs	r3, r3, #21
 8000cd2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <LL_I2C_HandleTransfer+0x48>)
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	401a      	ands	r2, r3
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4319      	orrs	r1, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	041b      	lsls	r3, r3, #16
 8000ce8:	4319      	orrs	r1, r3
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	4319      	orrs	r1, r3
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	03ff7bff 	.word	0x03ff7bff

08000d08 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8000d14:	78fa      	ldrb	r2, [r7, #3]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <LL_RCC_HSI_Enable+0x1c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <LL_RCC_HSI_Enable+0x1c>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <LL_RCC_HSI_IsReady+0x20>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	bf0c      	ite	eq
 8000d58:	2301      	moveq	r3, #1
 8000d5a:	2300      	movne	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000

08000d6c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4904      	ldr	r1, [pc, #16]	; (8000d94 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d82:	4313      	orrs	r3, r2
 8000d84:	600b      	str	r3, [r1, #0]
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <LL_RCC_SetSysClkSource+0x24>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f023 0203 	bic.w	r2, r3, #3
 8000da8:	4904      	ldr	r1, [pc, #16]	; (8000dbc <LL_RCC_SetSysClkSource+0x24>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <LL_RCC_GetSysClkSource+0x18>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 030c 	and.w	r3, r3, #12
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <LL_RCC_SetAHBPrescaler+0x24>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dec:	4904      	ldr	r1, [pc, #16]	; (8000e00 <LL_RCC_SetAHBPrescaler+0x24>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	604b      	str	r3, [r1, #4]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40021000 	.word	0x40021000

08000e04 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e14:	4904      	ldr	r1, [pc, #16]	; (8000e28 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	604b      	str	r3, [r1, #4]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000

08000e2c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e3c:	4904      	ldr	r1, [pc, #16]	; (8000e50 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000

08000e54 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <LL_RCC_SetI2CClockSource+0x2c>)
 8000e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	0e1b      	lsrs	r3, r3, #24
 8000e64:	43db      	mvns	r3, r3
 8000e66:	401a      	ands	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e6e:	4904      	ldr	r1, [pc, #16]	; (8000e80 <LL_RCC_SetI2CClockSource+0x2c>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	40021000 	.word	0x40021000

08000e84 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e8e:	695a      	ldr	r2, [r3, #20]
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e9a:	695a      	ldr	r2, [r3, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ebe:	69da      	ldr	r2, [r3, #28]
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000eca:	69da      	ldr	r2, [r3, #28]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000eee:	699a      	ldr	r2, [r3, #24]
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000efa:	699a      	ldr	r2, [r3, #24]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4013      	ands	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000

08000f14 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <LL_SYSCFG_SetEXTISource+0x58>)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	ea02 0103 	and.w	r1, r2, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	fab3 f383 	clz	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	fa03 f202 	lsl.w	r2, r3, r2
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <LL_SYSCFG_SetEXTISource+0x58>)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	40010000 	.word	0x40010000

08000f70 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <LL_FLASH_SetLatency+0x24>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 0207 	bic.w	r2, r3, #7
 8000f80:	4904      	ldr	r1, [pc, #16]	; (8000f94 <LL_FLASH_SetLatency+0x24>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	600b      	str	r3, [r1, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	40022000 	.word	0x40022000

08000f98 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <LL_FLASH_GetLatency+0x18>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40022000 	.word	0x40022000

08000fb4 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	f043 0201 	orr.w	r2, r3, #1
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	60da      	str	r2, [r3, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	613b      	str	r3, [r7, #16]
  return result;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2103      	movs	r1, #3
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	401a      	ands	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	61bb      	str	r3, [r7, #24]
  return result;
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fab3 f383 	clz	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	431a      	orrs	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	601a      	str	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001052:	b480      	push	{r7}
 8001054:	b089      	sub	sp, #36	; 0x24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	fa93 f3a3 	rbit	r3, r3
 800106c:	613b      	str	r3, [r7, #16]
  return result;
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	fab3 f383 	clz	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2103      	movs	r1, #3
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	401a      	ands	r2, r3
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	61bb      	str	r3, [r7, #24]
  return result;
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	fab3 f383 	clz	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	431a      	orrs	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	60da      	str	r2, [r3, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3724      	adds	r7, #36	; 0x24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t temp=0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71fb      	strb	r3, [r7, #7]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff ff04 	bl	8000ee4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80010dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80010e0:	f7ff fee8 	bl	8000eb4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f7ff fc8d 	bl	8000a04 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 f8b5 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f000 f9c7 	bl	8001480 <MX_GPIO_Init>
  MX_TIM17_Init();
 80010f2:	f000 f98d 	bl	8001410 <MX_TIM17_Init>
  MX_TIM16_Init();
 80010f6:	f000 f953 	bl	80013a0 <MX_TIM16_Init>
  MX_I2C1_Init();
 80010fa:	f000 f8e3 	bl	80012c4 <MX_I2C1_Init>


  //my_str_cpy((uint8_t *) "PEtEr_SZabo_47447_PIrHaLa_MatEJ_92621", str, &size_buff, max_buff_size);
  //convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);

  push_button_pushed_fcn();
 80010fe:	f000 fa51 	bl	80015a4 <push_button_pushed_fcn>
  //NVIC_EnableIRQ(EXTI0_IRQn);



  temp=lsm6ds0_init();//accelerometer
 8001102:	f000 fd2b 	bl	8001b5c <lsm6ds0_init>
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  temp=hts221_init();//humidity
 800110a:	f000 fd4f 	bl	8001bac <hts221_init>
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  temp=lps25hb_init();//barometer
 8001112:	f000 fe0d 	bl	8001d30 <lps25hb_init>
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if (temp==0)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d103      	bne.n	8001128 <main+0x5c>
  	  {acc[0]=0.0;}
 8001120:	4b46      	ldr	r3, [pc, #280]	; (800123c <main+0x170>)
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

  start_tim17_with_IT();
 8001128:	f001 faa6 	bl	8002678 <start_tim17_with_IT>
  start_tim16_with_IT();
 800112c:	f001 fab4 	bl	8002698 <start_tim16_with_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 8001130:	bf30      	wfi
	  if (mode & multiplex_display){
 8001132:	4b43      	ldr	r3, [pc, #268]	; (8001240 <main+0x174>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d010      	beq.n	8001160 <main+0x94>
		  multiplex_display_fcn(offset,size_buff-4);
 800113e:	4b41      	ldr	r3, [pc, #260]	; (8001244 <main+0x178>)
 8001140:	881a      	ldrh	r2, [r3, #0]
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <main+0x17c>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	3b04      	subs	r3, #4
 8001148:	b29b      	uxth	r3, r3
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f001 fab3 	bl	80026b8 <multiplex_display_fcn>
		  mode &=~ multiplex_display;
 8001152:	4b3b      	ldr	r3, [pc, #236]	; (8001240 <main+0x174>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	f023 0301 	bic.w	r3, r3, #1
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b38      	ldr	r3, [pc, #224]	; (8001240 <main+0x174>)
 800115e:	701a      	strb	r2, [r3, #0]
	  }
	  if (mode & shift_display){
 8001160:	4b37      	ldr	r3, [pc, #220]	; (8001240 <main+0x174>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d050      	beq.n	800120e <main+0x142>
		  //get_temperature();
		  lsm6ds0_get_acc(&acc[0],&acc[1],&acc[2]);
 800116c:	4a37      	ldr	r2, [pc, #220]	; (800124c <main+0x180>)
 800116e:	4938      	ldr	r1, [pc, #224]	; (8001250 <main+0x184>)
 8001170:	4832      	ldr	r0, [pc, #200]	; (800123c <main+0x170>)
 8001172:	f000 fbf1 	bl	8001958 <lsm6ds0_get_acc>
		  //ret_val=lsm6ds0_get_temp(); //picsafust
		  ret_val=hts221_get_temp();	//fasza
 8001176:	f000 faa5 	bl	80016c4 <hts221_get_temp>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b35      	ldr	r3, [pc, #212]	; (8001254 <main+0x188>)
 8001180:	801a      	strh	r2, [r3, #0]
		  ret_val=hts221_get_hum();		//fasza
 8001182:	f000 fb19 	bl	80017b8 <hts221_get_hum>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <main+0x188>)
 800118c:	801a      	strh	r2, [r3, #0]
		  lps25hb_get_pressure();
 800118e:	f000 fb9d 	bl	80018cc <lps25hb_get_pressure>
		  if (mode & up_or_down){
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <main+0x174>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	2b00      	cmp	r3, #0
 800119c:	d01b      	beq.n	80011d6 <main+0x10a>
			  // up

			  offset++;
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <main+0x178>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <main+0x178>)
 80011a8:	801a      	strh	r2, [r3, #0]
			  if (offset >(size_buff-4)){
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <main+0x178>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <main+0x17c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	3b04      	subs	r3, #4
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dd22      	ble.n	8001200 <main+0x134>
				  offset=size_buff-4;
 80011ba:	4b23      	ldr	r3, [pc, #140]	; (8001248 <main+0x17c>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	3b04      	subs	r3, #4
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <main+0x178>)
 80011c4:	801a      	strh	r2, [r3, #0]
				  mode &= ~up_or_down;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <main+0x174>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <main+0x174>)
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e014      	b.n	8001200 <main+0x134>
			  }
		  }
		  else{

			  if (offset == 0){
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <main+0x178>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10a      	bne.n	80011f4 <main+0x128>
				  offset=0;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <main+0x178>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	801a      	strh	r2, [r3, #0]
				  mode |=up_or_down;
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <main+0x174>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <main+0x174>)
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e005      	b.n	8001200 <main+0x134>
			  }
			  else{
				  offset--;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <main+0x178>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <main+0x178>)
 80011fe:	801a      	strh	r2, [r3, #0]

		  //offset++;
		  //LL_GPIO_TogglePin(led_GPIO_Port,led_Pin);
		  //if (offset >(size_buff-4)){
		  	  //offset=0;}
		  mode &=~ shift_display;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <main+0x174>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	f023 0302 	bic.w	r3, r3, #2
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <main+0x174>)
 800120c:	701a      	strb	r2, [r3, #0]
	  }
	  if (mode & push_button_pushed){
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <main+0x174>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	da8b      	bge.n	8001130 <main+0x64>
		  //LL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
		  if (test_push_button_state(max_test_push_button)){
 8001218:	f243 3009 	movw	r0, #13065	; 0x3309
 800121c:	f001 fae2 	bl	80027e4 <test_push_button_state>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <main+0x15e>
			  push_button_pushed_fcn();
 8001226:	f000 f9bd 	bl	80015a4 <push_button_pushed_fcn>
		  }
		  //LL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
		  mode &= ~ push_button_pushed;
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <main+0x174>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <main+0x174>)
 8001236:	701a      	strb	r2, [r3, #0]
	  __WFI();
 8001238:	e77a      	b.n	8001130 <main+0x64>
 800123a:	bf00      	nop
 800123c:	20000038 	.word	0x20000038
 8001240:	20000028 	.word	0x20000028
 8001244:	2000002c 	.word	0x2000002c
 8001248:	2000002a 	.word	0x2000002a
 800124c:	20000040 	.word	0x20000040
 8001250:	2000003c 	.word	0x2000003c
 8001254:	20000044 	.word	0x20000044

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fe87 	bl	8000f70 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001262:	bf00      	nop
 8001264:	f7ff fe98 	bl	8000f98 <LL_FLASH_GetLatency>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1fa      	bne.n	8001264 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800126e:	f7ff fd5b 	bl	8000d28 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001272:	bf00      	nop
 8001274:	f7ff fd68 	bl	8000d48 <LL_RCC_HSI_IsReady>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d1fa      	bne.n	8001274 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800127e:	2010      	movs	r0, #16
 8001280:	f7ff fd74 	bl	8000d6c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff fda9 	bl	8000ddc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fdba 	bl	8000e04 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fdcb 	bl	8000e2c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fd7e 	bl	8000d98 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800129c:	bf00      	nop
 800129e:	f7ff fd8f 	bl	8000dc0 <LL_RCC_GetSysClkSource>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1fa      	bne.n	800129e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <SystemClock_Config+0x68>)
 80012aa:	f002 f91d 	bl	80034e8 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80012ae:	4804      	ldr	r0, [pc, #16]	; (80012c0 <SystemClock_Config+0x68>)
 80012b0:	f002 f94c 	bl	800354c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80012b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80012b8:	f7ff fdcc 	bl	8000e54 <LL_RCC_SetI2CClockSource>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	007a1200 	.word	0x007a1200

080012c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	; 0x38
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80012f2:	f7ff fdc7 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80012f6:	23c0      	movs	r3, #192	; 0xc0
 80012f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012fa:	2302      	movs	r3, #2
 80012fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001302:	2301      	movs	r3, #1
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001306:	2301      	movs	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800130a:	2304      	movs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4820      	ldr	r0, [pc, #128]	; (8001394 <MX_I2C1_Init+0xd0>)
 8001314:	f001 fed3 	bl	80030be <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001318:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800131c:	f7ff fdca 	bl	8000eb4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001320:	f7ff fb94 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8001324:	4603      	mov	r3, r0
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fbe4 	bl	8000af8 <NVIC_EncodePriority>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	201f      	movs	r0, #31
 8001336:	f7ff fbb5 	bl	8000aa4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800133a:	201f      	movs	r0, #31
 800133c:	f7ff fb94 	bl	8000a68 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableClockStretching(I2C1);
 8001340:	4815      	ldr	r0, [pc, #84]	; (8001398 <MX_I2C1_Init+0xd4>)
 8001342:	f7ff fc0c 	bl	8000b5e <LL_I2C_DisableClockStretching>
  LL_I2C_EnableAutoEndMode(I2C1);
 8001346:	4814      	ldr	r0, [pc, #80]	; (8001398 <MX_I2C1_Init+0xd4>)
 8001348:	f7ff fca7 	bl	8000c9a <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800134c:	4812      	ldr	r0, [pc, #72]	; (8001398 <MX_I2C1_Init+0xd4>)
 800134e:	f7ff fc3e 	bl	8000bce <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_I2C1_Init+0xd4>)
 8001354:	f7ff fc13 	bl	8000b7e <LL_I2C_DisableGeneralCall>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_I2C1_Init+0xd8>)
 800135e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800136c:	2300      	movs	r3, #0
 800136e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001370:	2300      	movs	r3, #0
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4807      	ldr	r0, [pc, #28]	; (8001398 <MX_I2C1_Init+0xd4>)
 800137c:	f001 ffb2 	bl	80032e4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_I2C1_Init+0xd4>)
 8001386:	f7ff fc0a 	bl	8000b9e <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	3738      	adds	r7, #56	; 0x38
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	48000400 	.word	0x48000400
 8001398:	40005400 	.word	0x40005400
 800139c:	2000090e 	.word	0x2000090e

080013a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 80013b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013b8:	f7ff fd94 	bl	8000ee4 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013bc:	f7ff fb46 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb96 	bl	8000af8 <NVIC_EncodePriority>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4619      	mov	r1, r3
 80013d0:	2019      	movs	r0, #25
 80013d2:	f7ff fb67 	bl	8000aa4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013d6:	2019      	movs	r0, #25
 80013d8:	f7ff fb46 	bl	8000a68 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 80013dc:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80013e0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 499;
 80013e6:	f240 13f3 	movw	r3, #499	; 0x1f3
 80013ea:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_TIM16_Init+0x6c>)
 80013fa:	f001 ffe9 	bl	80033d0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM16_Init+0x6c>)
 8001400:	f7ff fdd8 	bl	8000fb4 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40014400 	.word	0x40014400

08001410 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM17);
 8001424:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001428:	f7ff fd5c 	bl	8000ee4 <LL_APB2_GRP1_EnableClock>

  /* TIM17 interrupt Init */
  NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800142c:	f7ff fb0e 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8001430:	4603      	mov	r3, r0
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fb5e 	bl	8000af8 <NVIC_EncodePriority>
 800143c:	4603      	mov	r3, r0
 800143e:	4619      	mov	r1, r3
 8001440:	201a      	movs	r0, #26
 8001442:	f7ff fb2f 	bl	8000aa4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001446:	201a      	movs	r0, #26
 8001448:	f7ff fb0e 	bl	8000a68 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 7999;
 8001454:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8001458:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_TIM17_Init+0x6c>)
 8001468:	f001 ffb2 	bl	80033d0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM17);
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <MX_TIM17_Init+0x6c>)
 800146e:	f7ff fda1 	bl	8000fb4 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40014800 	.word	0x40014800

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
 80014a0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80014a2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80014a6:	f7ff fced 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80014aa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014ae:	f7ff fce9 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80014b2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80014b6:	f7ff fce5 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, seg_B_pa_Pin|seg_A_pa_Pin|dig_3_pa_Pin|seg_F_pa_Pin
 80014ba:	f641 119f 	movw	r1, #6559	; 0x199f
 80014be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c2:	f7ff fdf5 	bl	80010b0 <LL_GPIO_ResetOutputPin>
                          |dig_1_pa_Pin|dig_time_pa_Pin|seg_C_pa_Pin|seg_E_pa_Pin
                          |dig_2_pa_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, dig_0_pb_Pin|seg_DP_pb_Pin|seg_G_pb_Pin|seg_D_pb_Pin);
 80014c6:	2133      	movs	r1, #51	; 0x33
 80014c8:	4835      	ldr	r0, [pc, #212]	; (80015a0 <MX_GPIO_Init+0x120>)
 80014ca:	f7ff fdf1 	bl	80010b0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = seg_B_pa_Pin|seg_A_pa_Pin|dig_3_pa_Pin|seg_F_pa_Pin
 80014ce:	f641 139f 	movw	r3, #6559	; 0x199f
 80014d2:	607b      	str	r3, [r7, #4]
                          |dig_1_pa_Pin|dig_time_pa_Pin|seg_C_pa_Pin|seg_E_pa_Pin
                          |dig_2_pa_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d4:	2301      	movs	r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ec:	f001 fde7 	bl	80030be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = dig_0_pb_Pin|seg_DP_pb_Pin|seg_G_pb_Pin|seg_D_pb_Pin;
 80014f0:	2333      	movs	r3, #51	; 0x33
 80014f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014f4:	2301      	movs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4619      	mov	r1, r3
 8001508:	4825      	ldr	r0, [pc, #148]	; (80015a0 <MX_GPIO_Init+0x120>)
 800150a:	f001 fdd8 	bl	80030be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800150e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001512:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001514:	2302      	movs	r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001524:	2307      	movs	r3, #7
 8001526:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f001 fdc5 	bl	80030be <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001534:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff fceb 	bl	8000f14 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(push_button_irq3_GPIO_Port, push_button_irq3_Pin, LL_GPIO_PULL_DOWN);
 800153e:	2202      	movs	r2, #2
 8001540:	2108      	movs	r1, #8
 8001542:	4817      	ldr	r0, [pc, #92]	; (80015a0 <MX_GPIO_Init+0x120>)
 8001544:	f7ff fd85 	bl	8001052 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(push_button_irq3_GPIO_Port, push_button_irq3_Pin, LL_GPIO_MODE_INPUT);
 8001548:	2200      	movs	r2, #0
 800154a:	2108      	movs	r1, #8
 800154c:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_GPIO_Init+0x120>)
 800154e:	f7ff fd51 	bl	8000ff4 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001552:	2308      	movs	r3, #8
 8001554:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800155a:	2301      	movs	r3, #1
 800155c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4618      	mov	r0, r3
 8001572:	f001 fbb7 	bl	8002ce4 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001576:	f7ff fa69 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 800157a:	4603      	mov	r3, r0
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fab9 	bl	8000af8 <NVIC_EncodePriority>
 8001586:	4603      	mov	r3, r0
 8001588:	4619      	mov	r1, r3
 800158a:	2009      	movs	r0, #9
 800158c:	f7ff fa8a 	bl	8000aa4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8001590:	2009      	movs	r0, #9
 8001592:	f7ff fa69 	bl	8000a68 <__NVIC_EnableIRQ>

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	; 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	48000400 	.word	0x48000400

080015a4 <push_button_pushed_fcn>:

/* USER CODE BEGIN 4 */
void push_button_pushed_fcn(void){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

	what_to_measure++;
 80015a8:	4b39      	ldr	r3, [pc, #228]	; (8001690 <push_button_pushed_fcn+0xec>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b37      	ldr	r3, [pc, #220]	; (8001690 <push_button_pushed_fcn+0xec>)
 80015b2:	701a      	strb	r2, [r3, #0]
	if(what_to_measure >= 5){
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <push_button_pushed_fcn+0xec>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d902      	bls.n	80015c2 <push_button_pushed_fcn+0x1e>
		what_to_measure=0;
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <push_button_pushed_fcn+0xec>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
	}
	offset=0;active_display_digit=0;
 80015c2:	4b34      	ldr	r3, [pc, #208]	; (8001694 <push_button_pushed_fcn+0xf0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	801a      	strh	r2, [r3, #0]
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <push_button_pushed_fcn+0xf4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
	mode |= up_or_down;
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <push_button_pushed_fcn+0xf8>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b30      	ldr	r3, [pc, #192]	; (800169c <push_button_pushed_fcn+0xf8>)
 80015da:	701a      	strb	r2, [r3, #0]
	switch(what_to_measure){
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <push_button_pushed_fcn+0xec>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d853      	bhi.n	800168c <push_button_pushed_fcn+0xe8>
 80015e4:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <push_button_pushed_fcn+0x48>)
 80015e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ea:	bf00      	nop
 80015ec:	08001601 	.word	0x08001601
 80015f0:	0800161d 	.word	0x0800161d
 80015f4:	08001639 	.word	0x08001639
 80015f8:	08001655 	.word	0x08001655
 80015fc:	08001671 	.word	0x08001671
	case 0:{
		//azymut [deg]: "MAG_xx.x"
		my_str_cpy((uint8_t *) "MAG_00.0\0", str, &size_buff, max_buff_size);
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <push_button_pushed_fcn+0xfc>)
 8001604:	4927      	ldr	r1, [pc, #156]	; (80016a4 <push_button_pushed_fcn+0x100>)
 8001606:	4828      	ldr	r0, [pc, #160]	; (80016a8 <push_button_pushed_fcn+0x104>)
 8001608:	f000 fc80 	bl	8001f0c <my_str_cpy>
		convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);
 800160c:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <push_button_pushed_fcn+0xfc>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	4a26      	ldr	r2, [pc, #152]	; (80016ac <push_button_pushed_fcn+0x108>)
 8001612:	4927      	ldr	r1, [pc, #156]	; (80016b0 <push_button_pushed_fcn+0x10c>)
 8001614:	4823      	ldr	r0, [pc, #140]	; (80016a4 <push_button_pushed_fcn+0x100>)
 8001616:	f000 fca3 	bl	8001f60 <convert_str_to_7seg>
		// to do: convert num 2 str to xx.x

		break;}
 800161a:	e037      	b.n	800168c <push_button_pushed_fcn+0xe8>
	case 1:{
		//teplota [°C]: "TEMP_xx.x"
		my_str_cpy((uint8_t *) "tEMP_00.0\0", str, &size_buff, max_buff_size);
 800161c:	2340      	movs	r3, #64	; 0x40
 800161e:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <push_button_pushed_fcn+0xfc>)
 8001620:	4920      	ldr	r1, [pc, #128]	; (80016a4 <push_button_pushed_fcn+0x100>)
 8001622:	4824      	ldr	r0, [pc, #144]	; (80016b4 <push_button_pushed_fcn+0x110>)
 8001624:	f000 fc72 	bl	8001f0c <my_str_cpy>
		convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <push_button_pushed_fcn+0xfc>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <push_button_pushed_fcn+0x108>)
 800162e:	4920      	ldr	r1, [pc, #128]	; (80016b0 <push_button_pushed_fcn+0x10c>)
 8001630:	481c      	ldr	r0, [pc, #112]	; (80016a4 <push_button_pushed_fcn+0x100>)
 8001632:	f000 fc95 	bl	8001f60 <convert_str_to_7seg>
		// to do: convert num 2 str to xx.x

		break;}
 8001636:	e029      	b.n	800168c <push_button_pushed_fcn+0xe8>
	case 2:{
		//rel. vlhkosť [%]: "HUM_xx"
		my_str_cpy((uint8_t *) "HUM_00.0\0", str, &size_buff, max_buff_size);
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <push_button_pushed_fcn+0xfc>)
 800163c:	4919      	ldr	r1, [pc, #100]	; (80016a4 <push_button_pushed_fcn+0x100>)
 800163e:	481e      	ldr	r0, [pc, #120]	; (80016b8 <push_button_pushed_fcn+0x114>)
 8001640:	f000 fc64 	bl	8001f0c <my_str_cpy>
		convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <push_button_pushed_fcn+0xfc>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	4a18      	ldr	r2, [pc, #96]	; (80016ac <push_button_pushed_fcn+0x108>)
 800164a:	4919      	ldr	r1, [pc, #100]	; (80016b0 <push_button_pushed_fcn+0x10c>)
 800164c:	4815      	ldr	r0, [pc, #84]	; (80016a4 <push_button_pushed_fcn+0x100>)
 800164e:	f000 fc87 	bl	8001f60 <convert_str_to_7seg>
		// to do: convert num 2 str to xx.x


		break;}
 8001652:	e01b      	b.n	800168c <push_button_pushed_fcn+0xe8>
	case 3:{
		//tlak vzduchu [hPa]: "BAR_xxxx.xx"
		my_str_cpy((uint8_t *) "bAr_0000.0\0", str, &size_buff, max_buff_size);
 8001654:	2340      	movs	r3, #64	; 0x40
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <push_button_pushed_fcn+0xfc>)
 8001658:	4912      	ldr	r1, [pc, #72]	; (80016a4 <push_button_pushed_fcn+0x100>)
 800165a:	4818      	ldr	r0, [pc, #96]	; (80016bc <push_button_pushed_fcn+0x118>)
 800165c:	f000 fc56 	bl	8001f0c <my_str_cpy>
		convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <push_button_pushed_fcn+0xfc>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	4a11      	ldr	r2, [pc, #68]	; (80016ac <push_button_pushed_fcn+0x108>)
 8001666:	4912      	ldr	r1, [pc, #72]	; (80016b0 <push_button_pushed_fcn+0x10c>)
 8001668:	480e      	ldr	r0, [pc, #56]	; (80016a4 <push_button_pushed_fcn+0x100>)
 800166a:	f000 fc79 	bl	8001f60 <convert_str_to_7seg>
		// to do: convert num 2 str to xx.x

		break;}
 800166e:	e00d      	b.n	800168c <push_button_pushed_fcn+0xe8>
	case 4:{
		//nadmorská výška [m]: "ALT_xxxx.x"
		my_str_cpy((uint8_t *) "ALt_0000.0\0", str, &size_buff, max_buff_size);
 8001670:	2340      	movs	r3, #64	; 0x40
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <push_button_pushed_fcn+0xfc>)
 8001674:	490b      	ldr	r1, [pc, #44]	; (80016a4 <push_button_pushed_fcn+0x100>)
 8001676:	4812      	ldr	r0, [pc, #72]	; (80016c0 <push_button_pushed_fcn+0x11c>)
 8001678:	f000 fc48 	bl	8001f0c <my_str_cpy>
		convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <push_button_pushed_fcn+0xfc>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <push_button_pushed_fcn+0x108>)
 8001682:	490b      	ldr	r1, [pc, #44]	; (80016b0 <push_button_pushed_fcn+0x10c>)
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <push_button_pushed_fcn+0x100>)
 8001686:	f000 fc6b 	bl	8001f60 <convert_str_to_7seg>
		// to do: convert num 2 str to xx.x

		break;}
 800168a:	bf00      	nop
	}

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000000 	.word	0x20000000
 8001694:	2000002c 	.word	0x2000002c
 8001698:	20000029 	.word	0x20000029
 800169c:	20000028 	.word	0x20000028
 80016a0:	2000002a 	.word	0x2000002a
 80016a4:	20000158 	.word	0x20000158
 80016a8:	080035cc 	.word	0x080035cc
 80016ac:	2000004c 	.word	0x2000004c
 80016b0:	200000d4 	.word	0x200000d4
 80016b4:	080035d8 	.word	0x080035d8
 80016b8:	080035e4 	.word	0x080035e4
 80016bc:	080035f0 	.word	0x080035f0
 80016c0:	080035fc 	.word	0x080035fc

080016c4 <hts221_get_temp>:

int16_t hts221_get_temp(){
 80016c4:	b5b0      	push	{r4, r5, r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	uint8_t data[2];int16_t raw;

	hts221_readArray(data, hts221_ADDRESS_TEMP_L, 2);
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2202      	movs	r2, #2
 80016ce:	212a      	movs	r1, #42	; 0x2a
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fa1b 	bl	8001b0c <hts221_readArray>
	raw= (int16_t)((uint16_t)data[0]+((uint16_t)data[1])*256);
 80016d6:	793b      	ldrb	r3, [r7, #4]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	797b      	ldrb	r3, [r7, #5]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	80fb      	strh	r3, [r7, #6]

	if (raw>32767)
		raw-=65536;

	temperature= ((T1 - T0) / 8.0) * (raw - T2) / (T3 - T2) + (T0 / 8.0);
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <hts221_get_temp+0xdc>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <hts221_get_temp+0xe0>)
 80016f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe feb7 	bl	800046c <__aeabi_i2d>
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <hts221_get_temp+0xe4>)
 8001704:	f7ff f846 	bl	8000794 <__aeabi_ddiv>
 8001708:	4603      	mov	r3, r0
 800170a:	460c      	mov	r4, r1
 800170c:	4625      	mov	r5, r4
 800170e:	461c      	mov	r4, r3
 8001710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001714:	4a25      	ldr	r2, [pc, #148]	; (80017ac <hts221_get_temp+0xe8>)
 8001716:	f9b2 2000 	ldrsh.w	r2, [r2]
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fea5 	bl	800046c <__aeabi_i2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4620      	mov	r0, r4
 8001728:	4629      	mov	r1, r5
 800172a:	f7fe ff09 	bl	8000540 <__aeabi_dmul>
 800172e:	4603      	mov	r3, r0
 8001730:	460c      	mov	r4, r1
 8001732:	4625      	mov	r5, r4
 8001734:	461c      	mov	r4, r3
 8001736:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <hts221_get_temp+0xec>)
 8001738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173c:	461a      	mov	r2, r3
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <hts221_get_temp+0xe8>)
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fe90 	bl	800046c <__aeabi_i2d>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7ff f81e 	bl	8000794 <__aeabi_ddiv>
 8001758:	4603      	mov	r3, r0
 800175a:	460c      	mov	r4, r1
 800175c:	4625      	mov	r5, r4
 800175e:	461c      	mov	r4, r3
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <hts221_get_temp+0xe0>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fe80 	bl	800046c <__aeabi_i2d>
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <hts221_get_temp+0xe4>)
 8001772:	f7ff f80f 	bl	8000794 <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4620      	mov	r0, r4
 800177c:	4629      	mov	r1, r5
 800177e:	f7fe fd29 	bl	80001d4 <__adddf3>
 8001782:	4603      	mov	r3, r0
 8001784:	460c      	mov	r4, r1
 8001786:	4618      	mov	r0, r3
 8001788:	4621      	mov	r1, r4
 800178a:	f7ff f8eb 	bl	8000964 <__aeabi_d2f>
 800178e:	4602      	mov	r2, r0
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <hts221_get_temp+0xf0>)
 8001792:	601a      	str	r2, [r3, #0]
	return(raw);
 8001794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bdb0      	pop	{r4, r5, r7, pc}
 80017a0:	20000154 	.word	0x20000154
 80017a4:	200000ce 	.word	0x200000ce
 80017a8:	40200000 	.word	0x40200000
 80017ac:	20000048 	.word	0x20000048
 80017b0:	200000cc 	.word	0x200000cc
 80017b4:	20000030 	.word	0x20000030

080017b8 <hts221_get_hum>:

int16_t hts221_get_hum(){
 80017b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
	uint8_t data[2];int16_t raw;

	hts221_readArray(data, hts221_ADDRESS_HUM_L, 2);
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2202      	movs	r2, #2
 80017c4:	2128      	movs	r1, #40	; 0x28
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f9a0 	bl	8001b0c <hts221_readArray>
	raw= (int16_t)((uint16_t)data[0]+((uint16_t)data[1])*256);
 80017cc:	793b      	ldrb	r3, [r7, #4]
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	797b      	ldrb	r3, [r7, #5]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4413      	add	r3, r2
 80017da:	b29b      	uxth	r3, r3
 80017dc:	80fb      	strh	r3, [r7, #6]

	humidity= ((1.0 * H1) - (1.0 * H0)) * (1.0 * raw - 1.0 * H2) / (1.0 * H3 - 1.0 * H2) + (1.0 * H0);
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <hts221_get_hum+0x100>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe42 	bl	800046c <__aeabi_i2d>
 80017e8:	4604      	mov	r4, r0
 80017ea:	460d      	mov	r5, r1
 80017ec:	4b33      	ldr	r3, [pc, #204]	; (80018bc <hts221_get_hum+0x104>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe3b 	bl	800046c <__aeabi_i2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f7fe fce7 	bl	80001d0 <__aeabi_dsub>
 8001802:	4603      	mov	r3, r0
 8001804:	460c      	mov	r4, r1
 8001806:	4625      	mov	r5, r4
 8001808:	461c      	mov	r4, r3
 800180a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe2c 	bl	800046c <__aeabi_i2d>
 8001814:	4680      	mov	r8, r0
 8001816:	4689      	mov	r9, r1
 8001818:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <hts221_get_hum+0x108>)
 800181a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe24 	bl	800046c <__aeabi_i2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4640      	mov	r0, r8
 800182a:	4649      	mov	r1, r9
 800182c:	f7fe fcd0 	bl	80001d0 <__aeabi_dsub>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fe82 	bl	8000540 <__aeabi_dmul>
 800183c:	4603      	mov	r3, r0
 800183e:	460c      	mov	r4, r1
 8001840:	4625      	mov	r5, r4
 8001842:	461c      	mov	r4, r3
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <hts221_get_hum+0x10c>)
 8001846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe0e 	bl	800046c <__aeabi_i2d>
 8001850:	4680      	mov	r8, r0
 8001852:	4689      	mov	r9, r1
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <hts221_get_hum+0x108>)
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe06 	bl	800046c <__aeabi_i2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4640      	mov	r0, r8
 8001866:	4649      	mov	r1, r9
 8001868:	f7fe fcb2 	bl	80001d0 <__aeabi_dsub>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe ff8e 	bl	8000794 <__aeabi_ddiv>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	4625      	mov	r5, r4
 800187e:	461c      	mov	r4, r3
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <hts221_get_hum+0x104>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fdf1 	bl	800046c <__aeabi_i2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7fe fc9f 	bl	80001d4 <__adddf3>
 8001896:	4603      	mov	r3, r0
 8001898:	460c      	mov	r4, r1
 800189a:	4618      	mov	r0, r3
 800189c:	4621      	mov	r1, r4
 800189e:	f7ff f861 	bl	8000964 <__aeabi_d2f>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <hts221_get_hum+0x110>)
 80018a6:	601a      	str	r2, [r3, #0]
	return(raw);
 80018a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018b6:	bf00      	nop
 80018b8:	2000019e 	.word	0x2000019e
 80018bc:	200000d0 	.word	0x200000d0
 80018c0:	2000019c 	.word	0x2000019c
 80018c4:	200000d2 	.word	0x200000d2
 80018c8:	20000034 	.word	0x20000034

080018cc <lps25hb_get_pressure>:

uint32_t lps25hb_get_pressure(void){
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af02      	add	r7, sp, #8
	uint8_t data[3];uint32_t ret_val;
	//hts221_readArray(&data[0], lps25hb_ADDRESS_pres_L, 3);
	i2c_master_read(&data[0], 3, lps25hb_ADDRESS_pres_L, hts221_DEVICE_ADDRESS_read, 1);
 80018d2:	4638      	mov	r0, r7
 80018d4:	2301      	movs	r3, #1
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	23bf      	movs	r3, #191	; 0xbf
 80018da:	2228      	movs	r2, #40	; 0x28
 80018dc:	2103      	movs	r1, #3
 80018de:	f000 fa99 	bl	8001e14 <i2c_master_read>
	ret_val=(uint32_t)(data[0]&0xff)+((uint32_t)(data[1]&0xff))*256+((uint32_t)(data[2]&0xff))*256*256;
 80018e2:	783b      	ldrb	r3, [r7, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	78bb      	ldrb	r3, [r7, #2]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	7879      	ldrb	r1, [r7, #1]
 80018ec:	440b      	add	r3, r1
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	4413      	add	r3, r2
 80018f2:	607b      	str	r3, [r7, #4]
	pressure=(pressure+ret_val/(4096.0*1.0))/2.0;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <lps25hb_get_pressure+0x84>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fdc9 	bl	8000490 <__aeabi_f2d>
 80018fe:	4604      	mov	r4, r0
 8001900:	460d      	mov	r5, r1
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe fda2 	bl	800044c <__aeabi_ui2d>
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <lps25hb_get_pressure+0x88>)
 800190e:	f7fe ff41 	bl	8000794 <__aeabi_ddiv>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4620      	mov	r0, r4
 8001918:	4629      	mov	r1, r5
 800191a:	f7fe fc5b 	bl	80001d4 <__adddf3>
 800191e:	4603      	mov	r3, r0
 8001920:	460c      	mov	r4, r1
 8001922:	4618      	mov	r0, r3
 8001924:	4621      	mov	r1, r4
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192e:	f7fe ff31 	bl	8000794 <__aeabi_ddiv>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	4618      	mov	r0, r3
 8001938:	4621      	mov	r1, r4
 800193a:	f7ff f813 	bl	8000964 <__aeabi_d2f>
 800193e:	4602      	mov	r2, r0
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <lps25hb_get_pressure+0x84>)
 8001942:	601a      	str	r2, [r3, #0]
	return(ret_val);
 8001944:	687b      	ldr	r3, [r7, #4]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bdb0      	pop	{r4, r5, r7, pc}
 800194e:	bf00      	nop
 8001950:	20000004 	.word	0x20000004
 8001954:	40b00000 	.word	0x40b00000

08001958 <lsm6ds0_get_acc>:

void lsm6ds0_get_acc(float* x, float* y, float* z)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8001964:	2010      	movs	r0, #16
 8001966:	f000 f859 	bl	8001a1c <lsm6ds0_read_byte>
 800196a:	4603      	mov	r3, r0
 800196c:	77fb      	strb	r3, [r7, #31]

	temp = temp >> 2;
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	77fb      	strb	r3, [r7, #31]
    temp &= 0x03;			//full scale bits exctracted
 8001974:	7ffb      	ldrb	r3, [r7, #31]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	77fb      	strb	r3, [r7, #31]

	lsm6ds0_readArray(data, LSM6DS0_ADDRESS_ACCX, 6);
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	2206      	movs	r2, #6
 8001982:	2128      	movs	r1, #40	; 0x28
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f8d5 	bl	8001b34 <lsm6ds0_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 800198a:	7c7b      	ldrb	r3, [r7, #17]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b21a      	sxth	r2, r3
 8001990:	7c3b      	ldrb	r3, [r7, #16]
 8001992:	b21b      	sxth	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	83bb      	strh	r3, [r7, #28]
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8001998:	7cfb      	ldrb	r3, [r7, #19]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	b21a      	sxth	r2, r3
 800199e:	7cbb      	ldrb	r3, [r7, #18]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	837b      	strh	r3, [r7, #26]
	zz = ((uint16_t)data[5]) << 8 | data[4];
 80019a6:	7d7b      	ldrb	r3, [r7, #21]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	7d3b      	ldrb	r3, [r7, #20]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	4313      	orrs	r3, r2
 80019b2:	833b      	strh	r3, [r7, #24]

	*x = (xx >> 4) / 1000.0f;
 80019b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019b8:	111b      	asrs	r3, r3, #4
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001a18 <lsm6ds0_get_acc+0xc0>
 80019c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy >> 4) / 1000.0f;
 80019d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019d6:	111b      	asrs	r3, r3, #4
 80019d8:	b21b      	sxth	r3, r3
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001a18 <lsm6ds0_get_acc+0xc0>
 80019e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz >> 4) / 1000.0f;
 80019f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80019f4:	111b      	asrs	r3, r3, #4
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a00:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001a18 <lsm6ds0_get_acc+0xc0>
 8001a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
}
 8001a0e:	bf00      	nop
 8001a10:	3720      	adds	r7, #32
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	447a0000 	.word	0x447a0000

08001a1c <lsm6ds0_read_byte>:
	lsm6ds0_readArray(temp, LSM6DS0_ADDRESS_TEMP_L, 2);

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}

uint8_t lsm6ds0_read_byte(uint8_t reg_addr){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
//#define 	LSM6DS0_DEVICE_ADDRESS_write			0xD4
//#define 	LSM6DS0_DEVICE_ADDRESS_read				0xD6
	return *(i2c_master_read(&data, 1, reg_addr, LSM6DS0_DEVICE_ADDRESS_read, 0));
 8001a2a:	79fa      	ldrb	r2, [r7, #7]
 8001a2c:	f107 000f 	add.w	r0, r7, #15
 8001a30:	2300      	movs	r3, #0
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	23d6      	movs	r3, #214	; 0xd6
 8001a36:	2101      	movs	r1, #1
 8001a38:	f000 f9ec 	bl	8001e14 <i2c_master_read>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	781b      	ldrb	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <hts221_read_byte>:

uint8_t hts221_read_byte(uint8_t reg_addr){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]
//#define hts221_DEVICE_ADDRESS_write	0xBE
//#define hts221_DEVICE_ADDRESS_read	0xBF
	return *(i2c_master_read(&data, 1, reg_addr,hts221_DEVICE_ADDRESS_read , 0));
 8001a56:	79fa      	ldrb	r2, [r7, #7]
 8001a58:	f107 000f 	add.w	r0, r7, #15
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	23bf      	movs	r3, #191	; 0xbf
 8001a62:	2101      	movs	r1, #1
 8001a64:	f000 f9d6 	bl	8001e14 <i2c_master_read>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	781b      	ldrb	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <lps25hb_read_byte>:

uint8_t lps25hb_read_byte(uint8_t reg_addr){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73fb      	strb	r3, [r7, #15]
	//#define lps25hb_DEVICE_ADDRESS_write	0xBA	//barometer+temp
	//#define lps25hb_DEVICE_ADDRESS_read		0xBB
	return *(i2c_master_read(&data, 1, reg_addr,lps25hb_DEVICE_ADDRESS_read , 0));
 8001a82:	79fa      	ldrb	r2, [r7, #7]
 8001a84:	f107 000f 	add.w	r0, r7, #15
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	23bb      	movs	r3, #187	; 0xbb
 8001a8e:	2101      	movs	r1, #1
 8001a90:	f000 f9c0 	bl	8001e14 <i2c_master_read>
 8001a94:	4603      	mov	r3, r0
 8001a96:	781b      	ldrb	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <hts221_write_byte>:

void hts221_write_byte(uint8_t reg_addr, uint8_t value){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	71fb      	strb	r3, [r7, #7]
 8001aac:	4613      	mov	r3, r2
 8001aae:	71bb      	strb	r3, [r7, #6]
//#define hts221_DEVICE_ADDRESS_write	0xBE
//#define hts221_DEVICE_ADDRESS_read	0xBF
	i2c_master_write(value, reg_addr,hts221_DEVICE_ADDRESS_write , 0);
 8001ab0:	79f9      	ldrb	r1, [r7, #7]
 8001ab2:	79b8      	ldrb	r0, [r7, #6]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	22be      	movs	r2, #190	; 0xbe
 8001ab8:	f000 f968 	bl	8001d8c <i2c_master_write>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	460a      	mov	r2, r1
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	71bb      	strb	r3, [r7, #6]
//#define lps25hb_DEVICE_ADDRESS_write	0xBA	//barometer+temp
//#define lps25hb_DEVICE_ADDRESS_read		0xBB
	i2c_master_write(value, reg_addr,lps25hb_DEVICE_ADDRESS_write , 0);
 8001ad4:	79f9      	ldrb	r1, [r7, #7]
 8001ad6:	79b8      	ldrb	r0, [r7, #6]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	22ba      	movs	r2, #186	; 0xba
 8001adc:	f000 f956 	bl	8001d8c <i2c_master_write>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <lsm6ds0_write_byte>:

void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]
//#define 	LSM6DS0_DEVICE_ADDRESS_write			0xD4
//#define 	LSM6DS0_DEVICE_ADDRESS_read				0xD6
	i2c_master_write(value, reg_addr, LSM6DS0_DEVICE_ADDRESS_write, 0);
 8001af8:	79f9      	ldrb	r1, [r7, #7]
 8001afa:	79b8      	ldrb	r0, [r7, #6]
 8001afc:	2300      	movs	r3, #0
 8001afe:	22d4      	movs	r2, #212	; 0xd4
 8001b00:	f000 f944 	bl	8001d8c <i2c_master_write>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <hts221_readArray>:

void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	70bb      	strb	r3, [r7, #2]
	//#define hts221_DEVICE_ADDRESS_write	0xBE
	//#define hts221_DEVICE_ADDRESS_read	0xBF
	i2c_master_read(data, length, reg, hts221_DEVICE_ADDRESS_read, 1);
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	78b9      	ldrb	r1, [r7, #2]
 8001b20:	2301      	movs	r3, #1
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	23bf      	movs	r3, #191	; 0xbf
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f974 	bl	8001e14 <i2c_master_read>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <lsm6ds0_readArray>:

void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
 8001b40:	4613      	mov	r3, r2
 8001b42:	70bb      	strb	r3, [r7, #2]
//#define 	LSM6DS0_DEVICE_ADDRESS_write			0xD4
//#define 	LSM6DS0_DEVICE_ADDRESS_read				0xD6
	i2c_master_read(data, length, reg, LSM6DS0_DEVICE_ADDRESS_read, 1);
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	78b9      	ldrb	r1, [r7, #2]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	23d6      	movs	r3, #214	; 0xd6
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f960 	bl	8001e14 <i2c_master_read>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <lsm6ds0_init>:
	//#define lps25hb_DEVICE_ADDRESS_read		0xBB
	i2c_master_read(data, length, reg, lps25hb_DEVICE_ADDRESS_read, 1);
}

uint8_t lsm6ds0_init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
	uint8_t status = 0,cnt;
 8001b62:	2300      	movs	r3, #0
 8001b64:	71fb      	strb	r3, [r7, #7]

		//LIS3MDL_ACC_ON;
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 8001b66:	2300      	movs	r3, #0
 8001b68:	71bb      	strb	r3, [r7, #6]
 8001b6a:	e010      	b.n	8001b8e <lsm6ds0_init+0x32>
		LL_mDelay(100);
 8001b6c:	2064      	movs	r0, #100	; 0x64
 8001b6e:	f001 fcc9 	bl	8003504 <LL_mDelay>

		uint8_t val = lsm6ds0_read_byte(WHO_AM_I_ADDRES);
 8001b72:	200f      	movs	r0, #15
 8001b74:	f7ff ff52 	bl	8001a1c <lsm6ds0_read_byte>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	717b      	strb	r3, [r7, #5]

		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001b7c:	797b      	ldrb	r3, [r7, #5]
 8001b7e:	2b68      	cmp	r3, #104	; 0x68
 8001b80:	d102      	bne.n	8001b88 <lsm6ds0_init+0x2c>
		{
			status = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	71fb      	strb	r3, [r7, #7]
			break;
 8001b86:	e005      	b.n	8001b94 <lsm6ds0_init+0x38>
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 8001b88:	79bb      	ldrb	r3, [r7, #6]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	71bb      	strb	r3, [r7, #6]
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d9eb      	bls.n	8001b6c <lsm6ds0_init+0x10>
	}


		//acc device init

		uint8_t ctrl1 = 8 << 4; // +-2g res
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	713b      	strb	r3, [r7, #4]
		lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8001b98:	793b      	ldrb	r3, [r7, #4]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	2010      	movs	r0, #16
 8001b9e:	f7ff ffa3 	bl	8001ae8 <lsm6ds0_write_byte>

		return status;
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <hts221_init>:

uint8_t hts221_init(void){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
	uint8_t status = 0,data[6],val=0,cnt=0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	737b      	strb	r3, [r7, #13]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73bb      	strb	r3, [r7, #14]
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73bb      	strb	r3, [r7, #14]
 8001bc2:	e010      	b.n	8001be6 <hts221_init+0x3a>
		LL_mDelay(100);
 8001bc4:	2064      	movs	r0, #100	; 0x64
 8001bc6:	f001 fc9d 	bl	8003504 <LL_mDelay>
		val = hts221_read_byte(WHO_AM_I_ADDRES);
 8001bca:	200f      	movs	r0, #15
 8001bcc:	f7ff ff3c 	bl	8001a48 <hts221_read_byte>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	737b      	strb	r3, [r7, #13]
		//if the device is not found on one address, try another one
		if(val == hts221_WHO_AM_I_VALUE){
 8001bd4:	7b7b      	ldrb	r3, [r7, #13]
 8001bd6:	2bbc      	cmp	r3, #188	; 0xbc
 8001bd8:	d102      	bne.n	8001be0 <hts221_init+0x34>
			status = 1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
			break;
 8001bde:	e005      	b.n	8001bec <hts221_init+0x40>
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	3301      	adds	r3, #1
 8001be4:	73bb      	strb	r3, [r7, #14]
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d9eb      	bls.n	8001bc4 <hts221_init+0x18>
			//if the device is founded on one address, try to inicialize
		}
	}
//#define hts221_av_conf				0x10 //1b
//#define hts221_crtl_reg_1 			0x20 //0x85
	val=0x1b;
 8001bec:	231b      	movs	r3, #27
 8001bee:	737b      	strb	r3, [r7, #13]
	hts221_write_byte(hts221_av_conf, val);
 8001bf0:	7b7b      	ldrb	r3, [r7, #13]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2010      	movs	r0, #16
 8001bf6:	f7ff ff53 	bl	8001aa0 <hts221_write_byte>
	val=0x85;
 8001bfa:	2385      	movs	r3, #133	; 0x85
 8001bfc:	737b      	strb	r3, [r7, #13]
	hts221_write_byte(hts221_crtl_reg_1, val);
 8001bfe:	7b7b      	ldrb	r3, [r7, #13]
 8001c00:	4619      	mov	r1, r3
 8001c02:	2020      	movs	r0, #32
 8001c04:	f7ff ff4c 	bl	8001aa0 <hts221_write_byte>
	LL_mDelay(100);
 8001c08:	2064      	movs	r0, #100	; 0x64
 8001c0a:	f001 fc7b 	bl	8003504 <LL_mDelay>
// hts221 calibration register values
//uint8_t H0,H1;//0x30,0x31,0x32,0x33
//int16_t H2,H3,T0,T1,T2,T3;//[36-37:msb],[3a-3b:msb],[3c-3d:msb],[3e-3f:msb]

	hts221_readArray(&data[0], 0x30, 4);
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2204      	movs	r2, #4
 8001c12:	2130      	movs	r1, #48	; 0x30
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff79 	bl	8001b0c <hts221_readArray>
	H0=data[0]/2;	//30
 8001c1a:	793b      	ldrb	r3, [r7, #4]
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <hts221_init+0x164>)
 8001c22:	701a      	strb	r2, [r3, #0]
	H1=data[1]/2;	//31
 8001c24:	797b      	ldrb	r3, [r7, #5]
 8001c26:	085b      	lsrs	r3, r3, #1
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <hts221_init+0x168>)
 8001c2c:	701a      	strb	r2, [r3, #0]
	T0=data[2];	//32
 8001c2e:	79bb      	ldrb	r3, [r7, #6]
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <hts221_init+0x16c>)
 8001c34:	801a      	strh	r2, [r3, #0]
	T1=data[3];	//33
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <hts221_init+0x170>)
 8001c3c:	801a      	strh	r2, [r3, #0]

	hts221_readArray(&data[0], 0x36, 2);
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2202      	movs	r2, #2
 8001c42:	2136      	movs	r1, #54	; 0x36
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff61 	bl	8001b0c <hts221_readArray>
	H2=(int16_t)( (uint16_t)data[0]+((uint16_t)data[1])*256 );//[36-37]
 8001c4a:	793b      	ldrb	r3, [r7, #4]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	797b      	ldrb	r3, [r7, #5]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <hts221_init+0x174>)
 8001c5e:	801a      	strh	r2, [r3, #0]

	hts221_readArray(&data[0], 0x3a, 2);
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2202      	movs	r2, #2
 8001c64:	213a      	movs	r1, #58	; 0x3a
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff50 	bl	8001b0c <hts221_readArray>
	H3=(int16_t)( (uint16_t)data[0]+((uint16_t)data[1])*256 );//[3a-3b]
 8001c6c:	793b      	ldrb	r3, [r7, #4]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	797b      	ldrb	r3, [r7, #5]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b21a      	sxth	r2, r3
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <hts221_init+0x178>)
 8001c80:	801a      	strh	r2, [r3, #0]

	val=hts221_read_byte(0x35);
 8001c82:	2035      	movs	r0, #53	; 0x35
 8001c84:	f7ff fee0 	bl	8001a48 <hts221_read_byte>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	737b      	strb	r3, [r7, #13]
	T0=((val & 0x3)*256)+T0;
 8001c8c:	7b7b      	ldrb	r3, [r7, #13]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <hts221_init+0x16c>)
 8001c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <hts221_init+0x16c>)
 8001caa:	801a      	strh	r2, [r3, #0]
	T1=((val & 0xc)*64)+T1;
 8001cac:	7b7b      	ldrb	r3, [r7, #13]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	019b      	lsls	r3, r3, #6
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <hts221_init+0x170>)
 8001cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	b21a      	sxth	r2, r3
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <hts221_init+0x170>)
 8001cca:	801a      	strh	r2, [r3, #0]

	hts221_readArray(&data[0], 0x3c, 4);
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2204      	movs	r2, #4
 8001cd0:	213c      	movs	r1, #60	; 0x3c
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff1a 	bl	8001b0c <hts221_readArray>
	T2= (int16_t)( ((uint16_t)data[1])*256+(uint16_t)data[0] );//[3c-3d]
 8001cd8:	797b      	ldrb	r3, [r7, #5]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	793b      	ldrb	r3, [r7, #4]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <hts221_init+0x17c>)
 8001cec:	801a      	strh	r2, [r3, #0]
	T3= (int16_t)( ((uint16_t)data[3])*256+(uint16_t)data[2] );//3e-3f
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	79bb      	ldrb	r3, [r7, #6]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b21a      	sxth	r2, r3
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <hts221_init+0x180>)
 8001d02:	801a      	strh	r2, [r3, #0]

	return(status);
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200000d0 	.word	0x200000d0
 8001d14:	2000019e 	.word	0x2000019e
 8001d18:	200000ce 	.word	0x200000ce
 8001d1c:	20000154 	.word	0x20000154
 8001d20:	2000019c 	.word	0x2000019c
 8001d24:	200000d2 	.word	0x200000d2
 8001d28:	20000048 	.word	0x20000048
 8001d2c:	200000cc 	.word	0x200000cc

08001d30 <lps25hb_init>:

uint8_t lps25hb_init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	uint8_t status = 0,val=0,cnt;
 8001d36:	2300      	movs	r3, #0
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	717b      	strb	r3, [r7, #5]
	//LIS3MDL_ACC_ON;
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 8001d3e:	2300      	movs	r3, #0
 8001d40:	71bb      	strb	r3, [r7, #6]
 8001d42:	e010      	b.n	8001d66 <lps25hb_init+0x36>
		LL_mDelay(100);
 8001d44:	2064      	movs	r0, #100	; 0x64
 8001d46:	f001 fbdd 	bl	8003504 <LL_mDelay>
		val = lps25hb_read_byte(WHO_AM_I_ADDRES);
 8001d4a:	200f      	movs	r0, #15
 8001d4c:	f7ff fe92 	bl	8001a74 <lps25hb_read_byte>
 8001d50:	4603      	mov	r3, r0
 8001d52:	717b      	strb	r3, [r7, #5]
		//if the device is not found on one address, try another one
		if(val == lps25hb_WHO_AM_I_VALUE){
 8001d54:	797b      	ldrb	r3, [r7, #5]
 8001d56:	2bbd      	cmp	r3, #189	; 0xbd
 8001d58:	d102      	bne.n	8001d60 <lps25hb_init+0x30>
			//if the device is founded on one address
			status = 1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	71fb      	strb	r3, [r7, #7]
			break;}
 8001d5e:	e005      	b.n	8001d6c <lps25hb_init+0x3c>
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	3301      	adds	r3, #1
 8001d64:	71bb      	strb	r3, [r7, #6]
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d9eb      	bls.n	8001d44 <lps25hb_init+0x14>
		}
	val = 0x90;//90
 8001d6c:	2390      	movs	r3, #144	; 0x90
 8001d6e:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(lps25hb_crtl_reg_1, val);
 8001d70:	797b      	ldrb	r3, [r7, #5]
 8001d72:	4619      	mov	r1, r3
 8001d74:	2020      	movs	r0, #32
 8001d76:	f7ff fea5 	bl	8001ac4 <lps25hb_write_byte>
	val=52;
	lps25hb_write_byte(0x21, val);
	val=0xdf;
	lps25hb_write_byte(0x2e, val);
	*/
	LL_mDelay(100);
 8001d7a:	2064      	movs	r0, #100	; 0x64
 8001d7c:	f001 fbc2 	bl	8003504 <LL_mDelay>
	return status;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <i2c_master_write>:

void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	717b      	strb	r3, [r7, #5]
 8001da6:	4613      	mov	r3, r2
 8001da8:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001daa:	793b      	ldrb	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001db0:	79bb      	ldrb	r3, [r7, #6]
 8001db2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001db6:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001db8:	7979      	ldrb	r1, [r7, #5]
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <i2c_master_write+0x80>)
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4811      	ldr	r0, [pc, #68]	; (8001e10 <i2c_master_write+0x84>)
 8001dca:	f7fe ff77 	bl	8000cbc <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480f      	ldr	r0, [pc, #60]	; (8001e10 <i2c_master_write+0x84>)
 8001dd4:	f7fe ff98 	bl	8000d08 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001dd8:	e00a      	b.n	8001df0 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001dda:	480d      	ldr	r0, [pc, #52]	; (8001e10 <i2c_master_write+0x84>)
 8001ddc:	f7fe ff27 	bl	8000c2e <LL_I2C_IsActiveFlag_TXIS>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d004      	beq.n	8001df0 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4809      	ldr	r0, [pc, #36]	; (8001e10 <i2c_master_write+0x84>)
 8001dec:	f7fe ff8c 	bl	8000d08 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001df0:	4807      	ldr	r0, [pc, #28]	; (8001e10 <i2c_master_write+0x84>)
 8001df2:	f7fe ff2f 	bl	8000c54 <LL_I2C_IsActiveFlag_STOP>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ee      	beq.n	8001dda <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <i2c_master_write+0x84>)
 8001dfe:	f7fe ff3c 	bl	8000c7a <LL_I2C_ClearFlag_STOP>
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	80002000 	.word	0x80002000
 8001e10:	40005400 	.word	0x40005400

08001e14 <i2c_master_read>:

uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	4611      	mov	r1, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	4603      	mov	r3, r0
 8001e24:	70fb      	strb	r3, [r7, #3]
 8001e26:	460b      	mov	r3, r1
 8001e28:	70bb      	strb	r3, [r7, #2]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001e2e:	4a31      	ldr	r2, [pc, #196]	; (8001ef4 <i2c_master_read+0xe0>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001e34:	7c3b      	ldrb	r3, [r7, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001e3a:	78bb      	ldrb	r3, [r7, #2]
 8001e3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e40:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <i2c_master_read+0xe4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001e48:	482c      	ldr	r0, [pc, #176]	; (8001efc <i2c_master_read+0xe8>)
 8001e4a:	f7fe fed0 	bl	8000bee <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001e4e:	7879      	ldrb	r1, [r7, #1]
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <i2c_master_read+0xec>)
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4827      	ldr	r0, [pc, #156]	; (8001efc <i2c_master_read+0xe8>)
 8001e60:	f7fe ff2c 	bl	8000cbc <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001e64:	e00a      	b.n	8001e7c <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001e66:	4825      	ldr	r0, [pc, #148]	; (8001efc <i2c_master_read+0xe8>)
 8001e68:	f7fe fee1 	bl	8000c2e <LL_I2C_IsActiveFlag_TXIS>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d004      	beq.n	8001e7c <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001e72:	78bb      	ldrb	r3, [r7, #2]
 8001e74:	4619      	mov	r1, r3
 8001e76:	4821      	ldr	r0, [pc, #132]	; (8001efc <i2c_master_read+0xe8>)
 8001e78:	f7fe ff46 	bl	8000d08 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001e7c:	481f      	ldr	r0, [pc, #124]	; (8001efc <i2c_master_read+0xe8>)
 8001e7e:	f7fe fee9 	bl	8000c54 <LL_I2C_IsActiveFlag_STOP>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ee      	beq.n	8001e66 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001e88:	481c      	ldr	r0, [pc, #112]	; (8001efc <i2c_master_read+0xe8>)
 8001e8a:	f7fe fef6 	bl	8000c7a <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001e8e:	bf00      	nop
 8001e90:	481a      	ldr	r0, [pc, #104]	; (8001efc <i2c_master_read+0xe8>)
 8001e92:	f7fe fedf 	bl	8000c54 <LL_I2C_IsActiveFlag_STOP>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f9      	bne.n	8001e90 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001e9c:	7879      	ldrb	r1, [r7, #1]
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <i2c_master_read+0xf0>)
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	2200      	movs	r2, #0
 8001eae:	4813      	ldr	r0, [pc, #76]	; (8001efc <i2c_master_read+0xe8>)
 8001eb0:	f7fe ff04 	bl	8000cbc <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001eb4:	bf00      	nop
 8001eb6:	4811      	ldr	r0, [pc, #68]	; (8001efc <i2c_master_read+0xe8>)
 8001eb8:	f7fe fecc 	bl	8000c54 <LL_I2C_IsActiveFlag_STOP>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f9      	beq.n	8001eb6 <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001ec2:	480e      	ldr	r0, [pc, #56]	; (8001efc <i2c_master_read+0xe8>)
 8001ec4:	f7fe fed9 	bl	8000c7a <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <i2c_master_read+0xe8>)
 8001eca:	f7fe fea0 	bl	8000c0e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <i2c_master_read+0xe8>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <i2c_master_read+0xe8>)
 8001ed4:	f043 0310 	orr.w	r3, r3, #16
 8001ed8:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <i2c_master_read+0xf4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <i2c_master_read+0xe4>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001ee6:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <i2c_master_read+0xe0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000198 	.word	0x20000198
 8001ef8:	20000046 	.word	0x20000046
 8001efc:	40005400 	.word	0x40005400
 8001f00:	80002000 	.word	0x80002000
 8001f04:	80002400 	.word	0x80002400
 8001f08:	20000047 	.word	0x20000047

08001f0c <my_str_cpy>:

void my_str_cpy(uint8_t * from, uint8_t * to, uint16_t *copied, uint16_t max){
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	807b      	strh	r3, [r7, #2]
	uint16_t cnt=0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	82fb      	strh	r3, [r7, #22]
	for(cnt=0;cnt<max;cnt++){
 8001f1e:	2300      	movs	r3, #0
 8001f20:	82fb      	strh	r3, [r7, #22]
 8001f22:	e014      	b.n	8001f4e <my_str_cpy+0x42>
		if(*from == '\0')
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d103      	bne.n	8001f34 <my_str_cpy+0x28>
			{*copied=cnt;return;}
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8afa      	ldrh	r2, [r7, #22]
 8001f30:	801a      	strh	r2, [r3, #0]
 8001f32:	e010      	b.n	8001f56 <my_str_cpy+0x4a>
		else
			{*to=*from;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	701a      	strb	r2, [r3, #0]
			to+=1;from+=1;}
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3301      	adds	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
	for(cnt=0;cnt<max;cnt++){
 8001f48:	8afb      	ldrh	r3, [r7, #22]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	82fb      	strh	r3, [r7, #22]
 8001f4e:	8afa      	ldrh	r2, [r7, #22]
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d3e6      	bcc.n	8001f24 <my_str_cpy+0x18>
	}
}
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <convert_str_to_7seg>:

void convert_str_to_7seg(uint8_t *from, uint16_t *pa,uint16_t *pb,uint16_t max){
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	807b      	strh	r3, [r7, #2]
	uint16_t cnt=0;//,mask_a=0,mask_b=0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	82fb      	strh	r3, [r7, #22]
	for (cnt=0;cnt<max;cnt++){
 8001f72:	2300      	movs	r3, #0
 8001f74:	82fb      	strh	r3, [r7, #22]
 8001f76:	e372      	b.n	800265e <convert_str_to_7seg+0x6fe>
		*pa=0xffff & ~( dig_1_pa_Pin | dig_2_pa_Pin | dig_3_pa_Pin | dig_time_pa_Pin);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f64e 726b 	movw	r2, #61291	; 0xef6b
 8001f7e:	801a      	strh	r2, [r3, #0]
		*pb=0xffff & ~(dig_0_pb_Pin | dig_0_pb_Pin);//& ~(LL_GPIO_PIN_5 | LL_GPIO_PIN_6);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f86:	801a      	strh	r2, [r3, #0]
		switch(*from){
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	3b2d      	subs	r3, #45	; 0x2d
 8001f8e:	2b4c      	cmp	r3, #76	; 0x4c
 8001f90:	f200 8352 	bhi.w	8002638 <convert_str_to_7seg+0x6d8>
 8001f94:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <convert_str_to_7seg+0x3c>)
 8001f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9a:	bf00      	nop
 8001f9c:	08002601 	.word	0x08002601
 8001fa0:	08002611 	.word	0x08002611
 8001fa4:	08002639 	.word	0x08002639
 8001fa8:	080020d1 	.word	0x080020d1
 8001fac:	080020f3 	.word	0x080020f3
 8001fb0:	08002107 	.word	0x08002107
 8001fb4:	08002129 	.word	0x08002129
 8001fb8:	0800214b 	.word	0x0800214b
 8001fbc:	0800216d 	.word	0x0800216d
 8001fc0:	0800218b 	.word	0x0800218b
 8001fc4:	080021ad 	.word	0x080021ad
 8001fc8:	080021c1 	.word	0x080021c1
 8001fcc:	080021e3 	.word	0x080021e3
 8001fd0:	08002639 	.word	0x08002639
 8001fd4:	08002639 	.word	0x08002639
 8001fd8:	08002639 	.word	0x08002639
 8001fdc:	08002639 	.word	0x08002639
 8001fe0:	08002639 	.word	0x08002639
 8001fe4:	08002639 	.word	0x08002639
 8001fe8:	08002639 	.word	0x08002639
 8001fec:	08002205 	.word	0x08002205
 8001ff0:	08002639 	.word	0x08002639
 8001ff4:	0800226b 	.word	0x0800226b
 8001ff8:	08002639 	.word	0x08002639
 8001ffc:	080022cd 	.word	0x080022cd
 8002000:	080022ef 	.word	0x080022ef
 8002004:	08002311 	.word	0x08002311
 8002008:	08002333 	.word	0x08002333
 800200c:	08002377 	.word	0x08002377
 8002010:	0800238b 	.word	0x0800238b
 8002014:	08002531 	.word	0x08002531
 8002018:	080023ad 	.word	0x080023ad
 800201c:	08002553 	.word	0x08002553
 8002020:	08002639 	.word	0x08002639
 8002024:	080023ed 	.word	0x080023ed
 8002028:	0800242d 	.word	0x0800242d
 800202c:	08002639 	.word	0x08002639
 8002030:	08002639 	.word	0x08002639
 8002034:	0800248f 	.word	0x0800248f
 8002038:	08002639 	.word	0x08002639
 800203c:	080024cf 	.word	0x080024cf
 8002040:	08002571 	.word	0x08002571
 8002044:	0800258f 	.word	0x0800258f
 8002048:	080025b1 	.word	0x080025b1
 800204c:	08002639 	.word	0x08002639
 8002050:	080025cf 	.word	0x080025cf
 8002054:	08002639 	.word	0x08002639
 8002058:	08002639 	.word	0x08002639
 800205c:	08002639 	.word	0x08002639
 8002060:	08002639 	.word	0x08002639
 8002064:	080025f1 	.word	0x080025f1
 8002068:	08002639 	.word	0x08002639
 800206c:	08002227 	.word	0x08002227
 8002070:	08002249 	.word	0x08002249
 8002074:	0800228d 	.word	0x0800228d
 8002078:	080022ab 	.word	0x080022ab
 800207c:	08002639 	.word	0x08002639
 8002080:	08002639 	.word	0x08002639
 8002084:	08002639 	.word	0x08002639
 8002088:	08002355 	.word	0x08002355
 800208c:	08002639 	.word	0x08002639
 8002090:	08002639 	.word	0x08002639
 8002094:	08002639 	.word	0x08002639
 8002098:	08002639 	.word	0x08002639
 800209c:	08002639 	.word	0x08002639
 80020a0:	080023cf 	.word	0x080023cf
 80020a4:	0800240f 	.word	0x0800240f
 80020a8:	08002639 	.word	0x08002639
 80020ac:	0800244f 	.word	0x0800244f
 80020b0:	08002471 	.word	0x08002471
 80020b4:	08002639 	.word	0x08002639
 80020b8:	080024ad 	.word	0x080024ad
 80020bc:	080024f1 	.word	0x080024f1
 80020c0:	08002639 	.word	0x08002639
 80020c4:	08002639 	.word	0x08002639
 80020c8:	08002639 	.word	0x08002639
 80020cc:	0800250f 	.word	0x0800250f
			case '0':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 80020d8:	f023 030b 	bic.w	r3, r3, #11
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f023 0320 	bic.w	r3, r3, #32
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	801a      	strh	r2, [r3, #0]
				break;}
 80020f0:	e2a9      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '1':{
				*pa&=~(seg_B_pa_Pin | seg_C_pa_Pin);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	801a      	strh	r2, [r3, #0]
				break;}
 8002104:	e29f      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '2':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_E_pa_Pin );
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	b29a      	uxth	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002120:	b29a      	uxth	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	801a      	strh	r2, [r3, #0]
				break;}
 8002126:	e28e      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '3':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin );
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002142:	b29a      	uxth	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	801a      	strh	r2, [r3, #0]
				break;}
 8002148:	e27d      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '4':{
				*pa &= ~( seg_B_pa_Pin | seg_C_pa_Pin | seg_F_pa_Pin);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	801a      	strh	r2, [r3, #0]
				*pb &= ~( seg_G_pb_Pin );
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	f023 0310 	bic.w	r3, r3, #16
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	801a      	strh	r2, [r3, #0]
				break;}
 800216a:	e26c      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '5':{
				*pa &= ~(seg_A_pa_Pin | seg_C_pa_Pin | seg_F_pa_Pin);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	f423 7385 	bic.w	r3, r3, #266	; 0x10a
 8002174:	b29a      	uxth	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	801a      	strh	r2, [r3, #0]
				break;}
 8002188:	e25d      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '6':{
				*pa &= ~(seg_A_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002192:	f023 030a 	bic.w	r3, r3, #10
 8002196:	b29a      	uxth	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	801a      	strh	r2, [r3, #0]
				break;}
 80021aa:	e24c      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '7':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin );
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	801a      	strh	r2, [r3, #0]
				break;}
 80021be:	e242      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '8':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 80021c8:	f023 030b 	bic.w	r3, r3, #11
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	801a      	strh	r2, [r3, #0]
				break;}
 80021e0:	e231      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '9':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_F_pa_Pin);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	f423 7385 	bic.w	r3, r3, #266	; 0x10a
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	801a      	strh	r2, [r3, #0]
				break;}
 8002202:	e220      	b.n	8002646 <convert_str_to_7seg+0x6e6>

			case 'A':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 800220c:	f023 030b 	bic.w	r3, r3, #11
 8002210:	b29a      	uxth	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	801a      	strh	r2, [r3, #0]
				*pb &= ~( seg_G_pb_Pin);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	f023 0310 	bic.w	r3, r3, #16
 800221e:	b29a      	uxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	801a      	strh	r2, [r3, #0]
				break;}
 8002224:	e20f      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'a':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin );
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 800222e:	f023 0303 	bic.w	r3, r3, #3
 8002232:	b29a      	uxth	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002240:	b29a      	uxth	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	801a      	strh	r2, [r3, #0]
				break;}
 8002246:	e1fe      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'b':{
				*pa &= ~( seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002250:	f023 0308 	bic.w	r3, r3, #8
 8002254:	b29a      	uxth	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002262:	b29a      	uxth	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	801a      	strh	r2, [r3, #0]
				break;}
 8002268:	e1ed      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'C':{
				*pa &= ~(seg_A_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002272:	f023 030a 	bic.w	r3, r3, #10
 8002276:	b29a      	uxth	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin );
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	f023 0320 	bic.w	r3, r3, #32
 8002284:	b29a      	uxth	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	801a      	strh	r2, [r3, #0]
				break;}
 800228a:	e1dc      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'c':{
				*pa &= ~( seg_E_pa_Pin );
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002294:	b29a      	uxth	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	801a      	strh	r2, [r3, #0]
				break;}
 80022a8:	e1cd      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'd':{
				*pa &= ~( seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin );
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	801a      	strh	r2, [r3, #0]
				break;}
 80022ca:	e1bc      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'E':{
				*pa &= ~(seg_A_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022d4:	f023 030a 	bic.w	r3, r3, #10
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	801a      	strh	r2, [r3, #0]
				break;}
 80022ec:	e1ab      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'F':{
				*pa &= ~(seg_A_pa_Pin |  seg_E_pa_Pin | seg_F_pa_Pin);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022f6:	f023 030a 	bic.w	r3, r3, #10
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	801a      	strh	r2, [r3, #0]
				*pb &= ~( seg_G_pb_Pin);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	f023 0310 	bic.w	r3, r3, #16
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	801a      	strh	r2, [r3, #0]
				break;}
 800230e:	e19a      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'G':{
				*pa &= ~(seg_A_pa_Pin |  seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002318:	f023 030a 	bic.w	r3, r3, #10
 800231c:	b29a      	uxth	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin );
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	f023 0320 	bic.w	r3, r3, #32
 800232a:	b29a      	uxth	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	801a      	strh	r2, [r3, #0]
				break;}
 8002330:	e189      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'H':{
				*pa &= ~(seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 800233a:	f023 0309 	bic.w	r3, r3, #9
 800233e:	b29a      	uxth	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	801a      	strh	r2, [r3, #0]
				*pb &= ~( seg_G_pb_Pin);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	f023 0310 	bic.w	r3, r3, #16
 800234c:	b29a      	uxth	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	801a      	strh	r2, [r3, #0]
				break;}
 8002352:	e178      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'h':{
				*pa &= ~( seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 800235c:	f023 0308 	bic.w	r3, r3, #8
 8002360:	b29a      	uxth	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	801a      	strh	r2, [r3, #0]
				*pb &= ~( seg_G_pb_Pin);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	f023 0310 	bic.w	r3, r3, #16
 800236e:	b29a      	uxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	801a      	strh	r2, [r3, #0]
				break;}
 8002374:	e167      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'I':{
				*pa &= ~( seg_E_pa_Pin | seg_F_pa_Pin);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800237e:	f023 0308 	bic.w	r3, r3, #8
 8002382:	b29a      	uxth	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	801a      	strh	r2, [r3, #0]
				// *pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
				break;}
 8002388:	e15d      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'J':{
				*pa &= ~( seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin );
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin );
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	f023 0320 	bic.w	r3, r3, #32
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	801a      	strh	r2, [r3, #0]
				break;}
 80023aa:	e14c      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'L':{
				*pa &= ~(seg_E_pa_Pin | seg_F_pa_Pin);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023b4:	f023 0308 	bic.w	r3, r3, #8
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin );
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	f023 0320 	bic.w	r3, r3, #32
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	801a      	strh	r2, [r3, #0]
				break;}
 80023cc:	e13b      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'n':{
				*pa &= ~( seg_C_pa_Pin | seg_E_pa_Pin );
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	801a      	strh	r2, [r3, #0]
				*pb &= ~( seg_G_pb_Pin);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	f023 0310 	bic.w	r3, r3, #16
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	801a      	strh	r2, [r3, #0]
				break;}
 80023ea:	e12c      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'O':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 80023f4:	f023 030b 	bic.w	r3, r3, #11
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin );
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	f023 0320 	bic.w	r3, r3, #32
 8002406:	b29a      	uxth	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	801a      	strh	r2, [r3, #0]
				break;}
 800240c:	e11b      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'o':{
				*pa &= ~( seg_C_pa_Pin | seg_E_pa_Pin );
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002416:	b29a      	uxth	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	801a      	strh	r2, [r3, #0]
				break;}
 800242a:	e10c      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'P':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin  | seg_E_pa_Pin | seg_F_pa_Pin);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002434:	f023 030b 	bic.w	r3, r3, #11
 8002438:	b29a      	uxth	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	801a      	strh	r2, [r3, #0]
				*pb &= ~( seg_G_pb_Pin);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	f023 0310 	bic.w	r3, r3, #16
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	801a      	strh	r2, [r3, #0]
				break;}
 800244c:	e0fb      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'q':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_F_pa_Pin);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	f423 7385 	bic.w	r3, r3, #266	; 0x10a
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	801a      	strh	r2, [r3, #0]
				*pb &= ~( seg_G_pb_Pin);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	f023 0310 	bic.w	r3, r3, #16
 8002468:	b29a      	uxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	801a      	strh	r2, [r3, #0]
				break;}
 800246e:	e0ea      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'r':{
				*pa &= ~( seg_E_pa_Pin );
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002478:	b29a      	uxth	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_G_pb_Pin);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	f023 0310 	bic.w	r3, r3, #16
 8002486:	b29a      	uxth	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	801a      	strh	r2, [r3, #0]
				break;}
 800248c:	e0db      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'S':{
				*pa &= ~(seg_A_pa_Pin | seg_C_pa_Pin  | seg_F_pa_Pin);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	f423 7385 	bic.w	r3, r3, #266	; 0x10a
 8002496:	b29a      	uxth	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	801a      	strh	r2, [r3, #0]
				break;}
 80024aa:	e0cc      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 't':{
				*pa &= ~( seg_E_pa_Pin | seg_F_pa_Pin);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024b4:	f023 0308 	bic.w	r3, r3, #8
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	801a      	strh	r2, [r3, #0]
				break;}
 80024cc:	e0bb      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'U':{
				*pa &= ~(  seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 80024d6:	f023 0309 	bic.w	r3, r3, #9
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin );
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f023 0320 	bic.w	r3, r3, #32
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	801a      	strh	r2, [r3, #0]
				break;}
 80024ee:	e0aa      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'u':{
				*pa &= ~( seg_C_pa_Pin | seg_E_pa_Pin );
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin );
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	f023 0320 	bic.w	r3, r3, #32
 8002506:	b29a      	uxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	801a      	strh	r2, [r3, #0]
				break;}
 800250c:	e09b      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'y':{
				*pa &= ~( seg_B_pa_Pin | seg_C_pa_Pin  | seg_F_pa_Pin);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002528:	b29a      	uxth	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	801a      	strh	r2, [r3, #0]
				break;}
 800252e:	e08a      	b.n	8002646 <convert_str_to_7seg+0x6e6>

			//specials:
			case 'K':{
				*pa &= ~(seg_A_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002538:	f023 030a 	bic.w	r3, r3, #10
 800253c:	b29a      	uxth	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_G_pb_Pin);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	f023 0310 	bic.w	r3, r3, #16
 800254a:	b29a      	uxth	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	801a      	strh	r2, [r3, #0]
				break;}
 8002550:	e079      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'M':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_F_pa_Pin);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	f023 030b 	bic.w	r3, r3, #11
 800255a:	b29a      	uxth	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin );
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	f023 0320 	bic.w	r3, r3, #32
 8002568:	b29a      	uxth	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	801a      	strh	r2, [r3, #0]
				break;}
 800256e:	e06a      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'V':{
				*pa &= ~( seg_B_pa_Pin |   seg_F_pa_Pin);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	f023 0309 	bic.w	r3, r3, #9
 8002578:	b29a      	uxth	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin );
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	f023 0320 	bic.w	r3, r3, #32
 8002586:	b29a      	uxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	801a      	strh	r2, [r3, #0]
				break;}
 800258c:	e05b      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'W':{
				*pa &= ~( seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002596:	f023 0309 	bic.w	r3, r3, #9
 800259a:	b29a      	uxth	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	801a      	strh	r2, [r3, #0]
				break;}
 80025ae:	e04a      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'X':{
				*pa &= ~(seg_A_pa_Pin  );
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	f023 0302 	bic.w	r3, r3, #2
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	801a      	strh	r2, [r3, #0]
				break;}
 80025cc:	e03b      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case 'Z':{
				*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin    | seg_E_pa_Pin);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	801a      	strh	r2, [r3, #0]
				*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	801a      	strh	r2, [r3, #0]
				break;}
 80025ee:	e02a      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '_':{
				//*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin    | seg_E_pa_Pin);
				*pb &= ~(seg_D_pb_Pin );
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	f023 0320 	bic.w	r3, r3, #32
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	801a      	strh	r2, [r3, #0]
				break;}
 80025fe:	e022      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '-':{
				//*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin    | seg_E_pa_Pin);
				*pb &= ~(seg_G_pb_Pin );
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	f023 0310 	bic.w	r3, r3, #16
 8002608:	b29a      	uxth	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	801a      	strh	r2, [r3, #0]
				break;}
 800260e:	e01a      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			case '.':{
				pb -=1;pa-=1;size_buff--;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b02      	subs	r3, #2
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3b02      	subs	r3, #2
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <convert_str_to_7seg+0x714>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <convert_str_to_7seg+0x714>)
 8002626:	801a      	strh	r2, [r3, #0]
				//*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin    | seg_E_pa_Pin);
				*pb &= ~(seg_DP_pb_Pin );
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	f023 0302 	bic.w	r3, r3, #2
 8002630:	b29a      	uxth	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	801a      	strh	r2, [r3, #0]
				break;}
 8002636:	e006      	b.n	8002646 <convert_str_to_7seg+0x6e6>
			default:
				*pb &=~seg_DP_pb_Pin;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	f023 0302 	bic.w	r3, r3, #2
 8002640:	b29a      	uxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	801a      	strh	r2, [r3, #0]

			}*/


		}
		pa+=1;pb+=1;from+=1;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	3302      	adds	r3, #2
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3302      	adds	r3, #2
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3301      	adds	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
	for (cnt=0;cnt<max;cnt++){
 8002658:	8afb      	ldrh	r3, [r7, #22]
 800265a:	3301      	adds	r3, #1
 800265c:	82fb      	strh	r3, [r7, #22]
 800265e:	8afa      	ldrh	r2, [r7, #22]
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	429a      	cmp	r2, r3
 8002664:	f4ff ac88 	bcc.w	8001f78 <convert_str_to_7seg+0x18>
	}
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	2000002a 	.word	0x2000002a

08002678 <start_tim17_with_IT>:

void start_tim17_with_IT(void){
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	  LL_TIM_EnableIT_UPDATE(TIM17);
 800267c:	4805      	ldr	r0, [pc, #20]	; (8002694 <start_tim17_with_IT+0x1c>)
 800267e:	f7fe fca9 	bl	8000fd4 <LL_TIM_EnableIT_UPDATE>
	  TIM17->CR1 |= TIM_CR1_CEN; // start timer
 8002682:	4b04      	ldr	r3, [pc, #16]	; (8002694 <start_tim17_with_IT+0x1c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a03      	ldr	r2, [pc, #12]	; (8002694 <start_tim17_with_IT+0x1c>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6013      	str	r3, [r2, #0]
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40014800 	.word	0x40014800

08002698 <start_tim16_with_IT>:

void start_tim16_with_IT(void){
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM16);
 800269c:	4805      	ldr	r0, [pc, #20]	; (80026b4 <start_tim16_with_IT+0x1c>)
 800269e:	f7fe fc99 	bl	8000fd4 <LL_TIM_EnableIT_UPDATE>
	TIM16->CR1 |= TIM_CR1_CEN; // start timer
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <start_tim16_with_IT+0x1c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <start_tim16_with_IT+0x1c>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6013      	str	r3, [r2, #0]
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40014400 	.word	0x40014400

080026b8 <multiplex_display_fcn>:

void multiplex_display_fcn(uint16_t offset,uint16_t max_offset){
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	460a      	mov	r2, r1
 80026c2:	80fb      	strh	r3, [r7, #6]
 80026c4:	4613      	mov	r3, r2
 80026c6:	80bb      	strh	r3, [r7, #4]
	//LL_GPIO_TogglePin(led_GPIO_Port, led_Pin);

	if (offset>max_offset){
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	88bb      	ldrh	r3, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d901      	bls.n	80026d4 <multiplex_display_fcn+0x1c>
		offset=max_offset;}
 80026d0:	88bb      	ldrh	r3, [r7, #4]
 80026d2:	80fb      	strh	r3, [r7, #6]
	switch (active_display_digit){
 80026d4:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <multiplex_display_fcn+0x11c>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d867      	bhi.n	80027ac <multiplex_display_fcn+0xf4>
 80026dc:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <multiplex_display_fcn+0x2c>)
 80026de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e2:	bf00      	nop
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	0800271d 	.word	0x0800271d
 80026ec:	0800274d 	.word	0x0800274d
 80026f0:	0800277d 	.word	0x0800277d
		case 0:{
			GPIOA->ODR = display_buffer_pa[offset];
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4a38      	ldr	r2, [pc, #224]	; (80027d8 <multiplex_display_fcn+0x120>)
 80026f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80026fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002700:	615a      	str	r2, [r3, #20]
			GPIOB->ODR = display_buffer_pb[offset];
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4a35      	ldr	r2, [pc, #212]	; (80027dc <multiplex_display_fcn+0x124>)
 8002706:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800270a:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <multiplex_display_fcn+0x128>)
 800270c:	615a      	str	r2, [r3, #20]
			//GPIOB->ODR =
			//	create_mask(display_buffer_pb[offset]);
			//GPIOA->ODR |= dig_0_pa_Pin;
			GPIOB->ODR |= dig_0_pb_Pin;
 800270e:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <multiplex_display_fcn+0x128>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4a33      	ldr	r2, [pc, #204]	; (80027e0 <multiplex_display_fcn+0x128>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6153      	str	r3, [r2, #20]
			//prevoius=display_buffer_pb[offset];
			break;}
 800271a:	e047      	b.n	80027ac <multiplex_display_fcn+0xf4>
		case 1:{
			GPIOA->ODR = display_buffer_pa[offset+1];
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	3301      	adds	r3, #1
 8002720:	4a2d      	ldr	r2, [pc, #180]	; (80027d8 <multiplex_display_fcn+0x120>)
 8002722:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002726:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800272a:	615a      	str	r2, [r3, #20]
			GPIOB->ODR = display_buffer_pb[offset+1];
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	3301      	adds	r3, #1
 8002730:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <multiplex_display_fcn+0x124>)
 8002732:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <multiplex_display_fcn+0x128>)
 8002738:	615a      	str	r2, [r3, #20]
			//GPIOB->ODR =
			//	create_mask(display_buffer_pb[offset+1]);
			GPIOA->ODR |= dig_1_pa_Pin;
 800273a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002744:	f043 0310 	orr.w	r3, r3, #16
 8002748:	6153      	str	r3, [r2, #20]
			//prevoius=display_buffer_pb[offset+1];
			break;}
 800274a:	e02f      	b.n	80027ac <multiplex_display_fcn+0xf4>
		case 2:{
			GPIOA->ODR = display_buffer_pa[offset+2];
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	3302      	adds	r3, #2
 8002750:	4a21      	ldr	r2, [pc, #132]	; (80027d8 <multiplex_display_fcn+0x120>)
 8002752:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002756:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800275a:	615a      	str	r2, [r3, #20]
			GPIOB->ODR = display_buffer_pb[offset+2];
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	3302      	adds	r3, #2
 8002760:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <multiplex_display_fcn+0x124>)
 8002762:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <multiplex_display_fcn+0x128>)
 8002768:	615a      	str	r2, [r3, #20]
			//GPIOB->ODR =
			//	create_mask(display_buffer_pb[offset+2]);
			GPIOA->ODR |= dig_2_pa_Pin;
 800276a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002778:	6153      	str	r3, [r2, #20]
			//prevoius=display_buffer_pb[offset+2];
			break;}
 800277a:	e017      	b.n	80027ac <multiplex_display_fcn+0xf4>
		case 3:{
			GPIOA->ODR = display_buffer_pa[offset+3];
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	3303      	adds	r3, #3
 8002780:	4a15      	ldr	r2, [pc, #84]	; (80027d8 <multiplex_display_fcn+0x120>)
 8002782:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002786:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800278a:	615a      	str	r2, [r3, #20]
			GPIOB->ODR = display_buffer_pb[offset+3];
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	3303      	adds	r3, #3
 8002790:	4a12      	ldr	r2, [pc, #72]	; (80027dc <multiplex_display_fcn+0x124>)
 8002792:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <multiplex_display_fcn+0x128>)
 8002798:	615a      	str	r2, [r3, #20]
			//GPIOB->ODR =
			//create_mask(display_buffer_pb[offset+3]);
			GPIOA->ODR |= dig_3_pa_Pin;
 800279a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6153      	str	r3, [r2, #20]
			//prevoius=display_buffer_pb[offset+3];
			break;}
 80027aa:	bf00      	nop
	}

	active_display_digit++;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <multiplex_display_fcn+0x11c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <multiplex_display_fcn+0x11c>)
 80027b6:	701a      	strb	r2, [r3, #0]
	if (active_display_digit>=4)
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <multiplex_display_fcn+0x11c>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d902      	bls.n	80027c6 <multiplex_display_fcn+0x10e>
		active_display_digit=0;
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <multiplex_display_fcn+0x11c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]

}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000029 	.word	0x20000029
 80027d8:	200000d4 	.word	0x200000d4
 80027dc:	2000004c 	.word	0x2000004c
 80027e0:	48000400 	.word	0x48000400

080027e4 <test_push_button_state>:

uint8_t test_push_button_state(uint16_t max_test){
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	80fb      	strh	r3, [r7, #6]
	uint16_t cnt;
	for (cnt=0; cnt<=max_test;cnt++){
 80027ee:	2300      	movs	r3, #0
 80027f0:	81fb      	strh	r3, [r7, #14]
 80027f2:	e00a      	b.n	800280a <test_push_button_state+0x26>
		//if((push_button_irq3_GPIO_Port->IDR & push_button_irq3_Pin)){
		if((push_button_irq3_GPIO_Port->IDR & push_button_irq3_Pin)==0x0){
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <test_push_button_state+0x3c>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <test_push_button_state+0x20>
			return(0);
 8002800:	2300      	movs	r3, #0
 8002802:	e007      	b.n	8002814 <test_push_button_state+0x30>
	for (cnt=0; cnt<=max_test;cnt++){
 8002804:	89fb      	ldrh	r3, [r7, #14]
 8002806:	3301      	adds	r3, #1
 8002808:	81fb      	strh	r3, [r7, #14]
 800280a:	89fa      	ldrh	r2, [r7, #14]
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	429a      	cmp	r2, r3
 8002810:	d9f0      	bls.n	80027f4 <test_push_button_state+0x10>
		}
	}
	return(255);
 8002812:	23ff      	movs	r3, #255	; 0xff
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	48000400 	.word	0x48000400

08002824 <LL_I2C_IsActiveFlag_RXNE>:
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b04      	cmp	r3, #4
 8002836:	d101      	bne.n	800283c <LL_I2C_IsActiveFlag_RXNE+0x18>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_I2C_ReceiveData8>:
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	b2db      	uxtb	r3, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4013      	ands	r3, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	b2db      	uxtb	r3, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40010400 	.word	0x40010400

08002890 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002898:	4a04      	ldr	r2, [pc, #16]	; (80028ac <LL_EXTI_ClearFlag_0_31+0x1c>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6153      	str	r3, [r2, #20]
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40010400 	.word	0x40010400

080028b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c2:	e7fe      	b.n	80028c2 <HardFault_Handler+0x4>

080028c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <MemManage_Handler+0x4>

080028ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <BusFault_Handler+0x4>

080028d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <UsageFault_Handler+0x4>

080028d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	EXTI->PR |= (EXTI_PR_PIF3);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <EXTI3_IRQHandler+0x34>)
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <EXTI3_IRQHandler+0x34>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6153      	str	r3, [r2, #20]
	mode |= push_button_pushed;
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <EXTI3_IRQHandler+0x38>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <EXTI3_IRQHandler+0x38>)
 800292c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 800292e:	2008      	movs	r0, #8
 8002930:	f7ff ff98 	bl	8002864 <LL_EXTI_IsActiveFlag_0_31>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <EXTI3_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 800293a:	2008      	movs	r0, #8
 800293c:	f7ff ffa8 	bl	8002890 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40010400 	.word	0x40010400
 8002948:	20000028 	.word	0x20000028

0800294c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	mode |= shift_display;		// 500 ms delay to shift display
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <TIM1_UP_TIM16_IRQHandler+0x28>)
 800295c:	701a      	strb	r2, [r3, #0]
	TIM16->SR &=~(TIM_SR_UIF);
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	20000028 	.word	0x20000028
 8002978:	40014400 	.word	0x40014400

0800297c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	mode |= multiplex_display;	//1kHz multiplex display
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 800298c:	701a      	strb	r2, [r3, #0]
	TIM17->SR &=~(TIM_SR_UIF);
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	20000028 	.word	0x20000028
 80029a8:	40014800 	.word	0x40014800

080029ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80029ac:	b598      	push	{r3, r4, r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80029b0:	4812      	ldr	r0, [pc, #72]	; (80029fc <I2C1_EV_IRQHandler+0x50>)
 80029b2:	f7ff ff37 	bl	8002824 <LL_I2C_IsActiveFlag_RXNE>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01c      	beq.n	80029f6 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <I2C1_EV_IRQHandler+0x54>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <I2C1_EV_IRQHandler+0x58>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	1c59      	adds	r1, r3, #1
 80029c8:	b2c8      	uxtb	r0, r1
 80029ca:	490e      	ldr	r1, [pc, #56]	; (8002a04 <I2C1_EV_IRQHandler+0x58>)
 80029cc:	7008      	strb	r0, [r1, #0]
 80029ce:	18d4      	adds	r4, r2, r3
 80029d0:	480a      	ldr	r0, [pc, #40]	; (80029fc <I2C1_EV_IRQHandler+0x50>)
 80029d2:	f7ff ff3a 	bl	800284a <LL_I2C_ReceiveData8>
 80029d6:	4603      	mov	r3, r0
 80029d8:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <I2C1_EV_IRQHandler+0x58>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b13      	cmp	r3, #19
 80029e2:	d903      	bls.n	80029ec <I2C1_EV_IRQHandler+0x40>
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <I2C1_EV_IRQHandler+0x58>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e001      	b.n	80029f0 <I2C1_EV_IRQHandler+0x44>
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <I2C1_EV_IRQHandler+0x58>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <I2C1_EV_IRQHandler+0x5c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd98      	pop	{r3, r4, r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40005400 	.word	0x40005400
 8002a00:	20000198 	.word	0x20000198
 8002a04:	20000047 	.word	0x20000047
 8002a08:	20000046 	.word	0x20000046

08002a0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <SystemInit+0x20>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <SystemInit+0x20>)
 8002a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a36:	490e      	ldr	r1, [pc, #56]	; (8002a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a38:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <LoopForever+0xe>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a4c:	4c0b      	ldr	r4, [pc, #44]	; (8002a7c <LoopForever+0x16>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a5a:	f7ff ffd7 	bl	8002a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a5e:	f000 fd85 	bl	800356c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a62:	f7fe fb33 	bl	80010cc <main>

08002a66 <LoopForever>:

LoopForever:
    b LoopForever
 8002a66:	e7fe      	b.n	8002a66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a68:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002a74:	08003610 	.word	0x08003610
  ldr r2, =_sbss
 8002a78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002a7c:	200001a0 	.word	0x200001a0

08002a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC1_2_IRQHandler>
	...

08002a84 <LL_EXTI_EnableIT_0_31>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4904      	ldr	r1, [pc, #16]	; (8002aa4 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40010400 	.word	0x40010400

08002aa8 <LL_EXTI_EnableIT_32_63>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <LL_EXTI_EnableIT_32_63+0x20>)
 8002ab2:	6a1a      	ldr	r2, [r3, #32]
 8002ab4:	4904      	ldr	r1, [pc, #16]	; (8002ac8 <LL_EXTI_EnableIT_32_63+0x20>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	620b      	str	r3, [r1, #32]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40010400 	.word	0x40010400

08002acc <LL_EXTI_DisableIT_0_31>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <LL_EXTI_DisableIT_0_31+0x24>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	4904      	ldr	r1, [pc, #16]	; (8002af0 <LL_EXTI_DisableIT_0_31+0x24>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40010400 	.word	0x40010400

08002af4 <LL_EXTI_DisableIT_32_63>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <LL_EXTI_DisableIT_32_63+0x24>)
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	4904      	ldr	r1, [pc, #16]	; (8002b18 <LL_EXTI_DisableIT_32_63+0x24>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	620b      	str	r3, [r1, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40010400 	.word	0x40010400

08002b1c <LL_EXTI_EnableEvent_0_31>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4904      	ldr	r1, [pc, #16]	; (8002b3c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40010400 	.word	0x40010400

08002b40 <LL_EXTI_EnableEvent_32_63>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b4c:	4904      	ldr	r1, [pc, #16]	; (8002b60 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40010400 	.word	0x40010400

08002b64 <LL_EXTI_DisableEvent_0_31>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	4904      	ldr	r1, [pc, #16]	; (8002b88 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40010400 	.word	0x40010400

08002b8c <LL_EXTI_DisableEvent_32_63>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40010400 	.word	0x40010400

08002bb4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	4904      	ldr	r1, [pc, #16]	; (8002bd4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be4:	4904      	ldr	r1, [pc, #16]	; (8002bf8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40010400 	.word	0x40010400

08002bfc <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	4904      	ldr	r1, [pc, #16]	; (8002c20 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40010400 	.word	0x40010400

08002c24 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	4904      	ldr	r1, [pc, #16]	; (8002c48 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40010400 	.word	0x40010400

08002c4c <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	4904      	ldr	r1, [pc, #16]	; (8002c6c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60cb      	str	r3, [r1, #12]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40010400 	.word	0x40010400

08002c70 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	4904      	ldr	r1, [pc, #16]	; (8002c90 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40010400 	.word	0x40010400

08002c94 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	4904      	ldr	r1, [pc, #16]	; (8002cb8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	60cb      	str	r3, [r1, #12]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40010400 	.word	0x40010400

08002cbc <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	4904      	ldr	r1, [pc, #16]	; (8002ce0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40010400 	.word	0x40010400

08002ce4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7a1b      	ldrb	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80c2 	beq.w	8002e7e <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d05b      	beq.n	8002dba <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7a5b      	ldrb	r3, [r3, #9]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d00e      	beq.n	8002d28 <LL_EXTI_Init+0x44>
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d017      	beq.n	8002d3e <LL_EXTI_Init+0x5a>
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d120      	bne.n	8002d54 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff24 	bl	8002b64 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff feaf 	bl	8002a84 <LL_EXTI_EnableIT_0_31>
          break;
 8002d26:	e018      	b.n	8002d5a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fecd 	bl	8002acc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fef0 	bl	8002b1c <LL_EXTI_EnableEvent_0_31>
          break;
 8002d3c:	e00d      	b.n	8002d5a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fe9e 	bl	8002a84 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fee5 	bl	8002b1c <LL_EXTI_EnableEvent_0_31>
          break;
 8002d52:	e002      	b.n	8002d5a <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
          break;
 8002d58:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7a9b      	ldrb	r3, [r3, #10]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d02b      	beq.n	8002dba <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	7a9b      	ldrb	r3, [r3, #10]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d00e      	beq.n	8002d88 <LL_EXTI_Init+0xa4>
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d017      	beq.n	8002d9e <LL_EXTI_Init+0xba>
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d120      	bne.n	8002db4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff8c 	bl	8002c94 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff17 	bl	8002bb4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002d86:	e019      	b.n	8002dbc <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff35 	bl	8002bfc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ff58 	bl	8002c4c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002d9c:	e00e      	b.n	8002dbc <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ff06 	bl	8002bb4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff4d 	bl	8002c4c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002db2:	e003      	b.n	8002dbc <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
            break;
 8002db8:	e000      	b.n	8002dbc <LL_EXTI_Init+0xd8>
        }
      }
 8002dba:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d071      	beq.n	8002ea8 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7a5b      	ldrb	r3, [r3, #9]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d00e      	beq.n	8002dea <LL_EXTI_Init+0x106>
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d017      	beq.n	8002e00 <LL_EXTI_Init+0x11c>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d120      	bne.n	8002e16 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fed7 	bl	8002b8c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fe60 	bl	8002aa8 <LL_EXTI_EnableIT_32_63>
          break;
 8002de8:	e018      	b.n	8002e1c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fe80 	bl	8002af4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fea1 	bl	8002b40 <LL_EXTI_EnableEvent_32_63>
          break;
 8002dfe:	e00d      	b.n	8002e1c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fe4f 	bl	8002aa8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fe96 	bl	8002b40 <LL_EXTI_EnableEvent_32_63>
          break;
 8002e14:	e002      	b.n	8002e1c <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
          break;
 8002e1a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7a9b      	ldrb	r3, [r3, #10]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d041      	beq.n	8002ea8 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7a9b      	ldrb	r3, [r3, #10]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d00e      	beq.n	8002e4a <LL_EXTI_Init+0x166>
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d017      	beq.n	8002e60 <LL_EXTI_Init+0x17c>
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d120      	bne.n	8002e76 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff3f 	bl	8002cbc <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fec8 	bl	8002bd8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002e48:	e02f      	b.n	8002eaa <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fee8 	bl	8002c24 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff09 	bl	8002c70 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002e5e:	e024      	b.n	8002eaa <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff feb7 	bl	8002bd8 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fefe 	bl	8002c70 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002e74:	e019      	b.n	8002eaa <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
            break;
 8002e7a:	bf00      	nop
 8002e7c:	e015      	b.n	8002eaa <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fe22 	bl	8002acc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fe69 	bl	8002b64 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fe2c 	bl	8002af4 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fe73 	bl	8002b8c <LL_EXTI_DisableEvent_32_63>
 8002ea6:	e000      	b.n	8002eaa <LL_EXTI_Init+0x1c6>
      }
 8002ea8:	bf00      	nop
#endif
  }
  return status;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <LL_GPIO_SetPinMode>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	613b      	str	r3, [r7, #16]
  return result;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	2103      	movs	r1, #3
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	61bb      	str	r3, [r7, #24]
  return result;
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]
}
 8002f06:	bf00      	nop
 8002f08:	3724      	adds	r7, #36	; 0x24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_GPIO_SetPinOutputType>:
{
 8002f12:	b480      	push	{r7}
 8002f14:	b085      	sub	sp, #20
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	401a      	ands	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	605a      	str	r2, [r3, #4]
}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <LL_GPIO_SetPinSpeed>:
{
 8002f42:	b480      	push	{r7}
 8002f44:	b089      	sub	sp, #36	; 0x24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	613b      	str	r3, [r7, #16]
  return result;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	2103      	movs	r1, #3
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	401a      	ands	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	61bb      	str	r3, [r7, #24]
  return result;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	609a      	str	r2, [r3, #8]
}
 8002f94:	bf00      	nop
 8002f96:	3724      	adds	r7, #36	; 0x24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_GPIO_SetPinPull>:
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	613b      	str	r3, [r7, #16]
  return result;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2103      	movs	r1, #3
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	61bb      	str	r3, [r7, #24]
  return result;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	431a      	orrs	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	60da      	str	r2, [r3, #12]
}
 8002ff2:	bf00      	nop
 8002ff4:	3724      	adds	r7, #36	; 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_GPIO_SetAFPin_0_7>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	b089      	sub	sp, #36	; 0x24
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1a      	ldr	r2, [r3, #32]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	613b      	str	r3, [r7, #16]
  return result;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	210f      	movs	r1, #15
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	401a      	ands	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	61bb      	str	r3, [r7, #24]
  return result;
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	431a      	orrs	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	621a      	str	r2, [r3, #32]
}
 8003050:	bf00      	nop
 8003052:	3724      	adds	r7, #36	; 0x24
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_GPIO_SetAFPin_8_15>:
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	; 0x24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	613b      	str	r3, [r7, #16]
  return result;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	210f      	movs	r1, #15
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	401a      	ands	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	61bb      	str	r3, [r7, #24]
  return result;
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80030b2:	bf00      	nop
 80030b4:	3724      	adds	r7, #36	; 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b088      	sub	sp, #32
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	613b      	str	r3, [r7, #16]
  return result;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80030e0:	e051      	b.n	8003186 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	2101      	movs	r1, #1
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d043      	beq.n	8003180 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d003      	beq.n	8003108 <LL_GPIO_Init+0x4a>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d10e      	bne.n	8003126 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	461a      	mov	r2, r3
 800310e:	69b9      	ldr	r1, [r7, #24]
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff16 	bl	8002f42 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6819      	ldr	r1, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	461a      	mov	r2, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fef6 	bl	8002f12 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	461a      	mov	r2, r3
 800312c:	69b9      	ldr	r1, [r7, #24]
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ff36 	bl	8002fa0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d11a      	bne.n	8003172 <LL_GPIO_Init+0xb4>
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	60bb      	str	r3, [r7, #8]
  return result;
 8003148:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b07      	cmp	r3, #7
 8003152:	d807      	bhi.n	8003164 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	461a      	mov	r2, r3
 800315a:	69b9      	ldr	r1, [r7, #24]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ff4e 	bl	8002ffe <LL_GPIO_SetAFPin_0_7>
 8003162:	e006      	b.n	8003172 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	461a      	mov	r2, r3
 800316a:	69b9      	ldr	r1, [r7, #24]
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ff75 	bl	800305c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	461a      	mov	r2, r3
 8003178:	69b9      	ldr	r1, [r7, #24]
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fe9a 	bl	8002eb4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	3301      	adds	r3, #1
 8003184:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1a6      	bne.n	80030e2 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <LL_I2C_Enable>:
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	601a      	str	r2, [r3, #0]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <LL_I2C_Disable>:
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0201 	bic.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	601a      	str	r2, [r3, #0]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_I2C_ConfigFilters>:
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	0219      	lsls	r1, r3, #8
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	431a      	orrs	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	601a      	str	r2, [r3, #0]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_I2C_SetOwnAddress1>:
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003220:	f023 0307 	bic.w	r3, r3, #7
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	430a      	orrs	r2, r1
 800322a:	431a      	orrs	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_I2C_EnableOwnAddress1>:
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <LL_I2C_DisableOwnAddress1>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_I2C_SetTiming>:
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	611a      	str	r2, [r3, #16]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_I2C_SetMode>:
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <LL_I2C_AcknowledgeNextData>:
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	605a      	str	r2, [r3, #4]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ff65 	bl	80031be <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6899      	ldr	r1, [r3, #8]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	461a      	mov	r2, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ff6d 	bl	80031de <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ffb6 	bl	800327c <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff44 	bl	800319e <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ffa0 	bl	800325c <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6919      	ldr	r1, [r3, #16]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	461a      	mov	r2, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ff70 	bl	800320c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff81 	bl	800323c <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4619      	mov	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ffa9 	bl	8003298 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ffb6 	bl	80032be <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <LL_TIM_SetPrescaler>:
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_TIM_SetAutoReload>:
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <LL_TIM_SetRepetitionCounter>:
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	615a      	str	r2, [r3, #20]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a2f      	ldr	r2, [pc, #188]	; (80034a0 <LL_TIM_Init+0xd0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <LL_TIM_Init+0x28>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d003      	beq.n	80033f8 <LL_TIM_Init+0x28>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a2c      	ldr	r2, [pc, #176]	; (80034a4 <LL_TIM_Init+0xd4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d106      	bne.n	8003406 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a25      	ldr	r2, [pc, #148]	; (80034a0 <LL_TIM_Init+0xd0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <LL_TIM_Init+0x66>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d00f      	beq.n	8003436 <LL_TIM_Init+0x66>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <LL_TIM_Init+0xd4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00b      	beq.n	8003436 <LL_TIM_Init+0x66>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a21      	ldr	r2, [pc, #132]	; (80034a8 <LL_TIM_Init+0xd8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <LL_TIM_Init+0x66>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a20      	ldr	r2, [pc, #128]	; (80034ac <LL_TIM_Init+0xdc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <LL_TIM_Init+0x66>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <LL_TIM_Init+0xe0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d106      	bne.n	8003444 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	4619      	mov	r1, r3
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff91 	bl	8003378 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff7d 	bl	800335c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a0e      	ldr	r2, [pc, #56]	; (80034a0 <LL_TIM_Init+0xd0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00b      	beq.n	8003482 <LL_TIM_Init+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <LL_TIM_Init+0xd8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <LL_TIM_Init+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a0d      	ldr	r2, [pc, #52]	; (80034ac <LL_TIM_Init+0xdc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <LL_TIM_Init+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <LL_TIM_Init+0xe0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d105      	bne.n	800348e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ff83 	bl	8003394 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ff8e 	bl	80033b0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400
 80034b0:	40014800 	.word	0x40014800

080034b4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c6:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <LL_InitTick+0x30>)
 80034c8:	3b01      	subs	r3, #1
 80034ca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <LL_InitTick+0x30>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d2:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <LL_InitTick+0x30>)
 80034d4:	2205      	movs	r2, #5
 80034d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000e010 	.word	0xe000e010

080034e8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80034f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ffdd 	bl	80034b4 <LL_InitTick>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <LL_mDelay+0x44>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003512:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d00c      	beq.n	8003536 <LL_mDelay+0x32>
  {
    Delay++;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3301      	adds	r3, #1
 8003520:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003522:	e008      	b.n	8003536 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <LL_mDelay+0x44>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <LL_mDelay+0x32>
    {
      Delay--;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f3      	bne.n	8003524 <LL_mDelay+0x20>
    }
  }
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000e010 	.word	0xe000e010

0800354c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003554:	4a04      	ldr	r2, [pc, #16]	; (8003568 <LL_SetSystemCoreClock+0x1c>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6013      	str	r3, [r2, #0]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000008 	.word	0x20000008

0800356c <__libc_init_array>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4e0d      	ldr	r6, [pc, #52]	; (80035a4 <__libc_init_array+0x38>)
 8003570:	4c0d      	ldr	r4, [pc, #52]	; (80035a8 <__libc_init_array+0x3c>)
 8003572:	1ba4      	subs	r4, r4, r6
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	2500      	movs	r5, #0
 8003578:	42a5      	cmp	r5, r4
 800357a:	d109      	bne.n	8003590 <__libc_init_array+0x24>
 800357c:	4e0b      	ldr	r6, [pc, #44]	; (80035ac <__libc_init_array+0x40>)
 800357e:	4c0c      	ldr	r4, [pc, #48]	; (80035b0 <__libc_init_array+0x44>)
 8003580:	f000 f818 	bl	80035b4 <_init>
 8003584:	1ba4      	subs	r4, r4, r6
 8003586:	10a4      	asrs	r4, r4, #2
 8003588:	2500      	movs	r5, #0
 800358a:	42a5      	cmp	r5, r4
 800358c:	d105      	bne.n	800359a <__libc_init_array+0x2e>
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003594:	4798      	blx	r3
 8003596:	3501      	adds	r5, #1
 8003598:	e7ee      	b.n	8003578 <__libc_init_array+0xc>
 800359a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800359e:	4798      	blx	r3
 80035a0:	3501      	adds	r5, #1
 80035a2:	e7f2      	b.n	800358a <__libc_init_array+0x1e>
 80035a4:	08003608 	.word	0x08003608
 80035a8:	08003608 	.word	0x08003608
 80035ac:	08003608 	.word	0x08003608
 80035b0:	0800360c 	.word	0x0800360c

080035b4 <_init>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	bf00      	nop
 80035b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ba:	bc08      	pop	{r3}
 80035bc:	469e      	mov	lr, r3
 80035be:	4770      	bx	lr

080035c0 <_fini>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	bf00      	nop
 80035c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c6:	bc08      	pop	{r3}
 80035c8:	469e      	mov	lr, r3
 80035ca:	4770      	bx	lr
