
vrs_zad_8_cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f2c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080050b8  080050b8  000150b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005180  08005180  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005180  08005180  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005180  08005180  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  080051f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080051f8  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b72  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000106e  00000000  00000000  00025c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000708  00000000  00000000  00026c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000680  00000000  00000000  00027388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016536  00000000  00000000  00027a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003eec  00000000  00000000  0003df3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078ffd  00000000  00000000  00041e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bae27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002200  00000000  00000000  000baea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800509c 	.word	0x0800509c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800509c 	.word	0x0800509c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4907      	ldr	r1, [pc, #28]	; (8000bdc <__NVIC_EnableIRQ+0x38>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <LL_I2C_DisableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_DisableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableClockStretching(I2C_TypeDef *I2Cx)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b085      	sub	sp, #20
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000cee:	f023 0306 	bic.w	r3, r3, #6
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	60da      	str	r2, [r3, #12]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60da      	str	r2, [r3, #12]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f043 0204 	orr.w	r2, r3, #4
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	601a      	str	r2, [r3, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 0204 	bic.w	r2, r3, #4
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	601a      	str	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d101      	bne.n	8000d82 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0320 	and.w	r3, r3, #32
 8000da0:	2b20      	cmp	r3, #32
 8000da2:	d101      	bne.n	8000da8 <LL_I2C_IsActiveFlag_STOP+0x18>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f043 0220 	orr.w	r2, r3, #32
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	61da      	str	r2, [r3, #28]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	605a      	str	r2, [r3, #4]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	0d5b      	lsrs	r3, r3, #21
 8000e0e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <LL_I2C_HandleTransfer+0x48>)
 8000e14:	430b      	orrs	r3, r1
 8000e16:	43db      	mvns	r3, r3
 8000e18:	401a      	ands	r2, r3
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4319      	orrs	r1, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	041b      	lsls	r3, r3, #16
 8000e24:	4319      	orrs	r1, r3
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4319      	orrs	r1, r3
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	03ff7bff 	.word	0x03ff7bff

08000e44 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8000e50:	78fa      	ldrb	r2, [r7, #3]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <LL_RCC_HSI_Enable+0x1c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <LL_RCC_HSI_Enable+0x1c>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <LL_RCC_HSI_IsReady+0x20>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	bf0c      	ite	eq
 8000e94:	2301      	moveq	r3, #1
 8000e96:	2300      	movne	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4904      	ldr	r1, [pc, #16]	; (8000ed0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <LL_RCC_SetSysClkSource+0x24>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f023 0203 	bic.w	r2, r3, #3
 8000ee4:	4904      	ldr	r1, [pc, #16]	; (8000ef8 <LL_RCC_SetSysClkSource+0x24>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	604b      	str	r3, [r1, #4]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000

08000efc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <LL_RCC_GetSysClkSource+0x18>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <LL_RCC_SetAHBPrescaler+0x24>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f28:	4904      	ldr	r1, [pc, #16]	; (8000f3c <LL_RCC_SetAHBPrescaler+0x24>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40021000 	.word	0x40021000

08000f40 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f50:	4904      	ldr	r1, [pc, #16]	; (8000f64 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	604b      	str	r3, [r1, #4]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000

08000f68 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f78:	4904      	ldr	r1, [pc, #16]	; (8000f8c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	604b      	str	r3, [r1, #4]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000

08000f90 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <LL_RCC_SetI2CClockSource+0x2c>)
 8000f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	0e1b      	lsrs	r3, r3, #24
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000faa:	4904      	ldr	r1, [pc, #16]	; (8000fbc <LL_RCC_SetI2CClockSource+0x2c>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fca:	695a      	ldr	r2, [r3, #20]
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fd6:	695a      	ldr	r2, [r3, #20]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000

08000ff0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ffa:	69da      	ldr	r2, [r3, #28]
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001006:	69da      	ldr	r2, [r3, #28]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4013      	ands	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000

08001020 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <LL_APB2_GRP1_EnableClock+0x2c>)
 800102a:	699a      	ldr	r2, [r3, #24]
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <LL_APB2_GRP1_EnableClock+0x2c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4313      	orrs	r3, r2
 8001032:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001036:	699a      	ldr	r2, [r3, #24]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4013      	ands	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40021000 	.word	0x40021000

08001050 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800105a:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <LL_SYSCFG_SetEXTISource+0x58>)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	3302      	adds	r3, #2
 8001062:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	0c1b      	lsrs	r3, r3, #16
 800106a:	43db      	mvns	r3, r3
 800106c:	ea02 0103 	and.w	r1, r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	0c1b      	lsrs	r3, r3, #16
 8001074:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	fa03 f202 	lsl.w	r2, r3, r2
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <LL_SYSCFG_SetEXTISource+0x58>)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	430a      	orrs	r2, r1
 8001096:	3302      	adds	r3, #2
 8001098:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40010000 	.word	0x40010000

080010ac <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <LL_FLASH_SetLatency+0x24>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 0207 	bic.w	r2, r3, #7
 80010bc:	4904      	ldr	r1, [pc, #16]	; (80010d0 <LL_FLASH_SetLatency+0x24>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40022000 	.word	0x40022000

080010d4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <LL_FLASH_GetLatency+0x18>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0307 	and.w	r3, r3, #7
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000

080010f0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	601a      	str	r2, [r3, #0]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	60da      	str	r2, [r3, #12]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	613b      	str	r3, [r7, #16]
  return result;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2103      	movs	r1, #3
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	61bb      	str	r3, [r7, #24]
  return result;
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	431a      	orrs	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800118e:	b480      	push	{r7}
 8001190:	b089      	sub	sp, #36	; 0x24
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	613b      	str	r3, [r7, #16]
  return result;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	fab3 f383 	clz	r3, r3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2103      	movs	r1, #3
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	401a      	ands	r2, r3
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	61bb      	str	r3, [r7, #24]
  return result;
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	431a      	orrs	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	60da      	str	r2, [r3, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3724      	adds	r7, #36	; 0x24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t temp=0;
 800120e:	2300      	movs	r3, #0
 8001210:	71fb      	strb	r3, [r7, #7]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff ff04 	bl	8001020 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001218:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800121c:	f7ff fee8 	bl	8000ff0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f7ff fc8d 	bl	8000b40 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001226:	f000 f91d 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122a:	f000 fa2f 	bl	800168c <MX_GPIO_Init>
  MX_TIM17_Init();
 800122e:	f000 f9f5 	bl	800161c <MX_TIM17_Init>
  MX_TIM16_Init();
 8001232:	f000 f9bb 	bl	80015ac <MX_TIM16_Init>
  MX_I2C1_Init();
 8001236:	f000 f94b 	bl	80014d0 <MX_I2C1_Init>


  //my_str_cpy((uint8_t *) "PEtEr_SZabo_47447_PIrHaLa_MatEJ_92621", str, &size_buff, max_buff_size);
  //convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);

  push_button_pushed_fcn();
 800123a:	f000 fab9 	bl	80017b0 <push_button_pushed_fcn>
  //NVIC_EnableIRQ(EXTI0_IRQn);



//  temp=lsm6ds0_init();//accelerometer
  temp=hts221_init();//humidity
 800123e:	f000 fef5 	bl	800202c <hts221_init>
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  temp=lps25hb_init();//barometer
 8001246:	f000 ffc1 	bl	80021cc <lps25hb_init>
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  temp=lis3mdl_init();//magnetometer
 800124e:	f000 fff2 	bl	8002236 <lis3mdl_init>
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if (temp==0)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d103      	bne.n	8001264 <main+0x5c>
  	  {acc[0]=0.0;}
 800125c:	4b76      	ldr	r3, [pc, #472]	; (8001438 <main+0x230>)
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

  start_tim17_with_IT();
 8001264:	f001 fd38 	bl	8002cd8 <start_tim17_with_IT>
  start_tim16_with_IT();
 8001268:	f001 fd46 	bl	8002cf8 <start_tim16_with_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 800126c:	bf30      	wfi
	  if (mode & multiplex_display){
 800126e:	4b73      	ldr	r3, [pc, #460]	; (800143c <main+0x234>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d010      	beq.n	800129c <main+0x94>
		  multiplex_display_fcn(offset,size_buff-4);
 800127a:	4b71      	ldr	r3, [pc, #452]	; (8001440 <main+0x238>)
 800127c:	881a      	ldrh	r2, [r3, #0]
 800127e:	4b71      	ldr	r3, [pc, #452]	; (8001444 <main+0x23c>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	3b04      	subs	r3, #4
 8001284:	b29b      	uxth	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	4610      	mov	r0, r2
 800128a:	f001 fd45 	bl	8002d18 <multiplex_display_fcn>
		  mode &=~ multiplex_display;
 800128e:	4b6b      	ldr	r3, [pc, #428]	; (800143c <main+0x234>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	f023 0301 	bic.w	r3, r3, #1
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b68      	ldr	r3, [pc, #416]	; (800143c <main+0x234>)
 800129a:	701a      	strb	r2, [r3, #0]
	  }
	  if (mode & shift_display){
 800129c:	4b67      	ldr	r3, [pc, #412]	; (800143c <main+0x234>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80b0 	beq.w	800140a <main+0x202>
		  //lsm6ds0_get_acc(&acc[0],&acc[1],&acc[2]);
		  //ret_val=lsm6ds0_get_temp(); //picsafust
		  //ret_val=hts221_get_temp(0xff);	//fasza
		  //ret_val=hts221_get_hum(0xff);	//fasza

		  if (mode & up_or_down){
 80012aa:	4b64      	ldr	r3, [pc, #400]	; (800143c <main+0x234>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d01b      	beq.n	80012ee <main+0xe6>
			  // up

			  offset++;
 80012b6:	4b62      	ldr	r3, [pc, #392]	; (8001440 <main+0x238>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4b60      	ldr	r3, [pc, #384]	; (8001440 <main+0x238>)
 80012c0:	801a      	strh	r2, [r3, #0]
			  if (offset >(size_buff-4)){
 80012c2:	4b5f      	ldr	r3, [pc, #380]	; (8001440 <main+0x238>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b5e      	ldr	r3, [pc, #376]	; (8001444 <main+0x23c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	3b04      	subs	r3, #4
 80012ce:	429a      	cmp	r2, r3
 80012d0:	dd22      	ble.n	8001318 <main+0x110>
				  offset=size_buff-4;
 80012d2:	4b5c      	ldr	r3, [pc, #368]	; (8001444 <main+0x23c>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	3b04      	subs	r3, #4
 80012d8:	b29a      	uxth	r2, r3
 80012da:	4b59      	ldr	r3, [pc, #356]	; (8001440 <main+0x238>)
 80012dc:	801a      	strh	r2, [r3, #0]
				  mode &= ~up_or_down;
 80012de:	4b57      	ldr	r3, [pc, #348]	; (800143c <main+0x234>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f023 0304 	bic.w	r3, r3, #4
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b54      	ldr	r3, [pc, #336]	; (800143c <main+0x234>)
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e014      	b.n	8001318 <main+0x110>
			  }
		  }
		  else{

			  if (offset == 0){
 80012ee:	4b54      	ldr	r3, [pc, #336]	; (8001440 <main+0x238>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10a      	bne.n	800130c <main+0x104>
				  offset=0;
 80012f6:	4b52      	ldr	r3, [pc, #328]	; (8001440 <main+0x238>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	801a      	strh	r2, [r3, #0]
				  mode |=up_or_down;
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <main+0x234>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b4d      	ldr	r3, [pc, #308]	; (800143c <main+0x234>)
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	e005      	b.n	8001318 <main+0x110>
			  }
			  else{
				  offset--;
 800130c:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <main+0x238>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	3b01      	subs	r3, #1
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <main+0x238>)
 8001316:	801a      	strh	r2, [r3, #0]
			  }
		  }
		  switch (what_to_measure){
 8001318:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <main+0x240>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b04      	cmp	r3, #4
 800131e:	d85e      	bhi.n	80013de <main+0x1d6>
 8001320:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <main+0x120>)
 8001322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001326:	bf00      	nop
 8001328:	0800133d 	.word	0x0800133d
 800132c:	0800135b 	.word	0x0800135b
 8001330:	08001379 	.word	0x08001379
 8001334:	08001397 	.word	0x08001397
 8001338:	080013b5 	.word	0x080013b5
		  case 0:{ // magnitude == azymuth
			  lis3mdl_get_azymuth(with_avg);
 800133c:	20ff      	movs	r0, #255	; 0xff
 800133e:	f000 fdaf 	bl	8001ea0 <lis3mdl_get_azymuth>
			  // float to char
			  float_to_char(azymuth,str,4, 3,1);
 8001342:	4b42      	ldr	r3, [pc, #264]	; (800144c <main+0x244>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	2301      	movs	r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	2104      	movs	r1, #4
 800134e:	4840      	ldr	r0, [pc, #256]	; (8001450 <main+0x248>)
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	f000 fb42 	bl	80019dc <float_to_char>
			  break;}
 8001358:	e041      	b.n	80013de <main+0x1d6>
		  case 1:{ // temperature
			  hts221_get_temp(with_avg);
 800135a:	20ff      	movs	r0, #255	; 0xff
 800135c:	f000 fc16 	bl	8001b8c <hts221_get_temp>
			  // float to char
			  float_to_char(temperature,str,5, 2,1);
 8001360:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <main+0x24c>)
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	2301      	movs	r3, #1
 8001368:	2202      	movs	r2, #2
 800136a:	2105      	movs	r1, #5
 800136c:	4838      	ldr	r0, [pc, #224]	; (8001450 <main+0x248>)
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	f000 fb33 	bl	80019dc <float_to_char>
			  break;}
 8001376:	e032      	b.n	80013de <main+0x1d6>
		  case 2: { // humidity
			  hts221_get_hum(with_avg);
 8001378:	20ff      	movs	r0, #255	; 0xff
 800137a:	f000 fc95 	bl	8001ca8 <hts221_get_hum>
			  // float to char
			  float_to_char(humidity,str,4, 2,0);
 800137e:	4b36      	ldr	r3, [pc, #216]	; (8001458 <main+0x250>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	2300      	movs	r3, #0
 8001386:	2202      	movs	r2, #2
 8001388:	2104      	movs	r1, #4
 800138a:	4831      	ldr	r0, [pc, #196]	; (8001450 <main+0x248>)
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	f000 fb24 	bl	80019dc <float_to_char>
			  break;}
 8001394:	e023      	b.n	80013de <main+0x1d6>
		  case 3: { // pressure
			  lps25hb_get_pressure(with_avg);
 8001396:	20ff      	movs	r0, #255	; 0xff
 8001398:	f000 fd24 	bl	8001de4 <lps25hb_get_pressure>
			  // float to char
			  float_to_char(pressure,str,4, 4,2);
 800139c:	4b2f      	ldr	r3, [pc, #188]	; (800145c <main+0x254>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	2302      	movs	r3, #2
 80013a4:	2204      	movs	r2, #4
 80013a6:	2104      	movs	r1, #4
 80013a8:	4829      	ldr	r0, [pc, #164]	; (8001450 <main+0x248>)
 80013aa:	eeb0 0a67 	vmov.f32	s0, s15
 80013ae:	f000 fb15 	bl	80019dc <float_to_char>
			  break;}
 80013b2:	e014      	b.n	80013de <main+0x1d6>
		  case 4: { // altitude
			  lps25hb_get_pressure(with_avg);
 80013b4:	20ff      	movs	r0, #255	; 0xff
 80013b6:	f000 fd15 	bl	8001de4 <lps25hb_get_pressure>
			  hts221_get_temp(with_avg);
 80013ba:	20ff      	movs	r0, #255	; 0xff
 80013bc:	f000 fbe6 	bl	8001b8c <hts221_get_temp>
			  calculate_altitude(with_avg);
 80013c0:	20ff      	movs	r0, #255	; 0xff
 80013c2:	f001 fc11 	bl	8002be8 <calculate_altitude>
			  // float to char
			  float_to_char(altitude,str,4, 4,1);
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <main+0x258>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	2301      	movs	r3, #1
 80013ce:	2204      	movs	r2, #4
 80013d0:	2104      	movs	r1, #4
 80013d2:	481f      	ldr	r0, [pc, #124]	; (8001450 <main+0x248>)
 80013d4:	eeb0 0a67 	vmov.f32	s0, s15
 80013d8:	f000 fb00 	bl	80019dc <float_to_char>
			  break;}
 80013dc:	bf00      	nop

		  }
		  hts221_get_temp(with_avg);			//fasza
 80013de:	20ff      	movs	r0, #255	; 0xff
 80013e0:	f000 fbd4 	bl	8001b8c <hts221_get_temp>
		  hts221_get_hum(with_avg);				//fasza
 80013e4:	20ff      	movs	r0, #255	; 0xff
 80013e6:	f000 fc5f 	bl	8001ca8 <hts221_get_hum>
		  lps25hb_get_pressure(with_avg);		//fasza
 80013ea:	20ff      	movs	r0, #255	; 0xff
 80013ec:	f000 fcfa 	bl	8001de4 <lps25hb_get_pressure>
		  calculate_altitude(with_avg);			//fasza
 80013f0:	20ff      	movs	r0, #255	; 0xff
 80013f2:	f001 fbf9 	bl	8002be8 <calculate_altitude>
		  lis3mdl_get_azymuth(with_avg);		//kerdeses
 80013f6:	20ff      	movs	r0, #255	; 0xff
 80013f8:	f000 fd52 	bl	8001ea0 <lis3mdl_get_azymuth>

		  //offset++;
		  //LL_GPIO_TogglePin(led_GPIO_Port,led_Pin);
		  //if (offset >(size_buff-4)){
		  	  //offset=0;}
		  mode &=~ shift_display;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <main+0x234>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	f023 0302 	bic.w	r3, r3, #2
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <main+0x234>)
 8001408:	701a      	strb	r2, [r3, #0]
	  }
	  if (mode & push_button_pushed){
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <main+0x234>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	f6bf af2b 	bge.w	800126c <main+0x64>
		  //LL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
		  if (test_push_button_state(max_test_push_button)){
 8001416:	f243 3009 	movw	r0, #13065	; 0x3309
 800141a:	f001 fd13 	bl	8002e44 <test_push_button_state>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <main+0x220>
			  push_button_pushed_fcn();
 8001424:	f000 f9c4 	bl	80017b0 <push_button_pushed_fcn>
		  }
		  //LL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
		  mode &= ~ push_button_pushed;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <main+0x234>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b02      	ldr	r3, [pc, #8]	; (800143c <main+0x234>)
 8001434:	701a      	strb	r2, [r3, #0]
	  __WFI();
 8001436:	e719      	b.n	800126c <main+0x64>
 8001438:	200000a4 	.word	0x200000a4
 800143c:	2000008c 	.word	0x2000008c
 8001440:	20000090 	.word	0x20000090
 8001444:	2000008e 	.word	0x2000008e
 8001448:	20000000 	.word	0x20000000
 800144c:	200000b0 	.word	0x200000b0
 8001450:	200001c8 	.word	0x200001c8
 8001454:	20000094 	.word	0x20000094
 8001458:	20000098 	.word	0x20000098
 800145c:	2000009c 	.word	0x2000009c
 8001460:	200000a0 	.word	0x200000a0

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff fe1f 	bl	80010ac <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800146e:	bf00      	nop
 8001470:	f7ff fe30 	bl	80010d4 <LL_FLASH_GetLatency>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1fa      	bne.n	8001470 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800147a:	f7ff fcf3 	bl	8000e64 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800147e:	bf00      	nop
 8001480:	f7ff fd00 	bl	8000e84 <LL_RCC_HSI_IsReady>
 8001484:	4603      	mov	r3, r0
 8001486:	2b01      	cmp	r3, #1
 8001488:	d1fa      	bne.n	8001480 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800148a:	2010      	movs	r0, #16
 800148c:	f7ff fd0c 	bl	8000ea8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fd41 	bl	8000f18 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff fd52 	bl	8000f40 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff fd63 	bl	8000f68 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fd16 	bl	8000ed4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80014a8:	bf00      	nop
 80014aa:	f7ff fd27 	bl	8000efc <LL_RCC_GetSysClkSource>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1fa      	bne.n	80014aa <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <SystemClock_Config+0x68>)
 80014b6:	f002 fb47 	bl	8003b48 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <SystemClock_Config+0x68>)
 80014bc:	f002 fb76 	bl	8003bac <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80014c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80014c4:	f7ff fd64 	bl	8000f90 <LL_RCC_SetI2CClockSource>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	007a1200 	.word	0x007a1200

080014d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	; 0x38
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80014fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80014fe:	f7ff fd5f 	bl	8000fc0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001502:	23c0      	movs	r3, #192	; 0xc0
 8001504:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001506:	2302      	movs	r3, #2
 8001508:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800150e:	2301      	movs	r3, #1
 8001510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001512:	2301      	movs	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001516:	2304      	movs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4820      	ldr	r0, [pc, #128]	; (80015a0 <MX_I2C1_Init+0xd0>)
 8001520:	f002 f8fd 	bl	800371e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001524:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001528:	f7ff fd62 	bl	8000ff0 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800152c:	f7ff fb2c 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8001530:	4603      	mov	r3, r0
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fb7c 	bl	8000c34 <NVIC_EncodePriority>
 800153c:	4603      	mov	r3, r0
 800153e:	4619      	mov	r1, r3
 8001540:	201f      	movs	r0, #31
 8001542:	f7ff fb4d 	bl	8000be0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001546:	201f      	movs	r0, #31
 8001548:	f7ff fb2c 	bl	8000ba4 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableClockStretching(I2C1);
 800154c:	4815      	ldr	r0, [pc, #84]	; (80015a4 <MX_I2C1_Init+0xd4>)
 800154e:	f7ff fba4 	bl	8000c9a <LL_I2C_DisableClockStretching>
  LL_I2C_EnableAutoEndMode(I2C1);
 8001552:	4814      	ldr	r0, [pc, #80]	; (80015a4 <MX_I2C1_Init+0xd4>)
 8001554:	f7ff fc3f 	bl	8000dd6 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001558:	4812      	ldr	r0, [pc, #72]	; (80015a4 <MX_I2C1_Init+0xd4>)
 800155a:	f7ff fbd6 	bl	8000d0a <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800155e:	4811      	ldr	r0, [pc, #68]	; (80015a4 <MX_I2C1_Init+0xd4>)
 8001560:	f7ff fbab 	bl	8000cba <LL_I2C_DisableGeneralCall>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_I2C1_Init+0xd8>)
 800156a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800157c:	2300      	movs	r3, #0
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_I2C1_Init+0xd4>)
 8001588:	f002 f9dc 	bl	8003944 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_I2C1_Init+0xd4>)
 8001592:	f7ff fba2 	bl	8000cda <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3738      	adds	r7, #56	; 0x38
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	48000400 	.word	0x48000400
 80015a4:	40005400 	.word	0x40005400
 80015a8:	2000090e 	.word	0x2000090e

080015ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 80015c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80015c4:	f7ff fd2c 	bl	8001020 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80015c8:	f7ff fade 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fb2e 	bl	8000c34 <NVIC_EncodePriority>
 80015d8:	4603      	mov	r3, r0
 80015da:	4619      	mov	r1, r3
 80015dc:	2019      	movs	r0, #25
 80015de:	f7ff faff 	bl	8000be0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015e2:	2019      	movs	r0, #25
 80015e4:	f7ff fade 	bl	8000ba4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 80015e8:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80015ec:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 499;
 80015f2:	f240 13f3 	movw	r3, #499	; 0x1f3
 80015f6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <MX_TIM16_Init+0x6c>)
 8001606:	f002 fa13 	bl	8003a30 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <MX_TIM16_Init+0x6c>)
 800160c:	f7ff fd70 	bl	80010f0 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40014400 	.word	0x40014400

0800161c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM17);
 8001630:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001634:	f7ff fcf4 	bl	8001020 <LL_APB2_GRP1_EnableClock>

  /* TIM17 interrupt Init */
  NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001638:	f7ff faa6 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 800163c:	4603      	mov	r3, r0
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff faf6 	bl	8000c34 <NVIC_EncodePriority>
 8001648:	4603      	mov	r3, r0
 800164a:	4619      	mov	r1, r3
 800164c:	201a      	movs	r0, #26
 800164e:	f7ff fac7 	bl	8000be0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001652:	201a      	movs	r0, #26
 8001654:	f7ff faa6 	bl	8000ba4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 7999;
 8001660:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8001664:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_TIM17_Init+0x6c>)
 8001674:	f002 f9dc 	bl	8003a30 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM17);
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <MX_TIM17_Init+0x6c>)
 800167a:	f7ff fd39 	bl	80010f0 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40014800 	.word	0x40014800

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80016ae:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80016b2:	f7ff fc85 	bl	8000fc0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80016ba:	f7ff fc81 	bl	8000fc0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80016be:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80016c2:	f7ff fc7d 	bl	8000fc0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, seg_B_pa_Pin|seg_A_pa_Pin|dig_3_pa_Pin|seg_F_pa_Pin
 80016c6:	f641 119f 	movw	r1, #6559	; 0x199f
 80016ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ce:	f7ff fd8d 	bl	80011ec <LL_GPIO_ResetOutputPin>
                          |dig_1_pa_Pin|dig_time_pa_Pin|seg_C_pa_Pin|seg_E_pa_Pin
                          |dig_2_pa_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, dig_0_pb_Pin|seg_DP_pb_Pin|seg_G_pb_Pin|seg_D_pb_Pin);
 80016d2:	2133      	movs	r1, #51	; 0x33
 80016d4:	4835      	ldr	r0, [pc, #212]	; (80017ac <MX_GPIO_Init+0x120>)
 80016d6:	f7ff fd89 	bl	80011ec <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = seg_B_pa_Pin|seg_A_pa_Pin|dig_3_pa_Pin|seg_F_pa_Pin
 80016da:	f641 139f 	movw	r3, #6559	; 0x199f
 80016de:	607b      	str	r3, [r7, #4]
                          |dig_1_pa_Pin|dig_time_pa_Pin|seg_C_pa_Pin|seg_E_pa_Pin
                          |dig_2_pa_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016e0:	2301      	movs	r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f8:	f002 f811 	bl	800371e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = dig_0_pb_Pin|seg_DP_pb_Pin|seg_G_pb_Pin|seg_D_pb_Pin;
 80016fc:	2333      	movs	r3, #51	; 0x33
 80016fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001700:	2301      	movs	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4825      	ldr	r0, [pc, #148]	; (80017ac <MX_GPIO_Init+0x120>)
 8001716:	f002 f802 	bl	800371e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800171a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800171e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001720:	2302      	movs	r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001730:	2307      	movs	r3, #7
 8001732:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f001 ffef 	bl	800371e <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001740:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff fc83 	bl	8001050 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(push_button_irq3_GPIO_Port, push_button_irq3_Pin, LL_GPIO_PULL_DOWN);
 800174a:	2202      	movs	r2, #2
 800174c:	2108      	movs	r1, #8
 800174e:	4817      	ldr	r0, [pc, #92]	; (80017ac <MX_GPIO_Init+0x120>)
 8001750:	f7ff fd1d 	bl	800118e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(push_button_irq3_GPIO_Port, push_button_irq3_Pin, LL_GPIO_MODE_INPUT);
 8001754:	2200      	movs	r2, #0
 8001756:	2108      	movs	r1, #8
 8001758:	4814      	ldr	r0, [pc, #80]	; (80017ac <MX_GPIO_Init+0x120>)
 800175a:	f7ff fce9 	bl	8001130 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800175e:	2308      	movs	r3, #8
 8001760:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800176c:	2300      	movs	r3, #0
 800176e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001772:	2301      	movs	r3, #1
 8001774:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fde1 	bl	8003344 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001782:	f7ff fa01 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8001786:	4603      	mov	r3, r0
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fa51 	bl	8000c34 <NVIC_EncodePriority>
 8001792:	4603      	mov	r3, r0
 8001794:	4619      	mov	r1, r3
 8001796:	2009      	movs	r0, #9
 8001798:	f7ff fa22 	bl	8000be0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 800179c:	2009      	movs	r0, #9
 800179e:	f7ff fa01 	bl	8000ba4 <__NVIC_EnableIRQ>

}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	48000400 	.word	0x48000400

080017b0 <push_button_pushed_fcn>:

/* USER CODE BEGIN 4 */
void push_button_pushed_fcn(void){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

	what_to_measure++;
 80017b4:	4b5f      	ldr	r3, [pc, #380]	; (8001934 <push_button_pushed_fcn+0x184>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b5d      	ldr	r3, [pc, #372]	; (8001934 <push_button_pushed_fcn+0x184>)
 80017be:	701a      	strb	r2, [r3, #0]
	if(what_to_measure >= 5){
 80017c0:	4b5c      	ldr	r3, [pc, #368]	; (8001934 <push_button_pushed_fcn+0x184>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d902      	bls.n	80017ce <push_button_pushed_fcn+0x1e>
		what_to_measure=0;
 80017c8:	4b5a      	ldr	r3, [pc, #360]	; (8001934 <push_button_pushed_fcn+0x184>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
	}
	offset=0;active_display_digit=0;
 80017ce:	4b5a      	ldr	r3, [pc, #360]	; (8001938 <push_button_pushed_fcn+0x188>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	801a      	strh	r2, [r3, #0]
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <push_button_pushed_fcn+0x18c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
	mode |= up_or_down;
 80017da:	4b59      	ldr	r3, [pc, #356]	; (8001940 <push_button_pushed_fcn+0x190>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b56      	ldr	r3, [pc, #344]	; (8001940 <push_button_pushed_fcn+0x190>)
 80017e6:	701a      	strb	r2, [r3, #0]
	switch(what_to_measure){
 80017e8:	4b52      	ldr	r3, [pc, #328]	; (8001934 <push_button_pushed_fcn+0x184>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	f200 809f 	bhi.w	8001930 <push_button_pushed_fcn+0x180>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <push_button_pushed_fcn+0x48>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	0800180d 	.word	0x0800180d
 80017fc:	08001845 	.word	0x08001845
 8001800:	0800187d 	.word	0x0800187d
 8001804:	080018b5 	.word	0x080018b5
 8001808:	080018ed 	.word	0x080018ed
	case 0:{
		//azymut [deg]: "MAG_xx.x"
		my_str_cpy((uint8_t *) "MAG_000.0\0", str, &size_buff, max_buff_size);
 800180c:	2340      	movs	r3, #64	; 0x40
 800180e:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <push_button_pushed_fcn+0x194>)
 8001810:	494d      	ldr	r1, [pc, #308]	; (8001948 <push_button_pushed_fcn+0x198>)
 8001812:	484e      	ldr	r0, [pc, #312]	; (800194c <push_button_pushed_fcn+0x19c>)
 8001814:	f000 fe1a 	bl	800244c <my_str_cpy>
		convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);
 8001818:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <push_button_pushed_fcn+0x194>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	4a4c      	ldr	r2, [pc, #304]	; (8001950 <push_button_pushed_fcn+0x1a0>)
 800181e:	494d      	ldr	r1, [pc, #308]	; (8001954 <push_button_pushed_fcn+0x1a4>)
 8001820:	4849      	ldr	r0, [pc, #292]	; (8001948 <push_button_pushed_fcn+0x198>)
 8001822:	f001 f9a5 	bl	8002b70 <convert_str_to_7seg>
		// to do: convert num 2 str to xx.x
		lis3mdl_get_azymuth(with_avg);
 8001826:	20ff      	movs	r0, #255	; 0xff
 8001828:	f000 fb3a 	bl	8001ea0 <lis3mdl_get_azymuth>
		// float to char
		float_to_char(azymuth,str,4, 3,1);
 800182c:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <push_button_pushed_fcn+0x1a8>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	2301      	movs	r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	2104      	movs	r1, #4
 8001838:	4843      	ldr	r0, [pc, #268]	; (8001948 <push_button_pushed_fcn+0x198>)
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	f000 f8cd 	bl	80019dc <float_to_char>
		break;}
 8001842:	e075      	b.n	8001930 <push_button_pushed_fcn+0x180>
	case 1:{
		//teplota [°C]: "TEMP_xx.x"
		my_str_cpy((uint8_t *) "tEMP_00.0\0", str, &size_buff, max_buff_size);
 8001844:	2340      	movs	r3, #64	; 0x40
 8001846:	4a3f      	ldr	r2, [pc, #252]	; (8001944 <push_button_pushed_fcn+0x194>)
 8001848:	493f      	ldr	r1, [pc, #252]	; (8001948 <push_button_pushed_fcn+0x198>)
 800184a:	4844      	ldr	r0, [pc, #272]	; (800195c <push_button_pushed_fcn+0x1ac>)
 800184c:	f000 fdfe 	bl	800244c <my_str_cpy>
		convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);
 8001850:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <push_button_pushed_fcn+0x194>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	4a3e      	ldr	r2, [pc, #248]	; (8001950 <push_button_pushed_fcn+0x1a0>)
 8001856:	493f      	ldr	r1, [pc, #252]	; (8001954 <push_button_pushed_fcn+0x1a4>)
 8001858:	483b      	ldr	r0, [pc, #236]	; (8001948 <push_button_pushed_fcn+0x198>)
 800185a:	f001 f989 	bl	8002b70 <convert_str_to_7seg>
		// to do: convert num 2 str to xx.x
		hts221_get_temp(with_avg);
 800185e:	20ff      	movs	r0, #255	; 0xff
 8001860:	f000 f994 	bl	8001b8c <hts221_get_temp>
		// float to char
		float_to_char(temperature,str,5, 2,1);
 8001864:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <push_button_pushed_fcn+0x1b0>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	2301      	movs	r3, #1
 800186c:	2202      	movs	r2, #2
 800186e:	2105      	movs	r1, #5
 8001870:	4835      	ldr	r0, [pc, #212]	; (8001948 <push_button_pushed_fcn+0x198>)
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	f000 f8b1 	bl	80019dc <float_to_char>
		break;}
 800187a:	e059      	b.n	8001930 <push_button_pushed_fcn+0x180>
	case 2:{
		//rel. vlhkosť [%]: "HUM_xx"
		my_str_cpy((uint8_t *) "HUM_00\0", str, &size_buff, max_buff_size);
 800187c:	2340      	movs	r3, #64	; 0x40
 800187e:	4a31      	ldr	r2, [pc, #196]	; (8001944 <push_button_pushed_fcn+0x194>)
 8001880:	4931      	ldr	r1, [pc, #196]	; (8001948 <push_button_pushed_fcn+0x198>)
 8001882:	4838      	ldr	r0, [pc, #224]	; (8001964 <push_button_pushed_fcn+0x1b4>)
 8001884:	f000 fde2 	bl	800244c <my_str_cpy>
		convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);
 8001888:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <push_button_pushed_fcn+0x194>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	4a30      	ldr	r2, [pc, #192]	; (8001950 <push_button_pushed_fcn+0x1a0>)
 800188e:	4931      	ldr	r1, [pc, #196]	; (8001954 <push_button_pushed_fcn+0x1a4>)
 8001890:	482d      	ldr	r0, [pc, #180]	; (8001948 <push_button_pushed_fcn+0x198>)
 8001892:	f001 f96d 	bl	8002b70 <convert_str_to_7seg>
		// to do: convert num 2 str to xx.x
		hts221_get_hum(with_avg);
 8001896:	20ff      	movs	r0, #255	; 0xff
 8001898:	f000 fa06 	bl	8001ca8 <hts221_get_hum>
		// float to char
		float_to_char(humidity,str,4, 2,0);
 800189c:	4b32      	ldr	r3, [pc, #200]	; (8001968 <push_button_pushed_fcn+0x1b8>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	2300      	movs	r3, #0
 80018a4:	2202      	movs	r2, #2
 80018a6:	2104      	movs	r1, #4
 80018a8:	4827      	ldr	r0, [pc, #156]	; (8001948 <push_button_pushed_fcn+0x198>)
 80018aa:	eeb0 0a67 	vmov.f32	s0, s15
 80018ae:	f000 f895 	bl	80019dc <float_to_char>
		break;}
 80018b2:	e03d      	b.n	8001930 <push_button_pushed_fcn+0x180>
	case 3:{
		//tlak vzduchu [hPa]: "BAR_xxxx.xx"
		my_str_cpy((uint8_t *) "bAr_0000.00\0", str, &size_buff, max_buff_size);
 80018b4:	2340      	movs	r3, #64	; 0x40
 80018b6:	4a23      	ldr	r2, [pc, #140]	; (8001944 <push_button_pushed_fcn+0x194>)
 80018b8:	4923      	ldr	r1, [pc, #140]	; (8001948 <push_button_pushed_fcn+0x198>)
 80018ba:	482c      	ldr	r0, [pc, #176]	; (800196c <push_button_pushed_fcn+0x1bc>)
 80018bc:	f000 fdc6 	bl	800244c <my_str_cpy>
		convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <push_button_pushed_fcn+0x194>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	4a22      	ldr	r2, [pc, #136]	; (8001950 <push_button_pushed_fcn+0x1a0>)
 80018c6:	4923      	ldr	r1, [pc, #140]	; (8001954 <push_button_pushed_fcn+0x1a4>)
 80018c8:	481f      	ldr	r0, [pc, #124]	; (8001948 <push_button_pushed_fcn+0x198>)
 80018ca:	f001 f951 	bl	8002b70 <convert_str_to_7seg>
		// to do: convert num 2 str to xx.x
		lps25hb_get_pressure(with_avg);
 80018ce:	20ff      	movs	r0, #255	; 0xff
 80018d0:	f000 fa88 	bl	8001de4 <lps25hb_get_pressure>
		// float to char
		float_to_char(pressure,str,4, 4,2);
 80018d4:	4b26      	ldr	r3, [pc, #152]	; (8001970 <push_button_pushed_fcn+0x1c0>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	2302      	movs	r3, #2
 80018dc:	2204      	movs	r2, #4
 80018de:	2104      	movs	r1, #4
 80018e0:	4819      	ldr	r0, [pc, #100]	; (8001948 <push_button_pushed_fcn+0x198>)
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	f000 f879 	bl	80019dc <float_to_char>
		break;}
 80018ea:	e021      	b.n	8001930 <push_button_pushed_fcn+0x180>
	case 4:{
		//nadmorská výška [m]: "ALT_xxxx.x"
		my_str_cpy((uint8_t *) "ALt_0000.0\0", str, &size_buff, max_buff_size);
 80018ec:	2340      	movs	r3, #64	; 0x40
 80018ee:	4a15      	ldr	r2, [pc, #84]	; (8001944 <push_button_pushed_fcn+0x194>)
 80018f0:	4915      	ldr	r1, [pc, #84]	; (8001948 <push_button_pushed_fcn+0x198>)
 80018f2:	4820      	ldr	r0, [pc, #128]	; (8001974 <push_button_pushed_fcn+0x1c4>)
 80018f4:	f000 fdaa 	bl	800244c <my_str_cpy>
		convert_str_to_7seg(str, display_buffer_pa,display_buffer_pb,size_buff);
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <push_button_pushed_fcn+0x194>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <push_button_pushed_fcn+0x1a0>)
 80018fe:	4915      	ldr	r1, [pc, #84]	; (8001954 <push_button_pushed_fcn+0x1a4>)
 8001900:	4811      	ldr	r0, [pc, #68]	; (8001948 <push_button_pushed_fcn+0x198>)
 8001902:	f001 f935 	bl	8002b70 <convert_str_to_7seg>
		// to do: convert num 2 str to xx.x
		lps25hb_get_pressure(with_avg);
 8001906:	20ff      	movs	r0, #255	; 0xff
 8001908:	f000 fa6c 	bl	8001de4 <lps25hb_get_pressure>
		hts221_get_temp(with_avg);
 800190c:	20ff      	movs	r0, #255	; 0xff
 800190e:	f000 f93d 	bl	8001b8c <hts221_get_temp>
		calculate_altitude(with_avg);
 8001912:	20ff      	movs	r0, #255	; 0xff
 8001914:	f001 f968 	bl	8002be8 <calculate_altitude>
		// float to char
		float_to_char(altitude,str,4, 4,1);
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <push_button_pushed_fcn+0x1c8>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	2301      	movs	r3, #1
 8001920:	2204      	movs	r2, #4
 8001922:	2104      	movs	r1, #4
 8001924:	4808      	ldr	r0, [pc, #32]	; (8001948 <push_button_pushed_fcn+0x198>)
 8001926:	eeb0 0a67 	vmov.f32	s0, s15
 800192a:	f000 f857 	bl	80019dc <float_to_char>
		break;}
 800192e:	bf00      	nop
	}

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000000 	.word	0x20000000
 8001938:	20000090 	.word	0x20000090
 800193c:	2000008d 	.word	0x2000008d
 8001940:	2000008c 	.word	0x2000008c
 8001944:	2000008e 	.word	0x2000008e
 8001948:	200001c8 	.word	0x200001c8
 800194c:	080050b8 	.word	0x080050b8
 8001950:	200000c4 	.word	0x200000c4
 8001954:	20000144 	.word	0x20000144
 8001958:	200000b0 	.word	0x200000b0
 800195c:	080050c4 	.word	0x080050c4
 8001960:	20000094 	.word	0x20000094
 8001964:	080050d0 	.word	0x080050d0
 8001968:	20000098 	.word	0x20000098
 800196c:	080050d8 	.word	0x080050d8
 8001970:	2000009c 	.word	0x2000009c
 8001974:	080050e8 	.word	0x080050e8
 8001978:	200000a0 	.word	0x200000a0

0800197c <while_loop_converse>:
void while_loop_converse(uint8_t * result,uint32_t *number, uint32_t *mask){
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
	while(*number>*mask){
 8001988:	e00c      	b.n	80019a4 <while_loop_converse+0x28>
		*result +=1;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	b2da      	uxtb	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	701a      	strb	r2, [r3, #0]
		*number -= *mask;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1ad2      	subs	r2, r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	601a      	str	r2, [r3, #0]
	while(*number>*mask){
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8ec      	bhi.n	800198a <while_loop_converse+0xe>
	}
	*mask /=10;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <while_loop_converse+0x5c>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	601a      	str	r2, [r3, #0]
	*result +='0';
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3330      	adds	r3, #48	; 0x30
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	701a      	strb	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	cccccccd 	.word	0xcccccccd

080019dc <float_to_char>:

void float_to_char(float num,uint8_t *ptr,uint8_t pos, uint8_t num_of_decimals_before_DP,uint8_t num_of_decimals_after_DP){
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b08b      	sub	sp, #44	; 0x2c
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80019e6:	60b8      	str	r0, [r7, #8]
 80019e8:	4608      	mov	r0, r1
 80019ea:	4611      	mov	r1, r2
 80019ec:	461a      	mov	r2, r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	460b      	mov	r3, r1
 80019f4:	71bb      	strb	r3, [r7, #6]
 80019f6:	4613      	mov	r3, r2
 80019f8:	717b      	strb	r3, [r7, #5]
	uint8_t cnt,temp_2=1;uint32_t num_to_converse,mask=1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	76fb      	strb	r3, [r7, #27]
 80019fe:	2301      	movs	r3, #1
 8001a00:	613b      	str	r3, [r7, #16]
	uint16_t *p_pa,*p_pb;

	//return;

	for(cnt=0;cnt<num_of_decimals_after_DP;cnt++){
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a08:	e011      	b.n	8001a2e <float_to_char+0x52>
		temp_2*=10;
 8001a0a:	7efb      	ldrb	r3, [r7, #27]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	76fb      	strb	r3, [r7, #27]
		mask*=10;
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
	for(cnt=0;cnt<num_of_decimals_after_DP;cnt++){
 8001a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001a32:	797b      	ldrb	r3, [r7, #5]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3e8      	bcc.n	8001a0a <float_to_char+0x2e>
	}
	num=round(num*((float)temp_2));
 8001a38:	7efb      	ldrb	r3, [r7, #27]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4a:	ee17 0a90 	vmov	r0, s15
 8001a4e:	f7fe fd1f 	bl	8000490 <__aeabi_f2d>
 8001a52:	4603      	mov	r3, r0
 8001a54:	460c      	mov	r4, r1
 8001a56:	ec44 3b10 	vmov	d0, r3, r4
 8001a5a:	f002 fa8b 	bl	8003f74 <round>
 8001a5e:	ec54 3b10 	vmov	r3, r4, d0
 8001a62:	4618      	mov	r0, r3
 8001a64:	4621      	mov	r1, r4
 8001a66:	f7ff f81b 	bl	8000aa0 <__aeabi_d2f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60fb      	str	r3, [r7, #12]
	num_to_converse=(uint32_t) num;
 8001a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a76:	ee17 3a90 	vmov	r3, s15
 8001a7a:	617b      	str	r3, [r7, #20]
	for(cnt=0;cnt<num_of_decimals_before_DP-1;cnt++){
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a82:	e00a      	b.n	8001a9a <float_to_char+0xbe>
		mask*=10;
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	613b      	str	r3, [r7, #16]
	for(cnt=0;cnt<num_of_decimals_before_DP-1;cnt++){
 8001a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a94:	3301      	adds	r3, #1
 8001a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001a9e:	79bb      	ldrb	r3, [r7, #6]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dbee      	blt.n	8001a84 <float_to_char+0xa8>
	}

	p_pa=&display_buffer_pa[pos];
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4a36      	ldr	r2, [pc, #216]	; (8001b84 <float_to_char+0x1a8>)
 8001aac:	4413      	add	r3, r2
 8001aae:	623b      	str	r3, [r7, #32]
	p_pb=&display_buffer_pb[pos];
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4a34      	ldr	r2, [pc, #208]	; (8001b88 <float_to_char+0x1ac>)
 8001ab6:	4413      	add	r3, r2
 8001ab8:	61fb      	str	r3, [r7, #28]
	for(cnt=0;cnt<num_of_decimals_before_DP;cnt++){
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ac0:	e01b      	b.n	8001afa <float_to_char+0x11e>
		temp_2=0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	76fb      	strb	r3, [r7, #27]
		while_loop_converse(&temp_2,&num_to_converse,&mask);
 8001ac6:	f107 0210 	add.w	r2, r7, #16
 8001aca:	f107 0114 	add.w	r1, r7, #20
 8001ace:	f107 031b 	add.w	r3, r7, #27
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff52 	bl	800197c <while_loop_converse>
		convert_char_to_7seg(temp_2,p_pa,p_pb);
 8001ad8:	7efb      	ldrb	r3, [r7, #27]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	6a39      	ldr	r1, [r7, #32]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fcde 	bl	80024a0 <convert_char_to_7seg>
		p_pa+=1;p_pb+=1;
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	623b      	str	r3, [r7, #32]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3302      	adds	r3, #2
 8001aee:	61fb      	str	r3, [r7, #28]
	for(cnt=0;cnt<num_of_decimals_before_DP;cnt++){
 8001af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001af4:	3301      	adds	r3, #1
 8001af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001afa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001afe:	79bb      	ldrb	r3, [r7, #6]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d3de      	bcc.n	8001ac2 <float_to_char+0xe6>
	}
	if (num_of_decimals_after_DP > 0)
 8001b04:	797b      	ldrb	r3, [r7, #5]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d012      	beq.n	8001b30 <float_to_char+0x154>
		{p_pa-=1;p_pb-=1;
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	3b02      	subs	r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	3b02      	subs	r3, #2
 8001b14:	61fb      	str	r3, [r7, #28]
		*p_pb &= ~(seg_DP_pb_Pin );
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	f023 0302 	bic.w	r3, r3, #2
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	801a      	strh	r2, [r3, #0]
		p_pa+=1;p_pb+=1;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	3302      	adds	r3, #2
 8001b28:	623b      	str	r3, [r7, #32]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	61fb      	str	r3, [r7, #28]
		//convert_char_to_7seg('.',p_pa,p_pb);
		//size_buff--;
		}
	for (cnt=0;cnt<num_of_decimals_after_DP;cnt++){
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b36:	e01b      	b.n	8001b70 <float_to_char+0x194>
		temp_2=0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	76fb      	strb	r3, [r7, #27]
		while_loop_converse(&temp_2,&num_to_converse,&mask);
 8001b3c:	f107 0210 	add.w	r2, r7, #16
 8001b40:	f107 0114 	add.w	r1, r7, #20
 8001b44:	f107 031b 	add.w	r3, r7, #27
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff17 	bl	800197c <while_loop_converse>
		convert_char_to_7seg(temp_2,p_pa,p_pb);
 8001b4e:	7efb      	ldrb	r3, [r7, #27]
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	6a39      	ldr	r1, [r7, #32]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fca3 	bl	80024a0 <convert_char_to_7seg>
		p_pa+=1;p_pb+=1;
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	3302      	adds	r3, #2
 8001b64:	61fb      	str	r3, [r7, #28]
	for (cnt=0;cnt<num_of_decimals_after_DP;cnt++){
 8001b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001b74:	797b      	ldrb	r3, [r7, #5]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d3de      	bcc.n	8001b38 <float_to_char+0x15c>
	}
// to do .... complete
}
 8001b7a:	bf00      	nop
 8001b7c:	372c      	adds	r7, #44	; 0x2c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000144 	.word	0x20000144
 8001b88:	200000c4 	.word	0x200000c4

08001b8c <hts221_get_temp>:

int16_t hts221_get_temp(uint8_t avg_en){
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];int16_t raw;
	float temp;
	//hts221_readArray(data, hts221_ADDRESS_TEMP_L, 2);
	i2c_master_read(data, 2, hts221_ADDRESS_TEMP_L, hts221_DEVICE_ADDRESS_read, 1);
 8001b96:	f107 000c 	add.w	r0, r7, #12
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	23bf      	movs	r3, #191	; 0xbf
 8001ba0:	222a      	movs	r2, #42	; 0x2a
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	f000 fbd6 	bl	8002354 <i2c_master_read>
	raw= (int16_t)((uint16_t)data[0]+((uint16_t)data[1])*256);
 8001ba8:	7b3b      	ldrb	r3, [r7, #12]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	7b7b      	ldrb	r3, [r7, #13]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	82fb      	strh	r3, [r7, #22]

	if (raw>32767)
		raw-=65536;

	temp= ((H_T_uint16_t[3] - H_T_uint16_t[2]) / 8.0) * (raw - H_T_uint16_t[4]) / (H_T_uint16_t[5] - H_T_uint16_t[4]) + (H_T_uint16_t[2] / 8.0);
 8001bba:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <hts221_get_temp+0x110>)
 8001bbc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <hts221_get_temp+0x110>)
 8001bc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fc4e 	bl	800046c <__aeabi_i2d>
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <hts221_get_temp+0x114>)
 8001bd6:	f7fe fddd 	bl	8000794 <__aeabi_ddiv>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	4625      	mov	r5, r4
 8001be0:	461c      	mov	r4, r3
 8001be2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001be6:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <hts221_get_temp+0x110>)
 8001be8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc3c 	bl	800046c <__aeabi_i2d>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	f7fe fca0 	bl	8000540 <__aeabi_dmul>
 8001c00:	4603      	mov	r3, r0
 8001c02:	460c      	mov	r4, r1
 8001c04:	4625      	mov	r5, r4
 8001c06:	461c      	mov	r4, r3
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <hts221_get_temp+0x110>)
 8001c0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <hts221_get_temp+0x110>)
 8001c12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc27 	bl	800046c <__aeabi_i2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4620      	mov	r0, r4
 8001c24:	4629      	mov	r1, r5
 8001c26:	f7fe fdb5 	bl	8000794 <__aeabi_ddiv>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460c      	mov	r4, r1
 8001c2e:	4625      	mov	r5, r4
 8001c30:	461c      	mov	r4, r3
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <hts221_get_temp+0x110>)
 8001c34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc17 	bl	800046c <__aeabi_i2d>
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <hts221_get_temp+0x114>)
 8001c44:	f7fe fda6 	bl	8000794 <__aeabi_ddiv>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fac0 	bl	80001d4 <__adddf3>
 8001c54:	4603      	mov	r3, r0
 8001c56:	460c      	mov	r4, r1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	f7fe ff20 	bl	8000aa0 <__aeabi_d2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	613b      	str	r3, [r7, #16]
	//temperature= ((T1 - T0) / 8.0) * (raw - T2) / (T3 - T2) + (T0 / 8.0);
	if(avg_en){
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00e      	beq.n	8001c88 <hts221_get_temp+0xfc>
		temperature=(temperature+temp)/2.0;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <hts221_get_temp+0x118>)
 8001c6c:	ed93 7a00 	vldr	s14, [r3]
 8001c70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <hts221_get_temp+0x118>)
 8001c82:	edc3 7a00 	vstr	s15, [r3]
 8001c86:	e002      	b.n	8001c8e <hts221_get_temp+0x102>
	}else{
		temperature=temp;
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <hts221_get_temp+0x118>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	6013      	str	r3, [r2, #0]
	}
	return(raw);
 8001c8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200000b8 	.word	0x200000b8
 8001ca0:	40200000 	.word	0x40200000
 8001ca4:	20000094 	.word	0x20000094

08001ca8 <hts221_get_hum>:

int16_t hts221_get_hum(uint8_t avg_en){
 8001ca8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cac:	b088      	sub	sp, #32
 8001cae:	af02      	add	r7, sp, #8
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];int16_t raw;
	float temp;
	//hts221_readArray(data, hts221_ADDRESS_HUM_L, 2);
	i2c_master_read(data, 2,  hts221_ADDRESS_HUM_L, hts221_DEVICE_ADDRESS_read, 1);
 8001cb4:	f107 000c 	add.w	r0, r7, #12
 8001cb8:	2301      	movs	r3, #1
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	23bf      	movs	r3, #191	; 0xbf
 8001cbe:	2228      	movs	r2, #40	; 0x28
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	f000 fb47 	bl	8002354 <i2c_master_read>
	raw= (int16_t)((uint16_t)data[0]+((uint16_t)data[1])*256);
 8001cc6:	7b3b      	ldrb	r3, [r7, #12]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	7b7b      	ldrb	r3, [r7, #13]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	82fb      	strh	r3, [r7, #22]

	//humidity=       ((1.0 * H1) - (1.0 * H0        )) * (1.0 * raw - 1.0 * H2             ) / (1.0 * H3 - 1.0 * H2             ) + (1.0 * H0        );
	temp=       ((1.0 * H_uint8[1]) - (1.0 * H_uint8[0]        )) * (1.0 * raw - 1.0 * H_T_uint16_t[0]             ) / (1.0 * H_T_uint16_t[1] - 1.0 * H_T_uint16_t[0]             ) + (1.0 * H_uint8[0]        );
 8001cd8:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <hts221_get_hum+0x130>)
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fbc5 	bl	800046c <__aeabi_i2d>
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	460d      	mov	r5, r1
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <hts221_get_hum+0x130>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fbbe 	bl	800046c <__aeabi_i2d>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe fa6a 	bl	80001d0 <__aeabi_dsub>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	460c      	mov	r4, r1
 8001d00:	4625      	mov	r5, r4
 8001d02:	461c      	mov	r4, r3
 8001d04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fbaf 	bl	800046c <__aeabi_i2d>
 8001d0e:	4680      	mov	r8, r0
 8001d10:	4689      	mov	r9, r1
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <hts221_get_hum+0x134>)
 8001d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fba7 	bl	800046c <__aeabi_i2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4640      	mov	r0, r8
 8001d24:	4649      	mov	r1, r9
 8001d26:	f7fe fa53 	bl	80001d0 <__aeabi_dsub>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4629      	mov	r1, r5
 8001d32:	f7fe fc05 	bl	8000540 <__aeabi_dmul>
 8001d36:	4603      	mov	r3, r0
 8001d38:	460c      	mov	r4, r1
 8001d3a:	4625      	mov	r5, r4
 8001d3c:	461c      	mov	r4, r3
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <hts221_get_hum+0x134>)
 8001d40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fb91 	bl	800046c <__aeabi_i2d>
 8001d4a:	4680      	mov	r8, r0
 8001d4c:	4689      	mov	r9, r1
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <hts221_get_hum+0x134>)
 8001d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fb89 	bl	800046c <__aeabi_i2d>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4640      	mov	r0, r8
 8001d60:	4649      	mov	r1, r9
 8001d62:	f7fe fa35 	bl	80001d0 <__aeabi_dsub>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	f7fe fd11 	bl	8000794 <__aeabi_ddiv>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	4625      	mov	r5, r4
 8001d78:	461c      	mov	r4, r3
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <hts221_get_hum+0x130>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fb74 	bl	800046c <__aeabi_i2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fa22 	bl	80001d4 <__adddf3>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	4618      	mov	r0, r3
 8001d96:	4621      	mov	r1, r4
 8001d98:	f7fe fe82 	bl	8000aa0 <__aeabi_d2f>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	613b      	str	r3, [r7, #16]
	if (avg_en){
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00e      	beq.n	8001dc4 <hts221_get_hum+0x11c>
		humidity=(temp+humidity)/2.0;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <hts221_get_hum+0x138>)
 8001da8:	ed93 7a00 	vldr	s14, [r3]
 8001dac:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001db8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <hts221_get_hum+0x138>)
 8001dbe:	edc3 7a00 	vstr	s15, [r3]
 8001dc2:	e002      	b.n	8001dca <hts221_get_hum+0x122>
	}else{
		humidity=temp;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <hts221_get_hum+0x138>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6013      	str	r3, [r2, #0]
	}
	return(raw);
 8001dca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dd8:	200001c4 	.word	0x200001c4
 8001ddc:	200000b8 	.word	0x200000b8
 8001de0:	20000098 	.word	0x20000098

08001de4 <lps25hb_get_pressure>:

int32_t lps25hb_get_pressure(uint8_t avg_en){
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
	uint8_t data[3];int32_t ret_val;
	//lps25hb_readArray(&data[0], lps25hb_ADDRESS_pres_L, 3);
	i2c_master_read(&data[0], 3, lps25hb_ADDRESS_pres_L, lps25hb_DEVICE_ADDRESS_read, 1);
 8001dee:	f107 0008 	add.w	r0, r7, #8
 8001df2:	2301      	movs	r3, #1
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	23bb      	movs	r3, #187	; 0xbb
 8001df8:	2228      	movs	r2, #40	; 0x28
 8001dfa:	2103      	movs	r1, #3
 8001dfc:	f000 faaa 	bl	8002354 <i2c_master_read>
	ret_val=(int32_t)((uint32_t)(data[0]&0xff)+((uint32_t)(data[1]&0xff))*256+((uint32_t)(data[2]&0xff))*256*256);
 8001e00:	7a3b      	ldrb	r3, [r7, #8]
 8001e02:	461a      	mov	r2, r3
 8001e04:	7abb      	ldrb	r3, [r7, #10]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	7a79      	ldrb	r1, [r7, #9]
 8001e0a:	440b      	add	r3, r1
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
	//pressure=(pressure+ret_val/(4096.0*1.0))/2.0;
	if (avg_en){
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d028      	beq.n	8001e6a <lps25hb_get_pressure+0x86>
		pressure=(pressure+ret_val/4096.0)/2.0;
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <lps25hb_get_pressure+0xb4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb37 	bl	8000490 <__aeabi_f2d>
 8001e22:	4604      	mov	r4, r0
 8001e24:	460d      	mov	r5, r1
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7fe fb20 	bl	800046c <__aeabi_i2d>
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <lps25hb_get_pressure+0xb8>)
 8001e32:	f7fe fcaf 	bl	8000794 <__aeabi_ddiv>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	f7fe f9c9 	bl	80001d4 <__adddf3>
 8001e42:	4603      	mov	r3, r0
 8001e44:	460c      	mov	r4, r1
 8001e46:	4618      	mov	r0, r3
 8001e48:	4621      	mov	r1, r4
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e52:	f7fe fc9f 	bl	8000794 <__aeabi_ddiv>
 8001e56:	4603      	mov	r3, r0
 8001e58:	460c      	mov	r4, r1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	f7fe fe1f 	bl	8000aa0 <__aeabi_d2f>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <lps25hb_get_pressure+0xb4>)
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	e010      	b.n	8001e8c <lps25hb_get_pressure+0xa8>
	}
	else{
		pressure=ret_val/4096.0;
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7fe fafe 	bl	800046c <__aeabi_i2d>
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <lps25hb_get_pressure+0xb8>)
 8001e76:	f7fe fc8d 	bl	8000794 <__aeabi_ddiv>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	460c      	mov	r4, r1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	4621      	mov	r1, r4
 8001e82:	f7fe fe0d 	bl	8000aa0 <__aeabi_d2f>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <lps25hb_get_pressure+0xb4>)
 8001e8a:	601a      	str	r2, [r3, #0]
	}

	return(ret_val);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bdb0      	pop	{r4, r5, r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000009c 	.word	0x2000009c
 8001e9c:	40b00000 	.word	0x40b00000

08001ea0 <lis3mdl_get_azymuth>:

void lis3mdl_get_azymuth(uint8_t avg_en){
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
	//uint8_t data[4];int16_t x,y;float X,Y,temp;
	uint8_t data[4];int16_t x,y;float temp;
	i2c_master_read(data, 4, lis3mdl_ADDRESS_X, lis3mdl_DEVICE_ADDRESS_read, 1);
 8001eaa:	f107 000c 	add.w	r0, r7, #12
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	233d      	movs	r3, #61	; 0x3d
 8001eb4:	2228      	movs	r2, #40	; 0x28
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	f000 fa4c 	bl	8002354 <i2c_master_read>

	x=(int16_t)((uint16_t)data[0]+((uint16_t)data[1])*256);
 8001ebc:	7b3b      	ldrb	r3, [r7, #12]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	827b      	strh	r3, [r7, #18]
	y=(int16_t)((uint16_t)data[2]+((uint16_t)data[3])*256);
 8001ece:	7bbb      	ldrb	r3, [r7, #14]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	823b      	strh	r3, [r7, #16]

	//X=x*azymuth_gain;
	//Y=y*azymuth_gain;

	//temp=atan2(Y,X)*180.0/M_PI;
	if (x!=0){
 8001ee0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d047      	beq.n	8001f78 <lis3mdl_get_azymuth+0xd8>
		temp=atan(((float)y*1.0f)/((float)x*1.0f))*(180/M_PI);
 8001ee8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001eec:	ee07 3a90 	vmov	s15, r3
 8001ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f04:	ee16 0a90 	vmov	r0, s13
 8001f08:	f7fe fac2 	bl	8000490 <__aeabi_f2d>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	460c      	mov	r4, r1
 8001f10:	ec44 3b10 	vmov	d0, r3, r4
 8001f14:	f001 fe84 	bl	8003c20 <atan>
 8001f18:	ec51 0b10 	vmov	r0, r1, d0
 8001f1c:	a341      	add	r3, pc, #260	; (adr r3, 8002024 <lis3mdl_get_azymuth+0x184>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe fb0d 	bl	8000540 <__aeabi_dmul>
 8001f26:	4603      	mov	r3, r0
 8001f28:	460c      	mov	r4, r1
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	f7fe fdb7 	bl	8000aa0 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	617b      	str	r3, [r7, #20]
		//temp=atan2(((float)y*1.0f),((float)x*1.0f))*(180/M_PI);
		if ((y>=0 ) && (x<0)) // second quadrant
 8001f36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <lis3mdl_get_azymuth+0xb6>
 8001f3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	da07      	bge.n	8001f56 <lis3mdl_get_azymuth+0xb6>
			temp+=180.0;
 8001f46:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f4a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002010 <lis3mdl_get_azymuth+0x170>
 8001f4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f52:	edc7 7a05 	vstr	s15, [r7, #20]
		if ((y<0 ) && (x<0))	// third quadrant
 8001f56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	da15      	bge.n	8001f8a <lis3mdl_get_azymuth+0xea>
 8001f5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	da11      	bge.n	8001f8a <lis3mdl_get_azymuth+0xea>
			temp-=180.0;
 8001f66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f6a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002010 <lis3mdl_get_azymuth+0x170>
 8001f6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f72:	edc7 7a05 	vstr	s15, [r7, #20]
 8001f76:	e008      	b.n	8001f8a <lis3mdl_get_azymuth+0xea>
	}else{
		if(y>0){
 8001f78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	dd02      	ble.n	8001f86 <lis3mdl_get_azymuth+0xe6>
			temp=90.0;
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <lis3mdl_get_azymuth+0x174>)
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	e001      	b.n	8001f8a <lis3mdl_get_azymuth+0xea>
		}else{
			temp=-90.0;
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <lis3mdl_get_azymuth+0x178>)
 8001f88:	617b      	str	r3, [r7, #20]
		}
	}
	if (temp>=0.0){
 8001f8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f96:	db12      	blt.n	8001fbe <lis3mdl_get_azymuth+0x11e>
		//positive
		while(temp>=360.0){
 8001f98:	e007      	b.n	8001faa <lis3mdl_get_azymuth+0x10a>
			temp-=360;
 8001f9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f9e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800201c <lis3mdl_get_azymuth+0x17c>
 8001fa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fa6:	edc7 7a05 	vstr	s15, [r7, #20]
		while(temp>=360.0){
 8001faa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fae:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800201c <lis3mdl_get_azymuth+0x17c>
 8001fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fba:	daee      	bge.n	8001f9a <lis3mdl_get_azymuth+0xfa>
 8001fbc:	e00f      	b.n	8001fde <lis3mdl_get_azymuth+0x13e>
			}
		}else{
		//negative
		while(temp<=0.0){
 8001fbe:	e007      	b.n	8001fd0 <lis3mdl_get_azymuth+0x130>
			temp+=360.0;
 8001fc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fc4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800201c <lis3mdl_get_azymuth+0x17c>
 8001fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fcc:	edc7 7a05 	vstr	s15, [r7, #20]
		while(temp<=0.0){
 8001fd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	d9f0      	bls.n	8001fc0 <lis3mdl_get_azymuth+0x120>
			}
		}

	if (avg_en){
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00e      	beq.n	8002002 <lis3mdl_get_azymuth+0x162>
		azymuth=(temp+azymuth)/2.0;
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <lis3mdl_get_azymuth+0x180>)
 8001fe6:	ed93 7a00 	vldr	s14, [r3]
 8001fea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <lis3mdl_get_azymuth+0x180>)
 8001ffc:	edc3 7a00 	vstr	s15, [r3]
	}else{
		azymuth=temp;}

}
 8002000:	e002      	b.n	8002008 <lis3mdl_get_azymuth+0x168>
		azymuth=temp;}
 8002002:	4a07      	ldr	r2, [pc, #28]	; (8002020 <lis3mdl_get_azymuth+0x180>)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}
 8002010:	43340000 	.word	0x43340000
 8002014:	42b40000 	.word	0x42b40000
 8002018:	c2b40000 	.word	0xc2b40000
 800201c:	43b40000 	.word	0x43b40000
 8002020:	200000b0 	.word	0x200000b0
 8002024:	1a63c1f8 	.word	0x1a63c1f8
 8002028:	404ca5dc 	.word	0x404ca5dc

0800202c <hts221_init>:
		i2c_master_write(ctrl1, LSM6DS0_ADDRESS_CTRL1, LSM6DS0_DEVICE_ADDRESS_write, 0);

		return status;
}

uint8_t hts221_init(void){//humidity
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af02      	add	r7, sp, #8
	uint8_t status = 0,data[6],val=0,cnt=0;
 8002032:	2300      	movs	r3, #0
 8002034:	73fb      	strb	r3, [r7, #15]
 8002036:	2300      	movs	r3, #0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	2300      	movs	r3, #0
 800203c:	73bb      	strb	r3, [r7, #14]
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 800203e:	2300      	movs	r3, #0
 8002040:	73bb      	strb	r3, [r7, #14]
 8002042:	e013      	b.n	800206c <hts221_init+0x40>
		LL_mDelay(100);
 8002044:	2064      	movs	r0, #100	; 0x64
 8002046:	f001 fd8d 	bl	8003b64 <LL_mDelay>
		//val = hts221_read_byte(WHO_AM_I_ADDRES);
		i2c_master_read(&val, 1, WHO_AM_I_ADDRES,hts221_DEVICE_ADDRESS_read , 0);
 800204a:	1df8      	adds	r0, r7, #7
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	23bf      	movs	r3, #191	; 0xbf
 8002052:	220f      	movs	r2, #15
 8002054:	2101      	movs	r1, #1
 8002056:	f000 f97d 	bl	8002354 <i2c_master_read>
		//if the device is not found on one address, try another one
		if(val == hts221_WHO_AM_I_VALUE){
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	2bbc      	cmp	r3, #188	; 0xbc
 800205e:	d102      	bne.n	8002066 <hts221_init+0x3a>
			status = 1;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
			break;
 8002064:	e005      	b.n	8002072 <hts221_init+0x46>
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 8002066:	7bbb      	ldrb	r3, [r7, #14]
 8002068:	3301      	adds	r3, #1
 800206a:	73bb      	strb	r3, [r7, #14]
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d9e8      	bls.n	8002044 <hts221_init+0x18>
			//if the device is founded on one address, try to inicialize
		}
	}
//#define hts221_av_conf				0x10 //1b
//#define hts221_crtl_reg_1 			0x20 //0x85
	val=0x1b;
 8002072:	231b      	movs	r3, #27
 8002074:	71fb      	strb	r3, [r7, #7]
	//hts221_write_byte(hts221_av_conf, val);
	i2c_master_write(val, hts221_av_conf,hts221_DEVICE_ADDRESS_write , 0);
 8002076:	79f8      	ldrb	r0, [r7, #7]
 8002078:	2300      	movs	r3, #0
 800207a:	22be      	movs	r2, #190	; 0xbe
 800207c:	2110      	movs	r1, #16
 800207e:	f000 f925 	bl	80022cc <i2c_master_write>
	val=0x85;
 8002082:	2385      	movs	r3, #133	; 0x85
 8002084:	71fb      	strb	r3, [r7, #7]
	//hts221_write_byte(hts221_crtl_reg_1, val);
	i2c_master_write(val, hts221_crtl_reg_1,hts221_DEVICE_ADDRESS_write , 0);
 8002086:	79f8      	ldrb	r0, [r7, #7]
 8002088:	2300      	movs	r3, #0
 800208a:	22be      	movs	r2, #190	; 0xbe
 800208c:	2120      	movs	r1, #32
 800208e:	f000 f91d 	bl	80022cc <i2c_master_write>
	LL_mDelay(100);
 8002092:	2064      	movs	r0, #100	; 0x64
 8002094:	f001 fd66 	bl	8003b64 <LL_mDelay>
// hts221 calibration register values
//uint8_t H0,H1;//0x30,0x31,0x32,0x33
//int16_t H2,H3,T0,T1,T2,T3;//[36-37:msb],[3a-3b:msb],[3c-3d:msb],[3e-3f:msb]

	//hts221_readArray(&data[0], 0x30, 4);
	i2c_master_read(data, 4, 0x30, hts221_DEVICE_ADDRESS_read, 1);
 8002098:	f107 0008 	add.w	r0, r7, #8
 800209c:	2301      	movs	r3, #1
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	23bf      	movs	r3, #191	; 0xbf
 80020a2:	2230      	movs	r2, #48	; 0x30
 80020a4:	2104      	movs	r1, #4
 80020a6:	f000 f955 	bl	8002354 <i2c_master_read>
	//H0=data[0]/2;	//30
	H_uint8[0]=data[0]/2;	//30
 80020aa:	7a3b      	ldrb	r3, [r7, #8]
 80020ac:	085b      	lsrs	r3, r3, #1
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b44      	ldr	r3, [pc, #272]	; (80021c4 <hts221_init+0x198>)
 80020b2:	701a      	strb	r2, [r3, #0]
	//H1=data[1]/2;	//31
	H_uint8[1]=data[1]/2;	//31
 80020b4:	7a7b      	ldrb	r3, [r7, #9]
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <hts221_init+0x198>)
 80020bc:	705a      	strb	r2, [r3, #1]

	//T0=data[2];	//32
	H_T_uint16_t[2]=data[2];	//32
 80020be:	7abb      	ldrb	r3, [r7, #10]
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <hts221_init+0x19c>)
 80020c4:	809a      	strh	r2, [r3, #4]
	//T1=data[3];	//33
	H_T_uint16_t[3]=data[3];	//33
 80020c6:	7afb      	ldrb	r3, [r7, #11]
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <hts221_init+0x19c>)
 80020cc:	80da      	strh	r2, [r3, #6]


	//hts221_readArray(&data[0], 0x36, 2);
	i2c_master_read(data, 2, 0x36, hts221_DEVICE_ADDRESS_read, 1);
 80020ce:	f107 0008 	add.w	r0, r7, #8
 80020d2:	2301      	movs	r3, #1
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	23bf      	movs	r3, #191	; 0xbf
 80020d8:	2236      	movs	r2, #54	; 0x36
 80020da:	2102      	movs	r1, #2
 80020dc:	f000 f93a 	bl	8002354 <i2c_master_read>
	H_T_uint16_t[0]=(int16_t)( (uint16_t)data[0]+((uint16_t)data[1])*256 );//[36-37]
 80020e0:	7a3b      	ldrb	r3, [r7, #8]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	7a7b      	ldrb	r3, [r7, #9]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <hts221_init+0x19c>)
 80020f4:	801a      	strh	r2, [r3, #0]
	//H2=(int16_t)( (uint16_t)data[0]+((uint16_t)data[1])*256 );//[36-37]

	//hts221_readArray(&data[0], 0x3a, 2);
	i2c_master_read(data, 2, 0x3a, hts221_DEVICE_ADDRESS_read, 1);
 80020f6:	f107 0008 	add.w	r0, r7, #8
 80020fa:	2301      	movs	r3, #1
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	23bf      	movs	r3, #191	; 0xbf
 8002100:	223a      	movs	r2, #58	; 0x3a
 8002102:	2102      	movs	r1, #2
 8002104:	f000 f926 	bl	8002354 <i2c_master_read>
	H_T_uint16_t[1]=(int16_t)( (uint16_t)data[0]+((uint16_t)data[1])*256 );//[3a-3b]
 8002108:	7a3b      	ldrb	r3, [r7, #8]
 800210a:	b29a      	uxth	r2, r3
 800210c:	7a7b      	ldrb	r3, [r7, #9]
 800210e:	b29b      	uxth	r3, r3
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	b29b      	uxth	r3, r3
 8002114:	4413      	add	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	b21a      	sxth	r2, r3
 800211a:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <hts221_init+0x19c>)
 800211c:	805a      	strh	r2, [r3, #2]
	//H3=(int16_t)( (uint16_t)data[0]+((uint16_t)data[1])*256 );//[3a-3b]

	//val=hts221_read_byte(0x35);
	i2c_master_read(&val, 1, 0x35,hts221_DEVICE_ADDRESS_read , 0);
 800211e:	1df8      	adds	r0, r7, #7
 8002120:	2300      	movs	r3, #0
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	23bf      	movs	r3, #191	; 0xbf
 8002126:	2235      	movs	r2, #53	; 0x35
 8002128:	2101      	movs	r1, #1
 800212a:	f000 f913 	bl	8002354 <i2c_master_read>
	H_T_uint16_t[2]=((val & 0x3)*256)+H_T_uint16_t[2];
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	b29b      	uxth	r3, r3
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	b29b      	uxth	r3, r3
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <hts221_init+0x19c>)
 800213e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4413      	add	r3, r2
 8002146:	b29b      	uxth	r3, r3
 8002148:	b21a      	sxth	r2, r3
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <hts221_init+0x19c>)
 800214c:	809a      	strh	r2, [r3, #4]
	//T0=((val & 0x3)*256)+T0;
	H_T_uint16_t[3]=((val & 0xc)*64)+H_T_uint16_t[3];
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	b29b      	uxth	r3, r3
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	b29b      	uxth	r3, r3
 8002158:	019b      	lsls	r3, r3, #6
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <hts221_init+0x19c>)
 800215e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002162:	b29b      	uxth	r3, r3
 8002164:	4413      	add	r3, r2
 8002166:	b29b      	uxth	r3, r3
 8002168:	b21a      	sxth	r2, r3
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <hts221_init+0x19c>)
 800216c:	80da      	strh	r2, [r3, #6]
	//T1=((val & 0xc)*64)+T1;


	//hts221_readArray(&data[0], 0x3c, 4);
	i2c_master_read(data, 4, 0x3c, hts221_DEVICE_ADDRESS_read, 1);
 800216e:	f107 0008 	add.w	r0, r7, #8
 8002172:	2301      	movs	r3, #1
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	23bf      	movs	r3, #191	; 0xbf
 8002178:	223c      	movs	r2, #60	; 0x3c
 800217a:	2104      	movs	r1, #4
 800217c:	f000 f8ea 	bl	8002354 <i2c_master_read>
	//T2= (int16_t)( ((uint16_t)data[1])*256+(uint16_t)data[0] );//[3c-3d]
	H_T_uint16_t[4]= (int16_t)( ((uint16_t)data[1])*256+(uint16_t)data[0] );//[3c-3d]
 8002180:	7a7b      	ldrb	r3, [r7, #9]
 8002182:	b29b      	uxth	r3, r3
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b29a      	uxth	r2, r3
 8002188:	7a3b      	ldrb	r3, [r7, #8]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4413      	add	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	b21a      	sxth	r2, r3
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <hts221_init+0x19c>)
 8002194:	811a      	strh	r2, [r3, #8]
	//T3= (int16_t)( ((uint16_t)data[3])*256+(uint16_t)data[2] );//3e-3f
	H_T_uint16_t[5]= (int16_t)( ((uint16_t)data[3])*256+(uint16_t)data[2] );//3e-3f
 8002196:	7afb      	ldrb	r3, [r7, #11]
 8002198:	b29b      	uxth	r3, r3
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b29a      	uxth	r2, r3
 800219e:	7abb      	ldrb	r3, [r7, #10]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <hts221_init+0x19c>)
 80021aa:	815a      	strh	r2, [r3, #10]

	hts221_get_temp(whitout_avg);	//fasza
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7ff fced 	bl	8001b8c <hts221_get_temp>
	hts221_get_hum(whitout_avg);		//fasza
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7ff fd78 	bl	8001ca8 <hts221_get_hum>

	return(status);
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200001c4 	.word	0x200001c4
 80021c8:	200000b8 	.word	0x200000b8

080021cc <lps25hb_init>:

uint8_t lps25hb_init(void)//barometer
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af02      	add	r7, sp, #8
	uint8_t status = 0,val,cnt;//,data[3];int32_t temp;
 80021d2:	2300      	movs	r3, #0
 80021d4:	71fb      	strb	r3, [r7, #7]
	//LIS3MDL_ACC_ON;
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 80021d6:	2300      	movs	r3, #0
 80021d8:	71bb      	strb	r3, [r7, #6]
 80021da:	e013      	b.n	8002204 <lps25hb_init+0x38>
		LL_mDelay(100);
 80021dc:	2064      	movs	r0, #100	; 0x64
 80021de:	f001 fcc1 	bl	8003b64 <LL_mDelay>
		//val = lps25hb_read_byte(WHO_AM_I_ADDRES);
		i2c_master_read(&val, 1, WHO_AM_I_ADDRES,lps25hb_DEVICE_ADDRESS_read , 0);
 80021e2:	1d78      	adds	r0, r7, #5
 80021e4:	2300      	movs	r3, #0
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	23bb      	movs	r3, #187	; 0xbb
 80021ea:	220f      	movs	r2, #15
 80021ec:	2101      	movs	r1, #1
 80021ee:	f000 f8b1 	bl	8002354 <i2c_master_read>
		//if the device is not found on one address, try another one
		if(val == lps25hb_WHO_AM_I_VALUE){
 80021f2:	797b      	ldrb	r3, [r7, #5]
 80021f4:	2bbd      	cmp	r3, #189	; 0xbd
 80021f6:	d102      	bne.n	80021fe <lps25hb_init+0x32>
			//if the device is founded on one address
			status = 1;
 80021f8:	2301      	movs	r3, #1
 80021fa:	71fb      	strb	r3, [r7, #7]
			break;}
 80021fc:	e005      	b.n	800220a <lps25hb_init+0x3e>
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 80021fe:	79bb      	ldrb	r3, [r7, #6]
 8002200:	3301      	adds	r3, #1
 8002202:	71bb      	strb	r3, [r7, #6]
 8002204:	79bb      	ldrb	r3, [r7, #6]
 8002206:	2b04      	cmp	r3, #4
 8002208:	d9e8      	bls.n	80021dc <lps25hb_init+0x10>
		}
	val = 0x90;//90
 800220a:	2390      	movs	r3, #144	; 0x90
 800220c:	717b      	strb	r3, [r7, #5]
	//lps25hb_write_byte(lps25hb_crtl_reg_1, val);
	i2c_master_write(val, lps25hb_crtl_reg_1,lps25hb_DEVICE_ADDRESS_write , 0);
 800220e:	7978      	ldrb	r0, [r7, #5]
 8002210:	2300      	movs	r3, #0
 8002212:	22ba      	movs	r2, #186	; 0xba
 8002214:	2120      	movs	r1, #32
 8002216:	f000 f859 	bl	80022cc <i2c_master_write>
	val=0xdf;
	//lps25hb_write_byte(0x2e, val);
	i2c_master_write(val, 0x2e,lps25hb_DEVICE_ADDRESS_write , 0);
	 */

	LL_mDelay(100);
 800221a:	2064      	movs	r0, #100	; 0x64
 800221c:	f001 fca2 	bl	8003b64 <LL_mDelay>

	lps25hb_get_pressure(whitout_avg);
 8002220:	2000      	movs	r0, #0
 8002222:	f7ff fddf 	bl	8001de4 <lps25hb_get_pressure>

	calculate_altitude(whitout_avg);
 8002226:	2000      	movs	r0, #0
 8002228:	f000 fcde 	bl	8002be8 <calculate_altitude>
	return status;
 800222c:	79fb      	ldrb	r3, [r7, #7]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <lis3mdl_init>:

uint8_t lis3mdl_init(void){// magnetometer
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af02      	add	r7, sp, #8
	uint8_t status = 0,val,cnt;//,data[3];int32_t temp;
 800223c:	2300      	movs	r3, #0
 800223e:	71fb      	strb	r3, [r7, #7]
	//LIS3MDL_ACC_ON;
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 8002240:	2300      	movs	r3, #0
 8002242:	71bb      	strb	r3, [r7, #6]
 8002244:	e013      	b.n	800226e <lis3mdl_init+0x38>
		LL_mDelay(100);
 8002246:	2064      	movs	r0, #100	; 0x64
 8002248:	f001 fc8c 	bl	8003b64 <LL_mDelay>
		//val = lis3mdl_read_byte(WHO_AM_I_ADDRES);
		i2c_master_read(&val, 1, WHO_AM_I_ADDRES,lis3mdl_DEVICE_ADDRESS_read , 0);
 800224c:	1d78      	adds	r0, r7, #5
 800224e:	2300      	movs	r3, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	233d      	movs	r3, #61	; 0x3d
 8002254:	220f      	movs	r2, #15
 8002256:	2101      	movs	r1, #1
 8002258:	f000 f87c 	bl	8002354 <i2c_master_read>
		//if the device is not found on one address, try another one
		if(val == lis3mdl_WHO_AM_I_VALUE){
 800225c:	797b      	ldrb	r3, [r7, #5]
 800225e:	2b3d      	cmp	r3, #61	; 0x3d
 8002260:	d102      	bne.n	8002268 <lis3mdl_init+0x32>
			//if the device is founded on one address
			status = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	71fb      	strb	r3, [r7, #7]
			break;}
 8002266:	e005      	b.n	8002274 <lis3mdl_init+0x3e>
	for (cnt=0;cnt<max_try_to_inicialize_whoami;cnt++){
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	3301      	adds	r3, #1
 800226c:	71bb      	strb	r3, [r7, #6]
 800226e:	79bb      	ldrb	r3, [r7, #6]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d9e8      	bls.n	8002246 <lis3mdl_init+0x10>
		}
	//val = 0x64;//90
	val=0xfc;
 8002274:	23fc      	movs	r3, #252	; 0xfc
 8002276:	717b      	strb	r3, [r7, #5]
	//lis3mdl_write_byte(lis3mdl_crtl_reg_1, val);
	i2c_master_write(val, lis3mdl_ADDRESS_CTRL1,lis3mdl_DEVICE_ADDRESS_write , 0);
 8002278:	7978      	ldrb	r0, [r7, #5]
 800227a:	2300      	movs	r3, #0
 800227c:	223c      	movs	r2, #60	; 0x3c
 800227e:	2120      	movs	r1, #32
 8002280:	f000 f824 	bl	80022cc <i2c_master_write>
	val = 0x00;// +-4 gauss
 8002284:	2300      	movs	r3, #0
 8002286:	717b      	strb	r3, [r7, #5]
	i2c_master_write(val, 0x21,lis3mdl_DEVICE_ADDRESS_write , 0);
 8002288:	7978      	ldrb	r0, [r7, #5]
 800228a:	2300      	movs	r3, #0
 800228c:	223c      	movs	r2, #60	; 0x3c
 800228e:	2121      	movs	r1, #33	; 0x21
 8002290:	f000 f81c 	bl	80022cc <i2c_master_write>
	val = 0x00;// continous measure
 8002294:	2300      	movs	r3, #0
 8002296:	717b      	strb	r3, [r7, #5]
	i2c_master_write(val, 0x22,lis3mdl_DEVICE_ADDRESS_write , 0);
 8002298:	7978      	ldrb	r0, [r7, #5]
 800229a:	2300      	movs	r3, #0
 800229c:	223c      	movs	r2, #60	; 0x3c
 800229e:	2122      	movs	r1, #34	; 0x22
 80022a0:	f000 f814 	bl	80022cc <i2c_master_write>
	val = 0x0c;// power mode
 80022a4:	230c      	movs	r3, #12
 80022a6:	717b      	strb	r3, [r7, #5]
	i2c_master_write(val, 0x23,lis3mdl_DEVICE_ADDRESS_write , 0);
 80022a8:	7978      	ldrb	r0, [r7, #5]
 80022aa:	2300      	movs	r3, #0
 80022ac:	223c      	movs	r2, #60	; 0x3c
 80022ae:	2123      	movs	r1, #35	; 0x23
 80022b0:	f000 f80c 	bl	80022cc <i2c_master_write>
	//val = 0x00;// fast reading dis
	//i2c_master_write(val, 0x24,lis3mdl_DEVICE_ADDRESS_write , 0);
	LL_mDelay(100);
 80022b4:	2064      	movs	r0, #100	; 0x64
 80022b6:	f001 fc55 	bl	8003b64 <LL_mDelay>

	//azymuth_gain=get_gain_azymuth();

	lis3mdl_get_azymuth(whitout_avg);
 80022ba:	2000      	movs	r0, #0
 80022bc:	f7ff fdf0 	bl	8001ea0 <lis3mdl_get_azymuth>
	return status;
 80022c0:	79fb      	ldrb	r3, [r7, #7]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <i2c_master_write>:

void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	4604      	mov	r4, r0
 80022d4:	4608      	mov	r0, r1
 80022d6:	4611      	mov	r1, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	4623      	mov	r3, r4
 80022dc:	71fb      	strb	r3, [r7, #7]
 80022de:	4603      	mov	r3, r0
 80022e0:	71bb      	strb	r3, [r7, #6]
 80022e2:	460b      	mov	r3, r1
 80022e4:	717b      	strb	r3, [r7, #5]
 80022e6:	4613      	mov	r3, r2
 80022e8:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80022ea:	793b      	ldrb	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80022f0:	79bb      	ldrb	r3, [r7, #6]
 80022f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022f6:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80022f8:	7979      	ldrb	r1, [r7, #5]
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <i2c_master_write+0x80>)
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2302      	movs	r3, #2
 8002306:	2200      	movs	r2, #0
 8002308:	4811      	ldr	r0, [pc, #68]	; (8002350 <i2c_master_write+0x84>)
 800230a:	f7fe fd75 	bl	8000df8 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800230e:	79bb      	ldrb	r3, [r7, #6]
 8002310:	4619      	mov	r1, r3
 8002312:	480f      	ldr	r0, [pc, #60]	; (8002350 <i2c_master_write+0x84>)
 8002314:	f7fe fd96 	bl	8000e44 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002318:	e00a      	b.n	8002330 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800231a:	480d      	ldr	r0, [pc, #52]	; (8002350 <i2c_master_write+0x84>)
 800231c:	f7fe fd25 	bl	8000d6a <LL_I2C_IsActiveFlag_TXIS>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d004      	beq.n	8002330 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	4619      	mov	r1, r3
 800232a:	4809      	ldr	r0, [pc, #36]	; (8002350 <i2c_master_write+0x84>)
 800232c:	f7fe fd8a 	bl	8000e44 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002330:	4807      	ldr	r0, [pc, #28]	; (8002350 <i2c_master_write+0x84>)
 8002332:	f7fe fd2d 	bl	8000d90 <LL_I2C_IsActiveFlag_STOP>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ee      	beq.n	800231a <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <i2c_master_write+0x84>)
 800233e:	f7fe fd3a 	bl	8000db6 <LL_I2C_ClearFlag_STOP>
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	bf00      	nop
 800234c:	80002000 	.word	0x80002000
 8002350:	40005400 	.word	0x40005400

08002354 <i2c_master_read>:

uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af02      	add	r7, sp, #8
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	4608      	mov	r0, r1
 800235e:	4611      	mov	r1, r2
 8002360:	461a      	mov	r2, r3
 8002362:	4603      	mov	r3, r0
 8002364:	70fb      	strb	r3, [r7, #3]
 8002366:	460b      	mov	r3, r1
 8002368:	70bb      	strb	r3, [r7, #2]
 800236a:	4613      	mov	r3, r2
 800236c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800236e:	4a31      	ldr	r2, [pc, #196]	; (8002434 <i2c_master_read+0xe0>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002374:	7c3b      	ldrb	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 800237a:	78bb      	ldrb	r3, [r7, #2]
 800237c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002380:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8002382:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <i2c_master_read+0xe4>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8002388:	482c      	ldr	r0, [pc, #176]	; (800243c <i2c_master_read+0xe8>)
 800238a:	f7fe fcce 	bl	8000d2a <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800238e:	7879      	ldrb	r1, [r7, #1]
 8002390:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <i2c_master_read+0xec>)
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2301      	movs	r3, #1
 800239c:	2200      	movs	r2, #0
 800239e:	4827      	ldr	r0, [pc, #156]	; (800243c <i2c_master_read+0xe8>)
 80023a0:	f7fe fd2a 	bl	8000df8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80023a4:	e00a      	b.n	80023bc <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80023a6:	4825      	ldr	r0, [pc, #148]	; (800243c <i2c_master_read+0xe8>)
 80023a8:	f7fe fcdf 	bl	8000d6a <LL_I2C_IsActiveFlag_TXIS>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 80023b2:	78bb      	ldrb	r3, [r7, #2]
 80023b4:	4619      	mov	r1, r3
 80023b6:	4821      	ldr	r0, [pc, #132]	; (800243c <i2c_master_read+0xe8>)
 80023b8:	f7fe fd44 	bl	8000e44 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80023bc:	481f      	ldr	r0, [pc, #124]	; (800243c <i2c_master_read+0xe8>)
 80023be:	f7fe fce7 	bl	8000d90 <LL_I2C_IsActiveFlag_STOP>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ee      	beq.n	80023a6 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80023c8:	481c      	ldr	r0, [pc, #112]	; (800243c <i2c_master_read+0xe8>)
 80023ca:	f7fe fcf4 	bl	8000db6 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80023ce:	bf00      	nop
 80023d0:	481a      	ldr	r0, [pc, #104]	; (800243c <i2c_master_read+0xe8>)
 80023d2:	f7fe fcdd 	bl	8000d90 <LL_I2C_IsActiveFlag_STOP>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f9      	bne.n	80023d0 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80023dc:	7879      	ldrb	r1, [r7, #1]
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <i2c_master_read+0xf0>)
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	2200      	movs	r2, #0
 80023ee:	4813      	ldr	r0, [pc, #76]	; (800243c <i2c_master_read+0xe8>)
 80023f0:	f7fe fd02 	bl	8000df8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80023f4:	bf00      	nop
 80023f6:	4811      	ldr	r0, [pc, #68]	; (800243c <i2c_master_read+0xe8>)
 80023f8:	f7fe fcca 	bl	8000d90 <LL_I2C_IsActiveFlag_STOP>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f9      	beq.n	80023f6 <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8002402:	480e      	ldr	r0, [pc, #56]	; (800243c <i2c_master_read+0xe8>)
 8002404:	f7fe fcd7 	bl	8000db6 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8002408:	480c      	ldr	r0, [pc, #48]	; (800243c <i2c_master_read+0xe8>)
 800240a:	f7fe fc9e 	bl	8000d4a <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <i2c_master_read+0xe8>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <i2c_master_read+0xe8>)
 8002414:	f043 0310 	orr.w	r3, r3, #16
 8002418:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <i2c_master_read+0xf4>)
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <i2c_master_read+0xe4>)
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002426:	4b03      	ldr	r3, [pc, #12]	; (8002434 <i2c_master_read+0xe0>)
 8002428:	681b      	ldr	r3, [r3, #0]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000208 	.word	0x20000208
 8002438:	200000b4 	.word	0x200000b4
 800243c:	40005400 	.word	0x40005400
 8002440:	80002000 	.word	0x80002000
 8002444:	80002400 	.word	0x80002400
 8002448:	200000b5 	.word	0x200000b5

0800244c <my_str_cpy>:

void my_str_cpy(uint8_t * from, uint8_t * to, uint16_t *copied, uint16_t max){
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	807b      	strh	r3, [r7, #2]
	uint16_t cnt=0;
 800245a:	2300      	movs	r3, #0
 800245c:	82fb      	strh	r3, [r7, #22]
	for(cnt=0;cnt<max;cnt++){
 800245e:	2300      	movs	r3, #0
 8002460:	82fb      	strh	r3, [r7, #22]
 8002462:	e014      	b.n	800248e <my_str_cpy+0x42>
		if(*from == '\0')
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d103      	bne.n	8002474 <my_str_cpy+0x28>
			{*copied=cnt;return;}
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8afa      	ldrh	r2, [r7, #22]
 8002470:	801a      	strh	r2, [r3, #0]
 8002472:	e010      	b.n	8002496 <my_str_cpy+0x4a>
		else
			{*to=*from;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	701a      	strb	r2, [r3, #0]
			to+=1;from+=1;}
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	3301      	adds	r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3301      	adds	r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
	for(cnt=0;cnt<max;cnt++){
 8002488:	8afb      	ldrh	r3, [r7, #22]
 800248a:	3301      	adds	r3, #1
 800248c:	82fb      	strh	r3, [r7, #22]
 800248e:	8afa      	ldrh	r2, [r7, #22]
 8002490:	887b      	ldrh	r3, [r7, #2]
 8002492:	429a      	cmp	r2, r3
 8002494:	d3e6      	bcc.n	8002464 <my_str_cpy+0x18>
	}
}
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <convert_char_to_7seg>:

void convert_char_to_7seg(uint8_t ch,uint16_t *pa,uint16_t *pb){
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	73fb      	strb	r3, [r7, #15]
	*pa=0xffff & ~( dig_1_pa_Pin | dig_2_pa_Pin | dig_3_pa_Pin | dig_time_pa_Pin);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f64e 726b 	movw	r2, #61291	; 0xef6b
 80024b4:	801a      	strh	r2, [r3, #0]
	*pb=0xffff & ~(dig_0_pb_Pin | dig_0_pb_Pin);//& ~(LL_GPIO_PIN_5 | LL_GPIO_PIN_6);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80024bc:	801a      	strh	r2, [r3, #0]
	switch(ch){
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	3b2d      	subs	r3, #45	; 0x2d
 80024c2:	2b4c      	cmp	r3, #76	; 0x4c
 80024c4:	f200 8346 	bhi.w	8002b54 <convert_char_to_7seg+0x6b4>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <convert_char_to_7seg+0x30>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	08002b35 	.word	0x08002b35
 80024d4:	08002b45 	.word	0x08002b45
 80024d8:	08002b55 	.word	0x08002b55
 80024dc:	08002605 	.word	0x08002605
 80024e0:	08002627 	.word	0x08002627
 80024e4:	0800263b 	.word	0x0800263b
 80024e8:	0800265d 	.word	0x0800265d
 80024ec:	0800267f 	.word	0x0800267f
 80024f0:	080026a1 	.word	0x080026a1
 80024f4:	080026bf 	.word	0x080026bf
 80024f8:	080026e1 	.word	0x080026e1
 80024fc:	080026f5 	.word	0x080026f5
 8002500:	08002717 	.word	0x08002717
 8002504:	08002b55 	.word	0x08002b55
 8002508:	08002b55 	.word	0x08002b55
 800250c:	08002b55 	.word	0x08002b55
 8002510:	08002b55 	.word	0x08002b55
 8002514:	08002b55 	.word	0x08002b55
 8002518:	08002b55 	.word	0x08002b55
 800251c:	08002b55 	.word	0x08002b55
 8002520:	08002739 	.word	0x08002739
 8002524:	08002b55 	.word	0x08002b55
 8002528:	0800279f 	.word	0x0800279f
 800252c:	08002b55 	.word	0x08002b55
 8002530:	08002801 	.word	0x08002801
 8002534:	08002823 	.word	0x08002823
 8002538:	08002845 	.word	0x08002845
 800253c:	08002867 	.word	0x08002867
 8002540:	080028ab 	.word	0x080028ab
 8002544:	080028bf 	.word	0x080028bf
 8002548:	08002a65 	.word	0x08002a65
 800254c:	080028e1 	.word	0x080028e1
 8002550:	08002a87 	.word	0x08002a87
 8002554:	08002b55 	.word	0x08002b55
 8002558:	08002921 	.word	0x08002921
 800255c:	08002961 	.word	0x08002961
 8002560:	08002b55 	.word	0x08002b55
 8002564:	08002b55 	.word	0x08002b55
 8002568:	080029c3 	.word	0x080029c3
 800256c:	08002b55 	.word	0x08002b55
 8002570:	08002a03 	.word	0x08002a03
 8002574:	08002aa5 	.word	0x08002aa5
 8002578:	08002ac3 	.word	0x08002ac3
 800257c:	08002ae5 	.word	0x08002ae5
 8002580:	08002b55 	.word	0x08002b55
 8002584:	08002b03 	.word	0x08002b03
 8002588:	08002b55 	.word	0x08002b55
 800258c:	08002b55 	.word	0x08002b55
 8002590:	08002b55 	.word	0x08002b55
 8002594:	08002b55 	.word	0x08002b55
 8002598:	08002b25 	.word	0x08002b25
 800259c:	08002b55 	.word	0x08002b55
 80025a0:	0800275b 	.word	0x0800275b
 80025a4:	0800277d 	.word	0x0800277d
 80025a8:	080027c1 	.word	0x080027c1
 80025ac:	080027df 	.word	0x080027df
 80025b0:	08002b55 	.word	0x08002b55
 80025b4:	08002b55 	.word	0x08002b55
 80025b8:	08002b55 	.word	0x08002b55
 80025bc:	08002889 	.word	0x08002889
 80025c0:	08002b55 	.word	0x08002b55
 80025c4:	08002b55 	.word	0x08002b55
 80025c8:	08002b55 	.word	0x08002b55
 80025cc:	08002b55 	.word	0x08002b55
 80025d0:	08002b55 	.word	0x08002b55
 80025d4:	08002903 	.word	0x08002903
 80025d8:	08002943 	.word	0x08002943
 80025dc:	08002b55 	.word	0x08002b55
 80025e0:	08002983 	.word	0x08002983
 80025e4:	080029a5 	.word	0x080029a5
 80025e8:	08002b55 	.word	0x08002b55
 80025ec:	080029e1 	.word	0x080029e1
 80025f0:	08002a25 	.word	0x08002a25
 80025f4:	08002b55 	.word	0x08002b55
 80025f8:	08002b55 	.word	0x08002b55
 80025fc:	08002b55 	.word	0x08002b55
 8002600:	08002a43 	.word	0x08002a43
				case '0':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 800260c:	f023 030b 	bic.w	r3, r3, #11
 8002610:	b29a      	uxth	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	f023 0320 	bic.w	r3, r3, #32
 800261e:	b29a      	uxth	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	801a      	strh	r2, [r3, #0]
					break;}
 8002624:	e29d      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '1':{
					*pa&=~(seg_B_pa_Pin | seg_C_pa_Pin);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	801a      	strh	r2, [r3, #0]
					break;}
 8002638:	e293      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '2':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_E_pa_Pin );
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	b29a      	uxth	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002654:	b29a      	uxth	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	801a      	strh	r2, [r3, #0]
					break;}
 800265a:	e282      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '3':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin );
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	801a      	strh	r2, [r3, #0]
					break;}
 800267c:	e271      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '4':{
					*pa &= ~( seg_B_pa_Pin | seg_C_pa_Pin | seg_F_pa_Pin);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	801a      	strh	r2, [r3, #0]
					*pb &= ~( seg_G_pb_Pin );
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	f023 0310 	bic.w	r3, r3, #16
 8002698:	b29a      	uxth	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	801a      	strh	r2, [r3, #0]
					break;}
 800269e:	e260      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '5':{
					*pa &= ~(seg_A_pa_Pin | seg_C_pa_Pin | seg_F_pa_Pin);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	f423 7385 	bic.w	r3, r3, #266	; 0x10a
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	801a      	strh	r2, [r3, #0]
					break;}
 80026bc:	e251      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '6':{
					*pa &= ~(seg_A_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 80026c6:	f023 030a 	bic.w	r3, r3, #10
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	801a      	strh	r2, [r3, #0]
					break;}
 80026de:	e240      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '7':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin );
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	801a      	strh	r2, [r3, #0]
					break;}
 80026f2:	e236      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '8':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 80026fc:	f023 030b 	bic.w	r3, r3, #11
 8002700:	b29a      	uxth	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800270e:	b29a      	uxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	801a      	strh	r2, [r3, #0]
					break;}
 8002714:	e225      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '9':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_F_pa_Pin);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	f423 7385 	bic.w	r3, r3, #266	; 0x10a
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002730:	b29a      	uxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	801a      	strh	r2, [r3, #0]
					break;}
 8002736:	e214      	b.n	8002b62 <convert_char_to_7seg+0x6c2>

				case 'A':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002740:	f023 030b 	bic.w	r3, r3, #11
 8002744:	b29a      	uxth	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	801a      	strh	r2, [r3, #0]
					*pb &= ~( seg_G_pb_Pin);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	f023 0310 	bic.w	r3, r3, #16
 8002752:	b29a      	uxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	801a      	strh	r2, [r3, #0]
					break;}
 8002758:	e203      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'a':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin );
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	b29a      	uxth	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002774:	b29a      	uxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	801a      	strh	r2, [r3, #0]
					break;}
 800277a:	e1f2      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'b':{
					*pa &= ~( seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002784:	f023 0308 	bic.w	r3, r3, #8
 8002788:	b29a      	uxth	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002796:	b29a      	uxth	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	801a      	strh	r2, [r3, #0]
					break;}
 800279c:	e1e1      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'C':{
					*pa &= ~(seg_A_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027a6:	f023 030a 	bic.w	r3, r3, #10
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin );
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	f023 0320 	bic.w	r3, r3, #32
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	801a      	strh	r2, [r3, #0]
					break;}
 80027be:	e1d0      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'c':{
					*pa &= ~( seg_E_pa_Pin );
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	801a      	strh	r2, [r3, #0]
					break;}
 80027dc:	e1c1      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'd':{
					*pa &= ~( seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin );
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	801a      	strh	r2, [r3, #0]
					break;}
 80027fe:	e1b0      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'E':{
					*pa &= ~(seg_A_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002808:	f023 030a 	bic.w	r3, r3, #10
 800280c:	b29a      	uxth	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800281a:	b29a      	uxth	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	801a      	strh	r2, [r3, #0]
					break;}
 8002820:	e19f      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'F':{
					*pa &= ~(seg_A_pa_Pin |  seg_E_pa_Pin | seg_F_pa_Pin);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800282a:	f023 030a 	bic.w	r3, r3, #10
 800282e:	b29a      	uxth	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	801a      	strh	r2, [r3, #0]
					*pb &= ~( seg_G_pb_Pin);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	f023 0310 	bic.w	r3, r3, #16
 800283c:	b29a      	uxth	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	801a      	strh	r2, [r3, #0]
					break;}
 8002842:	e18e      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'G':{
					*pa &= ~(seg_A_pa_Pin |  seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 800284c:	f023 030a 	bic.w	r3, r3, #10
 8002850:	b29a      	uxth	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin );
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	f023 0320 	bic.w	r3, r3, #32
 800285e:	b29a      	uxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	801a      	strh	r2, [r3, #0]
					break;}
 8002864:	e17d      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'H':{
					*pa &= ~(seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 800286e:	f023 0309 	bic.w	r3, r3, #9
 8002872:	b29a      	uxth	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	801a      	strh	r2, [r3, #0]
					*pb &= ~( seg_G_pb_Pin);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f023 0310 	bic.w	r3, r3, #16
 8002880:	b29a      	uxth	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	801a      	strh	r2, [r3, #0]
					break;}
 8002886:	e16c      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'h':{
					*pa &= ~( seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002890:	f023 0308 	bic.w	r3, r3, #8
 8002894:	b29a      	uxth	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	801a      	strh	r2, [r3, #0]
					*pb &= ~( seg_G_pb_Pin);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	f023 0310 	bic.w	r3, r3, #16
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	801a      	strh	r2, [r3, #0]
					break;}
 80028a8:	e15b      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'I':{
					*pa &= ~( seg_E_pa_Pin | seg_F_pa_Pin);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028b2:	f023 0308 	bic.w	r3, r3, #8
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	801a      	strh	r2, [r3, #0]
					// *pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
					break;}
 80028bc:	e151      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'J':{
					*pa &= ~( seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin );
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin );
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	f023 0320 	bic.w	r3, r3, #32
 80028d8:	b29a      	uxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	801a      	strh	r2, [r3, #0]
					break;}
 80028de:	e140      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'L':{
					*pa &= ~(seg_E_pa_Pin | seg_F_pa_Pin);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028e8:	f023 0308 	bic.w	r3, r3, #8
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin );
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	f023 0320 	bic.w	r3, r3, #32
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	801a      	strh	r2, [r3, #0]
					break;}
 8002900:	e12f      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'n':{
					*pa &= ~( seg_C_pa_Pin | seg_E_pa_Pin );
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 800290a:	b29a      	uxth	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	801a      	strh	r2, [r3, #0]
					*pb &= ~( seg_G_pb_Pin);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	f023 0310 	bic.w	r3, r3, #16
 8002918:	b29a      	uxth	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	801a      	strh	r2, [r3, #0]
					break;}
 800291e:	e120      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'O':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002928:	f023 030b 	bic.w	r3, r3, #11
 800292c:	b29a      	uxth	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin );
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	f023 0320 	bic.w	r3, r3, #32
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	801a      	strh	r2, [r3, #0]
					break;}
 8002940:	e10f      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'o':{
					*pa &= ~( seg_C_pa_Pin | seg_E_pa_Pin );
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 800294a:	b29a      	uxth	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002958:	b29a      	uxth	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	801a      	strh	r2, [r3, #0]
					break;}
 800295e:	e100      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'P':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin  | seg_E_pa_Pin | seg_F_pa_Pin);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002968:	f023 030b 	bic.w	r3, r3, #11
 800296c:	b29a      	uxth	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	801a      	strh	r2, [r3, #0]
					*pb &= ~( seg_G_pb_Pin);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	f023 0310 	bic.w	r3, r3, #16
 800297a:	b29a      	uxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	801a      	strh	r2, [r3, #0]
					break;}
 8002980:	e0ef      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'q':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_C_pa_Pin | seg_F_pa_Pin);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	f423 7385 	bic.w	r3, r3, #266	; 0x10a
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	801a      	strh	r2, [r3, #0]
					*pb &= ~( seg_G_pb_Pin);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	f023 0310 	bic.w	r3, r3, #16
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	801a      	strh	r2, [r3, #0]
					break;}
 80029a2:	e0de      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'r':{
					*pa &= ~( seg_E_pa_Pin );
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_G_pb_Pin);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	f023 0310 	bic.w	r3, r3, #16
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	801a      	strh	r2, [r3, #0]
					break;}
 80029c0:	e0cf      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'S':{
					*pa &= ~(seg_A_pa_Pin | seg_C_pa_Pin  | seg_F_pa_Pin);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	f423 7385 	bic.w	r3, r3, #266	; 0x10a
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029d8:	b29a      	uxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	801a      	strh	r2, [r3, #0]
					break;}
 80029de:	e0c0      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 't':{
					*pa &= ~( seg_E_pa_Pin | seg_F_pa_Pin);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029e8:	f023 0308 	bic.w	r3, r3, #8
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	801a      	strh	r2, [r3, #0]
					break;}
 8002a00:	e0af      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'U':{
					*pa &= ~(  seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002a0a:	f023 0309 	bic.w	r3, r3, #9
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin );
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	f023 0320 	bic.w	r3, r3, #32
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	801a      	strh	r2, [r3, #0]
					break;}
 8002a22:	e09e      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'u':{
					*pa &= ~( seg_C_pa_Pin | seg_E_pa_Pin );
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin );
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	f023 0320 	bic.w	r3, r3, #32
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	801a      	strh	r2, [r3, #0]
					break;}
 8002a40:	e08f      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'y':{
					*pa &= ~( seg_B_pa_Pin | seg_C_pa_Pin  | seg_F_pa_Pin);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	801a      	strh	r2, [r3, #0]
					break;}
 8002a62:	e07e      	b.n	8002b62 <convert_char_to_7seg+0x6c2>

				//specials:
				case 'K':{
					*pa &= ~(seg_A_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002a6c:	f023 030a 	bic.w	r3, r3, #10
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_G_pb_Pin);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	f023 0310 	bic.w	r3, r3, #16
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	801a      	strh	r2, [r3, #0]
					break;}
 8002a84:	e06d      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'M':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin | seg_F_pa_Pin);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	f023 030b 	bic.w	r3, r3, #11
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin );
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	f023 0320 	bic.w	r3, r3, #32
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	801a      	strh	r2, [r3, #0]
					break;}
 8002aa2:	e05e      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'V':{
					*pa &= ~( seg_B_pa_Pin |   seg_F_pa_Pin);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	f023 0309 	bic.w	r3, r3, #9
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin );
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	f023 0320 	bic.w	r3, r3, #32
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	801a      	strh	r2, [r3, #0]
					break;}
 8002ac0:	e04f      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'W':{
					*pa &= ~( seg_B_pa_Pin | seg_C_pa_Pin | seg_E_pa_Pin | seg_F_pa_Pin);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	f423 6310 	bic.w	r3, r3, #2304	; 0x900
 8002aca:	f023 0309 	bic.w	r3, r3, #9
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	801a      	strh	r2, [r3, #0]
					break;}
 8002ae2:	e03e      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'X':{
					*pa &= ~(seg_A_pa_Pin  );
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	f023 0302 	bic.w	r3, r3, #2
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	801a      	strh	r2, [r3, #0]
					break;}
 8002b00:	e02f      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case 'Z':{
					*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin    | seg_E_pa_Pin);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	801a      	strh	r2, [r3, #0]
					*pb &= ~(seg_D_pb_Pin | seg_G_pb_Pin);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	801a      	strh	r2, [r3, #0]
					break;}
 8002b22:	e01e      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '_':{
					//*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin    | seg_E_pa_Pin);
					*pb &= ~(seg_D_pb_Pin );
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	f023 0320 	bic.w	r3, r3, #32
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	801a      	strh	r2, [r3, #0]
					break;}
 8002b32:	e016      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '-':{
					//*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin    | seg_E_pa_Pin);
					*pb &= ~(seg_G_pb_Pin );
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	f023 0310 	bic.w	r3, r3, #16
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	801a      	strh	r2, [r3, #0]
					break;}
 8002b42:	e00e      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				case '.':{
					//pb -=1;pa-=1;//
					//*pa &= ~(seg_A_pa_Pin | seg_B_pa_Pin    | seg_E_pa_Pin);
					*pb &= ~(seg_DP_pb_Pin );
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	f023 0302 	bic.w	r3, r3, #2
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	801a      	strh	r2, [r3, #0]
					break;}
 8002b52:	e006      	b.n	8002b62 <convert_char_to_7seg+0x6c2>
				default:
					*pb &=~seg_DP_pb_Pin;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	f023 0302 	bic.w	r3, r3, #2
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	801a      	strh	r2, [r3, #0]
				}*/


			}

}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop

08002b70 <convert_str_to_7seg>:

void convert_str_to_7seg(uint8_t *from, uint16_t *pa,uint16_t *pb,uint16_t max){
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	807b      	strh	r3, [r7, #2]
	uint16_t cnt=0;//,mask_a=0,mask_b=0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	82fb      	strh	r3, [r7, #22]
	for (cnt=0;cnt<max;cnt++){
 8002b82:	2300      	movs	r3, #0
 8002b84:	82fb      	strh	r3, [r7, #22]
 8002b86:	e022      	b.n	8002bce <convert_str_to_7seg+0x5e>
		convert_char_to_7seg(*from,pa,pb);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fc85 	bl	80024a0 <convert_char_to_7seg>
		if (*from == '.')
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8002b9c:	d10b      	bne.n	8002bb6 <convert_str_to_7seg+0x46>
			{pa-=1;pb-=1;size_buff--;}
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3b02      	subs	r3, #2
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b02      	subs	r3, #2
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <convert_str_to_7seg+0x70>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <convert_str_to_7seg+0x70>)
 8002bb4:	801a      	strh	r2, [r3, #0]
		pa+=1;pb+=1;from+=1;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3302      	adds	r3, #2
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
	for (cnt=0;cnt<max;cnt++){
 8002bc8:	8afb      	ldrh	r3, [r7, #22]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	82fb      	strh	r3, [r7, #22]
 8002bce:	8afa      	ldrh	r2, [r7, #22]
 8002bd0:	887b      	ldrh	r3, [r7, #2]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d3d8      	bcc.n	8002b88 <convert_str_to_7seg+0x18>
	}
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000008e 	.word	0x2000008e
 8002be4:	00000000 	.word	0x00000000

08002be8 <calculate_altitude>:

void calculate_altitude(uint8_t avg){
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
	float temp;
	//float temperature=0.0;
	//float pressure=0.0;
	temp=((273.15+temperature)*(pow(pressure/1013.15,1.0/5.257)-1.0))/0.0065;
 8002bf2:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <calculate_altitude+0xe0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fc4a 	bl	8000490 <__aeabi_f2d>
 8002bfc:	a32a      	add	r3, pc, #168	; (adr r3, 8002ca8 <calculate_altitude+0xc0>)
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	f7fd fae7 	bl	80001d4 <__adddf3>
 8002c06:	4603      	mov	r3, r0
 8002c08:	460c      	mov	r4, r1
 8002c0a:	4625      	mov	r5, r4
 8002c0c:	461c      	mov	r4, r3
 8002c0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <calculate_altitude+0xe4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fc3c 	bl	8000490 <__aeabi_f2d>
 8002c18:	a325      	add	r3, pc, #148	; (adr r3, 8002cb0 <calculate_altitude+0xc8>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f7fd fdb9 	bl	8000794 <__aeabi_ddiv>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	ec43 2b17 	vmov	d7, r2, r3
 8002c2a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8002cb8 <calculate_altitude+0xd0>
 8002c2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c32:	eef0 0a67 	vmov.f32	s1, s15
 8002c36:	f001 f9e7 	bl	8004008 <pow>
 8002c3a:	ec51 0b10 	vmov	r0, r1, d0
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <calculate_altitude+0xe8>)
 8002c44:	f7fd fac4 	bl	80001d0 <__aeabi_dsub>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	4629      	mov	r1, r5
 8002c50:	f7fd fc76 	bl	8000540 <__aeabi_dmul>
 8002c54:	4603      	mov	r3, r0
 8002c56:	460c      	mov	r4, r1
 8002c58:	4618      	mov	r0, r3
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	a318      	add	r3, pc, #96	; (adr r3, 8002cc0 <calculate_altitude+0xd8>)
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f7fd fd97 	bl	8000794 <__aeabi_ddiv>
 8002c66:	4603      	mov	r3, r0
 8002c68:	460c      	mov	r4, r1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	f7fd ff17 	bl	8000aa0 <__aeabi_d2f>
 8002c72:	4603      	mov	r3, r0
 8002c74:	60fb      	str	r3, [r7, #12]
	if (avg){
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <calculate_altitude+0xb2>
		altitude=(temp+altitude)/2.0;
 8002c7c:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <calculate_altitude+0xec>)
 8002c7e:	ed93 7a00 	vldr	s14, [r3]
 8002c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <calculate_altitude+0xec>)
 8002c94:	edc3 7a00 	vstr	s15, [r3]
	}else{
		altitude=temp;
	}
}
 8002c98:	e002      	b.n	8002ca0 <calculate_altitude+0xb8>
		altitude=temp;
 8002c9a:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <calculate_altitude+0xec>)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6013      	str	r3, [r2, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca8:	66666666 	.word	0x66666666
 8002cac:	40711266 	.word	0x40711266
 8002cb0:	33333333 	.word	0x33333333
 8002cb4:	408fa933 	.word	0x408fa933
 8002cb8:	7dee2d4a 	.word	0x7dee2d4a
 8002cbc:	3fc85936 	.word	0x3fc85936
 8002cc0:	76c8b439 	.word	0x76c8b439
 8002cc4:	3f7a9fbe 	.word	0x3f7a9fbe
 8002cc8:	20000094 	.word	0x20000094
 8002ccc:	2000009c 	.word	0x2000009c
 8002cd0:	3ff00000 	.word	0x3ff00000
 8002cd4:	200000a0 	.word	0x200000a0

08002cd8 <start_tim17_with_IT>:

void start_tim17_with_IT(void){
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
	  LL_TIM_EnableIT_UPDATE(TIM17);
 8002cdc:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <start_tim17_with_IT+0x1c>)
 8002cde:	f7fe fa17 	bl	8001110 <LL_TIM_EnableIT_UPDATE>
	  TIM17->CR1 |= TIM_CR1_CEN; // start timer
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <start_tim17_with_IT+0x1c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a03      	ldr	r2, [pc, #12]	; (8002cf4 <start_tim17_with_IT+0x1c>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6013      	str	r3, [r2, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40014800 	.word	0x40014800

08002cf8 <start_tim16_with_IT>:

void start_tim16_with_IT(void){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM16);
 8002cfc:	4805      	ldr	r0, [pc, #20]	; (8002d14 <start_tim16_with_IT+0x1c>)
 8002cfe:	f7fe fa07 	bl	8001110 <LL_TIM_EnableIT_UPDATE>
	TIM16->CR1 |= TIM_CR1_CEN; // start timer
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <start_tim16_with_IT+0x1c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a03      	ldr	r2, [pc, #12]	; (8002d14 <start_tim16_with_IT+0x1c>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6013      	str	r3, [r2, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40014400 	.word	0x40014400

08002d18 <multiplex_display_fcn>:

void multiplex_display_fcn(uint16_t offset,uint16_t max_offset){
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	460a      	mov	r2, r1
 8002d22:	80fb      	strh	r3, [r7, #6]
 8002d24:	4613      	mov	r3, r2
 8002d26:	80bb      	strh	r3, [r7, #4]
	//LL_GPIO_TogglePin(led_GPIO_Port, led_Pin);

	if (offset>max_offset){
 8002d28:	88fa      	ldrh	r2, [r7, #6]
 8002d2a:	88bb      	ldrh	r3, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d901      	bls.n	8002d34 <multiplex_display_fcn+0x1c>
		offset=max_offset;}
 8002d30:	88bb      	ldrh	r3, [r7, #4]
 8002d32:	80fb      	strh	r3, [r7, #6]
	switch (active_display_digit){
 8002d34:	4b3f      	ldr	r3, [pc, #252]	; (8002e34 <multiplex_display_fcn+0x11c>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d867      	bhi.n	8002e0c <multiplex_display_fcn+0xf4>
 8002d3c:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <multiplex_display_fcn+0x2c>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002d7d 	.word	0x08002d7d
 8002d4c:	08002dad 	.word	0x08002dad
 8002d50:	08002ddd 	.word	0x08002ddd
		case 0:{
			GPIOA->ODR = display_buffer_pa[offset];
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	4a38      	ldr	r2, [pc, #224]	; (8002e38 <multiplex_display_fcn+0x120>)
 8002d58:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d60:	615a      	str	r2, [r3, #20]
			GPIOB->ODR = display_buffer_pb[offset];
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	4a35      	ldr	r2, [pc, #212]	; (8002e3c <multiplex_display_fcn+0x124>)
 8002d66:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d6a:	4b35      	ldr	r3, [pc, #212]	; (8002e40 <multiplex_display_fcn+0x128>)
 8002d6c:	615a      	str	r2, [r3, #20]
			//GPIOB->ODR =
			//	create_mask(display_buffer_pb[offset]);
			//GPIOA->ODR |= dig_0_pa_Pin;
			GPIOB->ODR |= dig_0_pb_Pin;
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <multiplex_display_fcn+0x128>)
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <multiplex_display_fcn+0x128>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6153      	str	r3, [r2, #20]
			//prevoius=display_buffer_pb[offset];
			break;}
 8002d7a:	e047      	b.n	8002e0c <multiplex_display_fcn+0xf4>
		case 1:{
			GPIOA->ODR = display_buffer_pa[offset+1];
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <multiplex_display_fcn+0x120>)
 8002d82:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d8a:	615a      	str	r2, [r3, #20]
			GPIOB->ODR = display_buffer_pb[offset+1];
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a2a      	ldr	r2, [pc, #168]	; (8002e3c <multiplex_display_fcn+0x124>)
 8002d92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d96:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <multiplex_display_fcn+0x128>)
 8002d98:	615a      	str	r2, [r3, #20]
			//GPIOB->ODR =
			//	create_mask(display_buffer_pb[offset+1]);
			GPIOA->ODR |= dig_1_pa_Pin;
 8002d9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002da4:	f043 0310 	orr.w	r3, r3, #16
 8002da8:	6153      	str	r3, [r2, #20]
			//prevoius=display_buffer_pb[offset+1];
			break;}
 8002daa:	e02f      	b.n	8002e0c <multiplex_display_fcn+0xf4>
		case 2:{
			GPIOA->ODR = display_buffer_pa[offset+2];
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	3302      	adds	r3, #2
 8002db0:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <multiplex_display_fcn+0x120>)
 8002db2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002db6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002dba:	615a      	str	r2, [r3, #20]
			GPIOB->ODR = display_buffer_pb[offset+2];
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <multiplex_display_fcn+0x124>)
 8002dc2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <multiplex_display_fcn+0x128>)
 8002dc8:	615a      	str	r2, [r3, #20]
			//GPIOB->ODR =
			//	create_mask(display_buffer_pb[offset+2]);
			GPIOA->ODR |= dig_2_pa_Pin;
 8002dca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002dd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dd8:	6153      	str	r3, [r2, #20]
			//prevoius=display_buffer_pb[offset+2];
			break;}
 8002dda:	e017      	b.n	8002e0c <multiplex_display_fcn+0xf4>
		case 3:{
			GPIOA->ODR = display_buffer_pa[offset+3];
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	3303      	adds	r3, #3
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <multiplex_display_fcn+0x120>)
 8002de2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002de6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002dea:	615a      	str	r2, [r3, #20]
			GPIOB->ODR = display_buffer_pb[offset+3];
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	3303      	adds	r3, #3
 8002df0:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <multiplex_display_fcn+0x124>)
 8002df2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <multiplex_display_fcn+0x128>)
 8002df8:	615a      	str	r2, [r3, #20]
			//GPIOB->ODR =
			//create_mask(display_buffer_pb[offset+3]);
			GPIOA->ODR |= dig_3_pa_Pin;
 8002dfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	6153      	str	r3, [r2, #20]
			//prevoius=display_buffer_pb[offset+3];
			break;}
 8002e0a:	bf00      	nop
	}

	active_display_digit++;
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <multiplex_display_fcn+0x11c>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <multiplex_display_fcn+0x11c>)
 8002e16:	701a      	strb	r2, [r3, #0]
	if (active_display_digit>=4)
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <multiplex_display_fcn+0x11c>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d902      	bls.n	8002e26 <multiplex_display_fcn+0x10e>
		active_display_digit=0;
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <multiplex_display_fcn+0x11c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]

}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	2000008d 	.word	0x2000008d
 8002e38:	20000144 	.word	0x20000144
 8002e3c:	200000c4 	.word	0x200000c4
 8002e40:	48000400 	.word	0x48000400

08002e44 <test_push_button_state>:

uint8_t test_push_button_state(uint16_t max_test){
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80fb      	strh	r3, [r7, #6]
	uint16_t cnt;
	for (cnt=0; cnt<=max_test;cnt++){
 8002e4e:	2300      	movs	r3, #0
 8002e50:	81fb      	strh	r3, [r7, #14]
 8002e52:	e00a      	b.n	8002e6a <test_push_button_state+0x26>
		//if((push_button_irq3_GPIO_Port->IDR & push_button_irq3_Pin)){
		if((push_button_irq3_GPIO_Port->IDR & push_button_irq3_Pin)==0x0){
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <test_push_button_state+0x3c>)
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <test_push_button_state+0x20>
			return(0);
 8002e60:	2300      	movs	r3, #0
 8002e62:	e007      	b.n	8002e74 <test_push_button_state+0x30>
	for (cnt=0; cnt<=max_test;cnt++){
 8002e64:	89fb      	ldrh	r3, [r7, #14]
 8002e66:	3301      	adds	r3, #1
 8002e68:	81fb      	strh	r3, [r7, #14]
 8002e6a:	89fa      	ldrh	r2, [r7, #14]
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d9f0      	bls.n	8002e54 <test_push_button_state+0x10>
		}
	}
	return(255);
 8002e72:	23ff      	movs	r3, #255	; 0xff
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	48000400 	.word	0x48000400

08002e84 <LL_I2C_IsActiveFlag_RXNE>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d101      	bne.n	8002e9c <LL_I2C_IsActiveFlag_RXNE+0x18>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_I2C_ReceiveData8>:
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	b2db      	uxtb	r3, r3
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002ecc:	4b07      	ldr	r3, [pc, #28]	; (8002eec <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40010400 	.word	0x40010400

08002ef0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002ef8:	4a04      	ldr	r2, [pc, #16]	; (8002f0c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6153      	str	r3, [r2, #20]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40010400 	.word	0x40010400

08002f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <HardFault_Handler+0x4>

08002f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <MemManage_Handler+0x4>

08002f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f2e:	e7fe      	b.n	8002f2e <BusFault_Handler+0x4>

08002f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <UsageFault_Handler+0x4>

08002f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	EXTI->PR |= (EXTI_PR_PIF3);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <EXTI3_IRQHandler+0x34>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <EXTI3_IRQHandler+0x34>)
 8002f7a:	f043 0308 	orr.w	r3, r3, #8
 8002f7e:	6153      	str	r3, [r2, #20]
	mode |= push_button_pushed;
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <EXTI3_IRQHandler+0x38>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <EXTI3_IRQHandler+0x38>)
 8002f8c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8002f8e:	2008      	movs	r0, #8
 8002f90:	f7ff ff98 	bl	8002ec4 <LL_EXTI_IsActiveFlag_0_31>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <EXTI3_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8002f9a:	2008      	movs	r0, #8
 8002f9c:	f7ff ffa8 	bl	8002ef0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40010400 	.word	0x40010400
 8002fa8:	2000008c 	.word	0x2000008c

08002fac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	mode |= shift_display;		// 500 ms delay to shift display
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002fbc:	701a      	strb	r2, [r3, #0]
	TIM16->SR &=~(TIM_SR_UIF);
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	2000008c 	.word	0x2000008c
 8002fd8:	40014400 	.word	0x40014400

08002fdc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	mode |= multiplex_display;	//1kHz multiplex display
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8002fec:	701a      	strb	r2, [r3, #0]
	TIM17->SR &=~(TIM_SR_UIF);
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	2000008c 	.word	0x2000008c
 8003008:	40014800 	.word	0x40014800

0800300c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800300c:	b598      	push	{r3, r4, r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8003010:	4812      	ldr	r0, [pc, #72]	; (800305c <I2C1_EV_IRQHandler+0x50>)
 8003012:	f7ff ff37 	bl	8002e84 <LL_I2C_IsActiveFlag_RXNE>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01c      	beq.n	8003056 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 800301c:	4b10      	ldr	r3, [pc, #64]	; (8003060 <I2C1_EV_IRQHandler+0x54>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <I2C1_EV_IRQHandler+0x58>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	1c59      	adds	r1, r3, #1
 8003028:	b2c8      	uxtb	r0, r1
 800302a:	490e      	ldr	r1, [pc, #56]	; (8003064 <I2C1_EV_IRQHandler+0x58>)
 800302c:	7008      	strb	r0, [r1, #0]
 800302e:	18d4      	adds	r4, r2, r3
 8003030:	480a      	ldr	r0, [pc, #40]	; (800305c <I2C1_EV_IRQHandler+0x50>)
 8003032:	f7ff ff3a 	bl	8002eaa <LL_I2C_ReceiveData8>
 8003036:	4603      	mov	r3, r0
 8003038:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <I2C1_EV_IRQHandler+0x58>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b13      	cmp	r3, #19
 8003042:	d903      	bls.n	800304c <I2C1_EV_IRQHandler+0x40>
 8003044:	4b07      	ldr	r3, [pc, #28]	; (8003064 <I2C1_EV_IRQHandler+0x58>)
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e001      	b.n	8003050 <I2C1_EV_IRQHandler+0x44>
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <I2C1_EV_IRQHandler+0x58>)
 800304e:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <I2C1_EV_IRQHandler+0x5c>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd98      	pop	{r3, r4, r7, pc}
 800305a:	bf00      	nop
 800305c:	40005400 	.word	0x40005400
 8003060:	20000208 	.word	0x20000208
 8003064:	200000b5 	.word	0x200000b5
 8003068:	200000b4 	.word	0x200000b4

0800306c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <SystemInit+0x20>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	4a05      	ldr	r2, [pc, #20]	; (800308c <SystemInit+0x20>)
 8003078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800307c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003094:	480d      	ldr	r0, [pc, #52]	; (80030cc <LoopForever+0x6>)
  ldr r1, =_edata
 8003096:	490e      	ldr	r1, [pc, #56]	; (80030d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003098:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <LoopForever+0xe>)
  movs r3, #0
 800309a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800309c:	e002      	b.n	80030a4 <LoopCopyDataInit>

0800309e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800309e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a2:	3304      	adds	r3, #4

080030a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a8:	d3f9      	bcc.n	800309e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030aa:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030ac:	4c0b      	ldr	r4, [pc, #44]	; (80030dc <LoopForever+0x16>)
  movs r3, #0
 80030ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b0:	e001      	b.n	80030b6 <LoopFillZerobss>

080030b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b4:	3204      	adds	r2, #4

080030b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b8:	d3fb      	bcc.n	80030b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030ba:	f7ff ffd7 	bl	800306c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030be:	f000 fd8b 	bl	8003bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030c2:	f7fe f8a1 	bl	8001208 <main>

080030c6 <LoopForever>:

LoopForever:
    b LoopForever
 80030c6:	e7fe      	b.n	80030c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030c8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80030cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80030d4:	08005188 	.word	0x08005188
  ldr r2, =_sbss
 80030d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80030dc:	2000020c 	.word	0x2000020c

080030e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030e0:	e7fe      	b.n	80030e0 <ADC1_2_IRQHandler>
	...

080030e4 <LL_EXTI_EnableIT_0_31>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <LL_EXTI_EnableIT_0_31+0x20>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4904      	ldr	r1, [pc, #16]	; (8003104 <LL_EXTI_EnableIT_0_31+0x20>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40010400 	.word	0x40010400

08003108 <LL_EXTI_EnableIT_32_63>:
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <LL_EXTI_EnableIT_32_63+0x20>)
 8003112:	6a1a      	ldr	r2, [r3, #32]
 8003114:	4904      	ldr	r1, [pc, #16]	; (8003128 <LL_EXTI_EnableIT_32_63+0x20>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4313      	orrs	r3, r2
 800311a:	620b      	str	r3, [r1, #32]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40010400 	.word	0x40010400

0800312c <LL_EXTI_DisableIT_0_31>:
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <LL_EXTI_DisableIT_0_31+0x24>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	43db      	mvns	r3, r3
 800313c:	4904      	ldr	r1, [pc, #16]	; (8003150 <LL_EXTI_DisableIT_0_31+0x24>)
 800313e:	4013      	ands	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40010400 	.word	0x40010400

08003154 <LL_EXTI_DisableIT_32_63>:
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <LL_EXTI_DisableIT_32_63+0x24>)
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	43db      	mvns	r3, r3
 8003164:	4904      	ldr	r1, [pc, #16]	; (8003178 <LL_EXTI_DisableIT_32_63+0x24>)
 8003166:	4013      	ands	r3, r2
 8003168:	620b      	str	r3, [r1, #32]
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40010400 	.word	0x40010400

0800317c <LL_EXTI_EnableEvent_0_31>:
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	4904      	ldr	r1, [pc, #16]	; (800319c <LL_EXTI_EnableEvent_0_31+0x20>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40010400 	.word	0x40010400

080031a0 <LL_EXTI_EnableEvent_32_63>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80031aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ac:	4904      	ldr	r1, [pc, #16]	; (80031c0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	40010400 	.word	0x40010400

080031c4 <LL_EXTI_DisableEvent_0_31>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	4904      	ldr	r1, [pc, #16]	; (80031e8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40010400 	.word	0x40010400

080031ec <LL_EXTI_DisableEvent_32_63>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <LL_EXTI_DisableEvent_32_63+0x24>)
 80031f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	4904      	ldr	r1, [pc, #16]	; (8003210 <LL_EXTI_DisableEvent_32_63+0x24>)
 80031fe:	4013      	ands	r3, r2
 8003200:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40010400 	.word	0x40010400

08003214 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	4904      	ldr	r1, [pc, #16]	; (8003234 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40010400 	.word	0x40010400

08003238 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003244:	4904      	ldr	r1, [pc, #16]	; (8003258 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4313      	orrs	r3, r2
 800324a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40010400 	.word	0x40010400

0800325c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	43db      	mvns	r3, r3
 800326c:	4904      	ldr	r1, [pc, #16]	; (8003280 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800326e:	4013      	ands	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40010400 	.word	0x40010400

08003284 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800328e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	43db      	mvns	r3, r3
 8003294:	4904      	ldr	r1, [pc, #16]	; (80032a8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003296:	4013      	ands	r3, r2
 8003298:	628b      	str	r3, [r1, #40]	; 0x28
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40010400 	.word	0x40010400

080032ac <LL_EXTI_EnableFallingTrig_0_31>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	4904      	ldr	r1, [pc, #16]	; (80032cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60cb      	str	r3, [r1, #12]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	40010400 	.word	0x40010400

080032d0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80032da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032dc:	4904      	ldr	r1, [pc, #16]	; (80032f0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40010400 	.word	0x40010400

080032f4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	43db      	mvns	r3, r3
 8003304:	4904      	ldr	r1, [pc, #16]	; (8003318 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003306:	4013      	ands	r3, r2
 8003308:	60cb      	str	r3, [r1, #12]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40010400 	.word	0x40010400

0800331c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	43db      	mvns	r3, r3
 800332c:	4904      	ldr	r1, [pc, #16]	; (8003340 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800332e:	4013      	ands	r3, r2
 8003330:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40010400 	.word	0x40010400

08003344 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7a1b      	ldrb	r3, [r3, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80c2 	beq.w	80034de <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d05b      	beq.n	800341a <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7a5b      	ldrb	r3, [r3, #9]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d00e      	beq.n	8003388 <LL_EXTI_Init+0x44>
 800336a:	2b02      	cmp	r3, #2
 800336c:	d017      	beq.n	800339e <LL_EXTI_Init+0x5a>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d120      	bne.n	80033b4 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ff24 	bl	80031c4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff feaf 	bl	80030e4 <LL_EXTI_EnableIT_0_31>
          break;
 8003386:	e018      	b.n	80033ba <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fecd 	bl	800312c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fef0 	bl	800317c <LL_EXTI_EnableEvent_0_31>
          break;
 800339c:	e00d      	b.n	80033ba <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fe9e 	bl	80030e4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fee5 	bl	800317c <LL_EXTI_EnableEvent_0_31>
          break;
 80033b2:	e002      	b.n	80033ba <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
          break;
 80033b8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7a9b      	ldrb	r3, [r3, #10]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d02b      	beq.n	800341a <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	7a9b      	ldrb	r3, [r3, #10]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d00e      	beq.n	80033e8 <LL_EXTI_Init+0xa4>
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d017      	beq.n	80033fe <LL_EXTI_Init+0xba>
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d120      	bne.n	8003414 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff8c 	bl	80032f4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff17 	bl	8003214 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80033e6:	e019      	b.n	800341c <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff35 	bl	800325c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ff58 	bl	80032ac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80033fc:	e00e      	b.n	800341c <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ff06 	bl	8003214 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff4d 	bl	80032ac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003412:	e003      	b.n	800341c <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
            break;
 8003418:	e000      	b.n	800341c <LL_EXTI_Init+0xd8>
        }
      }
 800341a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d071      	beq.n	8003508 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7a5b      	ldrb	r3, [r3, #9]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d00e      	beq.n	800344a <LL_EXTI_Init+0x106>
 800342c:	2b02      	cmp	r3, #2
 800342e:	d017      	beq.n	8003460 <LL_EXTI_Init+0x11c>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d120      	bne.n	8003476 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fed7 	bl	80031ec <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fe60 	bl	8003108 <LL_EXTI_EnableIT_32_63>
          break;
 8003448:	e018      	b.n	800347c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fe80 	bl	8003154 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fea1 	bl	80031a0 <LL_EXTI_EnableEvent_32_63>
          break;
 800345e:	e00d      	b.n	800347c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fe4f 	bl	8003108 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fe96 	bl	80031a0 <LL_EXTI_EnableEvent_32_63>
          break;
 8003474:	e002      	b.n	800347c <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
          break;
 800347a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	7a9b      	ldrb	r3, [r3, #10]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d041      	beq.n	8003508 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7a9b      	ldrb	r3, [r3, #10]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d00e      	beq.n	80034aa <LL_EXTI_Init+0x166>
 800348c:	2b03      	cmp	r3, #3
 800348e:	d017      	beq.n	80034c0 <LL_EXTI_Init+0x17c>
 8003490:	2b01      	cmp	r3, #1
 8003492:	d120      	bne.n	80034d6 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff3f 	bl	800331c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fec8 	bl	8003238 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80034a8:	e02f      	b.n	800350a <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fee8 	bl	8003284 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff09 	bl	80032d0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80034be:	e024      	b.n	800350a <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff feb7 	bl	8003238 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fefe 	bl	80032d0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80034d4:	e019      	b.n	800350a <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
            break;
 80034da:	bf00      	nop
 80034dc:	e015      	b.n	800350a <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fe22 	bl	800312c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fe69 	bl	80031c4 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fe2c 	bl	8003154 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fe73 	bl	80031ec <LL_EXTI_DisableEvent_32_63>
 8003506:	e000      	b.n	800350a <LL_EXTI_Init+0x1c6>
      }
 8003508:	bf00      	nop
#endif
  }
  return status;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <LL_GPIO_SetPinMode>:
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	613b      	str	r3, [r7, #16]
  return result;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2103      	movs	r1, #3
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	401a      	ands	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	61bb      	str	r3, [r7, #24]
  return result;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	431a      	orrs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	601a      	str	r2, [r3, #0]
}
 8003566:	bf00      	nop
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <LL_GPIO_SetPinOutputType>:
{
 8003572:	b480      	push	{r7}
 8003574:	b085      	sub	sp, #20
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	43db      	mvns	r3, r3
 8003586:	401a      	ands	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	431a      	orrs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	605a      	str	r2, [r3, #4]
}
 8003596:	bf00      	nop
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_GPIO_SetPinSpeed>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	b089      	sub	sp, #36	; 0x24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	613b      	str	r3, [r7, #16]
  return result;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2103      	movs	r1, #3
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	401a      	ands	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	61bb      	str	r3, [r7, #24]
  return result;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	fab3 f383 	clz	r3, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	3724      	adds	r7, #36	; 0x24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <LL_GPIO_SetPinPull>:
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	613b      	str	r3, [r7, #16]
  return result;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2103      	movs	r1, #3
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	61bb      	str	r3, [r7, #24]
  return result;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	60da      	str	r2, [r3, #12]
}
 8003652:	bf00      	nop
 8003654:	3724      	adds	r7, #36	; 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_GPIO_SetAFPin_0_7>:
{
 800365e:	b480      	push	{r7}
 8003660:	b089      	sub	sp, #36	; 0x24
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a1a      	ldr	r2, [r3, #32]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	613b      	str	r3, [r7, #16]
  return result;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	210f      	movs	r1, #15
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	401a      	ands	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	61bb      	str	r3, [r7, #24]
  return result;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	431a      	orrs	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	621a      	str	r2, [r3, #32]
}
 80036b0:	bf00      	nop
 80036b2:	3724      	adds	r7, #36	; 0x24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <LL_GPIO_SetAFPin_8_15>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	613b      	str	r3, [r7, #16]
  return result;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	210f      	movs	r1, #15
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	401a      	ands	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	61bb      	str	r3, [r7, #24]
  return result;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003712:	bf00      	nop
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b088      	sub	sp, #32
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	613b      	str	r3, [r7, #16]
  return result;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003740:	e051      	b.n	80037e6 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	2101      	movs	r1, #1
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d043      	beq.n	80037e0 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d003      	beq.n	8003768 <LL_GPIO_Init+0x4a>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d10e      	bne.n	8003786 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	461a      	mov	r2, r3
 800376e:	69b9      	ldr	r1, [r7, #24]
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff16 	bl	80035a2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	461a      	mov	r2, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff fef6 	bl	8003572 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	461a      	mov	r2, r3
 800378c:	69b9      	ldr	r1, [r7, #24]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ff36 	bl	8003600 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d11a      	bne.n	80037d2 <LL_GPIO_Init+0xb4>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	60bb      	str	r3, [r7, #8]
  return result;
 80037a8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b07      	cmp	r3, #7
 80037b2:	d807      	bhi.n	80037c4 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	461a      	mov	r2, r3
 80037ba:	69b9      	ldr	r1, [r7, #24]
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff4e 	bl	800365e <LL_GPIO_SetAFPin_0_7>
 80037c2:	e006      	b.n	80037d2 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	461a      	mov	r2, r3
 80037ca:	69b9      	ldr	r1, [r7, #24]
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ff75 	bl	80036bc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	461a      	mov	r2, r3
 80037d8:	69b9      	ldr	r1, [r7, #24]
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fe9a 	bl	8003514 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1a6      	bne.n	8003742 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <LL_I2C_Enable>:
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_I2C_Disable>:
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 0201 	bic.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	601a      	str	r2, [r3, #0]
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <LL_I2C_ConfigFilters>:
{
 800383e:	b480      	push	{r7}
 8003840:	b085      	sub	sp, #20
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	0219      	lsls	r1, r3, #8
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	430b      	orrs	r3, r1
 800385a:	431a      	orrs	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	601a      	str	r2, [r3, #0]
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <LL_I2C_SetOwnAddress1>:
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003880:	f023 0307 	bic.w	r3, r3, #7
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	430a      	orrs	r2, r1
 800388a:	431a      	orrs	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_I2C_EnableOwnAddress1>:
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	609a      	str	r2, [r3, #8]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_I2C_DisableOwnAddress1>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	609a      	str	r2, [r3, #8]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_I2C_SetTiming>:
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	611a      	str	r2, [r3, #16]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_I2C_SetMode>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	601a      	str	r2, [r3, #0]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <LL_I2C_AcknowledgeNextData>:
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	605a      	str	r2, [r3, #4]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff65 	bl	800381e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	461a      	mov	r2, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ff6d 	bl	800383e <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ffb6 	bl	80038dc <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff44 	bl	80037fe <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ffa0 	bl	80038bc <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	6919      	ldr	r1, [r3, #16]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	461a      	mov	r2, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff ff70 	bl	800386c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ff81 	bl	800389c <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ffa9 	bl	80038f8 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ffb6 	bl	800391e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <LL_TIM_SetPrescaler>:
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_TIM_SetAutoReload>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_TIM_SetRepetitionCounter>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f043 0201 	orr.w	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	615a      	str	r2, [r3, #20]
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a2f      	ldr	r2, [pc, #188]	; (8003b00 <LL_TIM_Init+0xd0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <LL_TIM_Init+0x28>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4e:	d003      	beq.n	8003a58 <LL_TIM_Init+0x28>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a2c      	ldr	r2, [pc, #176]	; (8003b04 <LL_TIM_Init+0xd4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d106      	bne.n	8003a66 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a25      	ldr	r2, [pc, #148]	; (8003b00 <LL_TIM_Init+0xd0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <LL_TIM_Init+0x66>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a74:	d00f      	beq.n	8003a96 <LL_TIM_Init+0x66>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <LL_TIM_Init+0xd4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <LL_TIM_Init+0x66>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <LL_TIM_Init+0xd8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <LL_TIM_Init+0x66>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <LL_TIM_Init+0xdc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <LL_TIM_Init+0x66>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a1f      	ldr	r2, [pc, #124]	; (8003b10 <LL_TIM_Init+0xe0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d106      	bne.n	8003aa4 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff91 	bl	80039d8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	4619      	mov	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff ff7d 	bl	80039bc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <LL_TIM_Init+0xd0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <LL_TIM_Init+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <LL_TIM_Init+0xd8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <LL_TIM_Init+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <LL_TIM_Init+0xdc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d003      	beq.n	8003ae2 <LL_TIM_Init+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a0c      	ldr	r2, [pc, #48]	; (8003b10 <LL_TIM_Init+0xe0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d105      	bne.n	8003aee <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ff83 	bl	80039f4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff ff8e 	bl	8003a10 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40014400 	.word	0x40014400
 8003b10:	40014800 	.word	0x40014800

08003b14 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <LL_InitTick+0x30>)
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <LL_InitTick+0x30>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <LL_InitTick+0x30>)
 8003b34:	2205      	movs	r2, #5
 8003b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e000e010 	.word	0xe000e010

08003b48 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003b50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ffdd 	bl	8003b14 <LL_InitTick>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <LL_mDelay+0x44>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003b72:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d00c      	beq.n	8003b96 <LL_mDelay+0x32>
  {
    Delay++;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003b82:	e008      	b.n	8003b96 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003b84:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <LL_mDelay+0x44>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <LL_mDelay+0x32>
    {
      Delay--;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f3      	bne.n	8003b84 <LL_mDelay+0x20>
    }
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000e010 	.word	0xe000e010

08003bac <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <LL_SetSystemCoreClock+0x1c>)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6013      	str	r3, [r2, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000004 	.word	0x20000004

08003bcc <__errno>:
 8003bcc:	4b01      	ldr	r3, [pc, #4]	; (8003bd4 <__errno+0x8>)
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000008 	.word	0x20000008

08003bd8 <__libc_init_array>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4e0d      	ldr	r6, [pc, #52]	; (8003c10 <__libc_init_array+0x38>)
 8003bdc:	4c0d      	ldr	r4, [pc, #52]	; (8003c14 <__libc_init_array+0x3c>)
 8003bde:	1ba4      	subs	r4, r4, r6
 8003be0:	10a4      	asrs	r4, r4, #2
 8003be2:	2500      	movs	r5, #0
 8003be4:	42a5      	cmp	r5, r4
 8003be6:	d109      	bne.n	8003bfc <__libc_init_array+0x24>
 8003be8:	4e0b      	ldr	r6, [pc, #44]	; (8003c18 <__libc_init_array+0x40>)
 8003bea:	4c0c      	ldr	r4, [pc, #48]	; (8003c1c <__libc_init_array+0x44>)
 8003bec:	f001 fa56 	bl	800509c <_init>
 8003bf0:	1ba4      	subs	r4, r4, r6
 8003bf2:	10a4      	asrs	r4, r4, #2
 8003bf4:	2500      	movs	r5, #0
 8003bf6:	42a5      	cmp	r5, r4
 8003bf8:	d105      	bne.n	8003c06 <__libc_init_array+0x2e>
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c00:	4798      	blx	r3
 8003c02:	3501      	adds	r5, #1
 8003c04:	e7ee      	b.n	8003be4 <__libc_init_array+0xc>
 8003c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c0a:	4798      	blx	r3
 8003c0c:	3501      	adds	r5, #1
 8003c0e:	e7f2      	b.n	8003bf6 <__libc_init_array+0x1e>
 8003c10:	08005180 	.word	0x08005180
 8003c14:	08005180 	.word	0x08005180
 8003c18:	08005180 	.word	0x08005180
 8003c1c:	08005184 	.word	0x08005184

08003c20 <atan>:
 8003c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c24:	ec55 4b10 	vmov	r4, r5, d0
 8003c28:	4bc3      	ldr	r3, [pc, #780]	; (8003f38 <atan+0x318>)
 8003c2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003c2e:	429e      	cmp	r6, r3
 8003c30:	46ab      	mov	fp, r5
 8003c32:	dd18      	ble.n	8003c66 <atan+0x46>
 8003c34:	4bc1      	ldr	r3, [pc, #772]	; (8003f3c <atan+0x31c>)
 8003c36:	429e      	cmp	r6, r3
 8003c38:	dc01      	bgt.n	8003c3e <atan+0x1e>
 8003c3a:	d109      	bne.n	8003c50 <atan+0x30>
 8003c3c:	b144      	cbz	r4, 8003c50 <atan+0x30>
 8003c3e:	4622      	mov	r2, r4
 8003c40:	462b      	mov	r3, r5
 8003c42:	4620      	mov	r0, r4
 8003c44:	4629      	mov	r1, r5
 8003c46:	f7fc fac5 	bl	80001d4 <__adddf3>
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	460d      	mov	r5, r1
 8003c4e:	e006      	b.n	8003c5e <atan+0x3e>
 8003c50:	f1bb 0f00 	cmp.w	fp, #0
 8003c54:	f340 8131 	ble.w	8003eba <atan+0x29a>
 8003c58:	a59b      	add	r5, pc, #620	; (adr r5, 8003ec8 <atan+0x2a8>)
 8003c5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003c5e:	ec45 4b10 	vmov	d0, r4, r5
 8003c62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c66:	4bb6      	ldr	r3, [pc, #728]	; (8003f40 <atan+0x320>)
 8003c68:	429e      	cmp	r6, r3
 8003c6a:	dc14      	bgt.n	8003c96 <atan+0x76>
 8003c6c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8003c70:	429e      	cmp	r6, r3
 8003c72:	dc0d      	bgt.n	8003c90 <atan+0x70>
 8003c74:	a396      	add	r3, pc, #600	; (adr r3, 8003ed0 <atan+0x2b0>)
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	ee10 0a10 	vmov	r0, s0
 8003c7e:	4629      	mov	r1, r5
 8003c80:	f7fc faa8 	bl	80001d4 <__adddf3>
 8003c84:	2200      	movs	r2, #0
 8003c86:	4baf      	ldr	r3, [pc, #700]	; (8003f44 <atan+0x324>)
 8003c88:	f7fc feea 	bl	8000a60 <__aeabi_dcmpgt>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d1e6      	bne.n	8003c5e <atan+0x3e>
 8003c90:	f04f 3aff 	mov.w	sl, #4294967295
 8003c94:	e02b      	b.n	8003cee <atan+0xce>
 8003c96:	f000 f963 	bl	8003f60 <fabs>
 8003c9a:	4bab      	ldr	r3, [pc, #684]	; (8003f48 <atan+0x328>)
 8003c9c:	429e      	cmp	r6, r3
 8003c9e:	ec55 4b10 	vmov	r4, r5, d0
 8003ca2:	f300 80bf 	bgt.w	8003e24 <atan+0x204>
 8003ca6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8003caa:	429e      	cmp	r6, r3
 8003cac:	f300 80a0 	bgt.w	8003df0 <atan+0x1d0>
 8003cb0:	ee10 2a10 	vmov	r2, s0
 8003cb4:	ee10 0a10 	vmov	r0, s0
 8003cb8:	462b      	mov	r3, r5
 8003cba:	4629      	mov	r1, r5
 8003cbc:	f7fc fa8a 	bl	80001d4 <__adddf3>
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4ba0      	ldr	r3, [pc, #640]	; (8003f44 <atan+0x324>)
 8003cc4:	f7fc fa84 	bl	80001d0 <__aeabi_dsub>
 8003cc8:	2200      	movs	r2, #0
 8003cca:	4606      	mov	r6, r0
 8003ccc:	460f      	mov	r7, r1
 8003cce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	f7fc fa7d 	bl	80001d4 <__adddf3>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4630      	mov	r0, r6
 8003ce0:	4639      	mov	r1, r7
 8003ce2:	f7fc fd57 	bl	8000794 <__aeabi_ddiv>
 8003ce6:	f04f 0a00 	mov.w	sl, #0
 8003cea:	4604      	mov	r4, r0
 8003cec:	460d      	mov	r5, r1
 8003cee:	4622      	mov	r2, r4
 8003cf0:	462b      	mov	r3, r5
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	f7fc fc23 	bl	8000540 <__aeabi_dmul>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4680      	mov	r8, r0
 8003d00:	4689      	mov	r9, r1
 8003d02:	f7fc fc1d 	bl	8000540 <__aeabi_dmul>
 8003d06:	a374      	add	r3, pc, #464	; (adr r3, 8003ed8 <atan+0x2b8>)
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	460f      	mov	r7, r1
 8003d10:	f7fc fc16 	bl	8000540 <__aeabi_dmul>
 8003d14:	a372      	add	r3, pc, #456	; (adr r3, 8003ee0 <atan+0x2c0>)
 8003d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1a:	f7fc fa5b 	bl	80001d4 <__adddf3>
 8003d1e:	4632      	mov	r2, r6
 8003d20:	463b      	mov	r3, r7
 8003d22:	f7fc fc0d 	bl	8000540 <__aeabi_dmul>
 8003d26:	a370      	add	r3, pc, #448	; (adr r3, 8003ee8 <atan+0x2c8>)
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	f7fc fa52 	bl	80001d4 <__adddf3>
 8003d30:	4632      	mov	r2, r6
 8003d32:	463b      	mov	r3, r7
 8003d34:	f7fc fc04 	bl	8000540 <__aeabi_dmul>
 8003d38:	a36d      	add	r3, pc, #436	; (adr r3, 8003ef0 <atan+0x2d0>)
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f7fc fa49 	bl	80001d4 <__adddf3>
 8003d42:	4632      	mov	r2, r6
 8003d44:	463b      	mov	r3, r7
 8003d46:	f7fc fbfb 	bl	8000540 <__aeabi_dmul>
 8003d4a:	a36b      	add	r3, pc, #428	; (adr r3, 8003ef8 <atan+0x2d8>)
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f7fc fa40 	bl	80001d4 <__adddf3>
 8003d54:	4632      	mov	r2, r6
 8003d56:	463b      	mov	r3, r7
 8003d58:	f7fc fbf2 	bl	8000540 <__aeabi_dmul>
 8003d5c:	a368      	add	r3, pc, #416	; (adr r3, 8003f00 <atan+0x2e0>)
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f7fc fa37 	bl	80001d4 <__adddf3>
 8003d66:	4642      	mov	r2, r8
 8003d68:	464b      	mov	r3, r9
 8003d6a:	f7fc fbe9 	bl	8000540 <__aeabi_dmul>
 8003d6e:	a366      	add	r3, pc, #408	; (adr r3, 8003f08 <atan+0x2e8>)
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	4680      	mov	r8, r0
 8003d76:	4689      	mov	r9, r1
 8003d78:	4630      	mov	r0, r6
 8003d7a:	4639      	mov	r1, r7
 8003d7c:	f7fc fbe0 	bl	8000540 <__aeabi_dmul>
 8003d80:	a363      	add	r3, pc, #396	; (adr r3, 8003f10 <atan+0x2f0>)
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f7fc fa23 	bl	80001d0 <__aeabi_dsub>
 8003d8a:	4632      	mov	r2, r6
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	f7fc fbd7 	bl	8000540 <__aeabi_dmul>
 8003d92:	a361      	add	r3, pc, #388	; (adr r3, 8003f18 <atan+0x2f8>)
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f7fc fa1a 	bl	80001d0 <__aeabi_dsub>
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	463b      	mov	r3, r7
 8003da0:	f7fc fbce 	bl	8000540 <__aeabi_dmul>
 8003da4:	a35e      	add	r3, pc, #376	; (adr r3, 8003f20 <atan+0x300>)
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f7fc fa11 	bl	80001d0 <__aeabi_dsub>
 8003dae:	4632      	mov	r2, r6
 8003db0:	463b      	mov	r3, r7
 8003db2:	f7fc fbc5 	bl	8000540 <__aeabi_dmul>
 8003db6:	a35c      	add	r3, pc, #368	; (adr r3, 8003f28 <atan+0x308>)
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f7fc fa08 	bl	80001d0 <__aeabi_dsub>
 8003dc0:	4632      	mov	r2, r6
 8003dc2:	463b      	mov	r3, r7
 8003dc4:	f7fc fbbc 	bl	8000540 <__aeabi_dmul>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4640      	mov	r0, r8
 8003dce:	4649      	mov	r1, r9
 8003dd0:	f7fc fa00 	bl	80001d4 <__adddf3>
 8003dd4:	4622      	mov	r2, r4
 8003dd6:	462b      	mov	r3, r5
 8003dd8:	f7fc fbb2 	bl	8000540 <__aeabi_dmul>
 8003ddc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	d14b      	bne.n	8003e7e <atan+0x25e>
 8003de6:	4620      	mov	r0, r4
 8003de8:	4629      	mov	r1, r5
 8003dea:	f7fc f9f1 	bl	80001d0 <__aeabi_dsub>
 8003dee:	e72c      	b.n	8003c4a <atan+0x2a>
 8003df0:	ee10 0a10 	vmov	r0, s0
 8003df4:	2200      	movs	r2, #0
 8003df6:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <atan+0x324>)
 8003df8:	4629      	mov	r1, r5
 8003dfa:	f7fc f9e9 	bl	80001d0 <__aeabi_dsub>
 8003dfe:	2200      	movs	r2, #0
 8003e00:	4606      	mov	r6, r0
 8003e02:	460f      	mov	r7, r1
 8003e04:	4b4f      	ldr	r3, [pc, #316]	; (8003f44 <atan+0x324>)
 8003e06:	4620      	mov	r0, r4
 8003e08:	4629      	mov	r1, r5
 8003e0a:	f7fc f9e3 	bl	80001d4 <__adddf3>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4630      	mov	r0, r6
 8003e14:	4639      	mov	r1, r7
 8003e16:	f7fc fcbd 	bl	8000794 <__aeabi_ddiv>
 8003e1a:	f04f 0a01 	mov.w	sl, #1
 8003e1e:	4604      	mov	r4, r0
 8003e20:	460d      	mov	r5, r1
 8003e22:	e764      	b.n	8003cee <atan+0xce>
 8003e24:	4b49      	ldr	r3, [pc, #292]	; (8003f4c <atan+0x32c>)
 8003e26:	429e      	cmp	r6, r3
 8003e28:	dc1d      	bgt.n	8003e66 <atan+0x246>
 8003e2a:	ee10 0a10 	vmov	r0, s0
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <atan+0x330>)
 8003e32:	4629      	mov	r1, r5
 8003e34:	f7fc f9cc 	bl	80001d0 <__aeabi_dsub>
 8003e38:	2200      	movs	r2, #0
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	460f      	mov	r7, r1
 8003e3e:	4b44      	ldr	r3, [pc, #272]	; (8003f50 <atan+0x330>)
 8003e40:	4620      	mov	r0, r4
 8003e42:	4629      	mov	r1, r5
 8003e44:	f7fc fb7c 	bl	8000540 <__aeabi_dmul>
 8003e48:	2200      	movs	r2, #0
 8003e4a:	4b3e      	ldr	r3, [pc, #248]	; (8003f44 <atan+0x324>)
 8003e4c:	f7fc f9c2 	bl	80001d4 <__adddf3>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4630      	mov	r0, r6
 8003e56:	4639      	mov	r1, r7
 8003e58:	f7fc fc9c 	bl	8000794 <__aeabi_ddiv>
 8003e5c:	f04f 0a02 	mov.w	sl, #2
 8003e60:	4604      	mov	r4, r0
 8003e62:	460d      	mov	r5, r1
 8003e64:	e743      	b.n	8003cee <atan+0xce>
 8003e66:	462b      	mov	r3, r5
 8003e68:	ee10 2a10 	vmov	r2, s0
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	4939      	ldr	r1, [pc, #228]	; (8003f54 <atan+0x334>)
 8003e70:	f7fc fc90 	bl	8000794 <__aeabi_ddiv>
 8003e74:	f04f 0a03 	mov.w	sl, #3
 8003e78:	4604      	mov	r4, r0
 8003e7a:	460d      	mov	r5, r1
 8003e7c:	e737      	b.n	8003cee <atan+0xce>
 8003e7e:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <atan+0x338>)
 8003e80:	4e36      	ldr	r6, [pc, #216]	; (8003f5c <atan+0x33c>)
 8003e82:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8003e86:	4456      	add	r6, sl
 8003e88:	449a      	add	sl, r3
 8003e8a:	e9da 2300 	ldrd	r2, r3, [sl]
 8003e8e:	f7fc f99f 	bl	80001d0 <__aeabi_dsub>
 8003e92:	4622      	mov	r2, r4
 8003e94:	462b      	mov	r3, r5
 8003e96:	f7fc f99b 	bl	80001d0 <__aeabi_dsub>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003ea2:	f7fc f995 	bl	80001d0 <__aeabi_dsub>
 8003ea6:	f1bb 0f00 	cmp.w	fp, #0
 8003eaa:	4604      	mov	r4, r0
 8003eac:	460d      	mov	r5, r1
 8003eae:	f6bf aed6 	bge.w	8003c5e <atan+0x3e>
 8003eb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	e6d1      	b.n	8003c5e <atan+0x3e>
 8003eba:	a51d      	add	r5, pc, #116	; (adr r5, 8003f30 <atan+0x310>)
 8003ebc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ec0:	e6cd      	b.n	8003c5e <atan+0x3e>
 8003ec2:	bf00      	nop
 8003ec4:	f3af 8000 	nop.w
 8003ec8:	54442d18 	.word	0x54442d18
 8003ecc:	3ff921fb 	.word	0x3ff921fb
 8003ed0:	8800759c 	.word	0x8800759c
 8003ed4:	7e37e43c 	.word	0x7e37e43c
 8003ed8:	e322da11 	.word	0xe322da11
 8003edc:	3f90ad3a 	.word	0x3f90ad3a
 8003ee0:	24760deb 	.word	0x24760deb
 8003ee4:	3fa97b4b 	.word	0x3fa97b4b
 8003ee8:	a0d03d51 	.word	0xa0d03d51
 8003eec:	3fb10d66 	.word	0x3fb10d66
 8003ef0:	c54c206e 	.word	0xc54c206e
 8003ef4:	3fb745cd 	.word	0x3fb745cd
 8003ef8:	920083ff 	.word	0x920083ff
 8003efc:	3fc24924 	.word	0x3fc24924
 8003f00:	5555550d 	.word	0x5555550d
 8003f04:	3fd55555 	.word	0x3fd55555
 8003f08:	2c6a6c2f 	.word	0x2c6a6c2f
 8003f0c:	bfa2b444 	.word	0xbfa2b444
 8003f10:	52defd9a 	.word	0x52defd9a
 8003f14:	3fadde2d 	.word	0x3fadde2d
 8003f18:	af749a6d 	.word	0xaf749a6d
 8003f1c:	3fb3b0f2 	.word	0x3fb3b0f2
 8003f20:	fe231671 	.word	0xfe231671
 8003f24:	3fbc71c6 	.word	0x3fbc71c6
 8003f28:	9998ebc4 	.word	0x9998ebc4
 8003f2c:	3fc99999 	.word	0x3fc99999
 8003f30:	54442d18 	.word	0x54442d18
 8003f34:	bff921fb 	.word	0xbff921fb
 8003f38:	440fffff 	.word	0x440fffff
 8003f3c:	7ff00000 	.word	0x7ff00000
 8003f40:	3fdbffff 	.word	0x3fdbffff
 8003f44:	3ff00000 	.word	0x3ff00000
 8003f48:	3ff2ffff 	.word	0x3ff2ffff
 8003f4c:	40037fff 	.word	0x40037fff
 8003f50:	3ff80000 	.word	0x3ff80000
 8003f54:	bff00000 	.word	0xbff00000
 8003f58:	08005118 	.word	0x08005118
 8003f5c:	080050f8 	.word	0x080050f8

08003f60 <fabs>:
 8003f60:	ec51 0b10 	vmov	r0, r1, d0
 8003f64:	ee10 2a10 	vmov	r2, s0
 8003f68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003f6c:	ec43 2b10 	vmov	d0, r2, r3
 8003f70:	4770      	bx	lr
	...

08003f74 <round>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	ec57 6b10 	vmov	r6, r7, d0
 8003f7a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8003f7e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8003f82:	2c13      	cmp	r4, #19
 8003f84:	463b      	mov	r3, r7
 8003f86:	463d      	mov	r5, r7
 8003f88:	dc17      	bgt.n	8003fba <round+0x46>
 8003f8a:	2c00      	cmp	r4, #0
 8003f8c:	da09      	bge.n	8003fa2 <round+0x2e>
 8003f8e:	3401      	adds	r4, #1
 8003f90:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8003f94:	d103      	bne.n	8003f9e <round+0x2a>
 8003f96:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003f9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	e02c      	b.n	8003ffc <round+0x88>
 8003fa2:	4a18      	ldr	r2, [pc, #96]	; (8004004 <round+0x90>)
 8003fa4:	4122      	asrs	r2, r4
 8003fa6:	4217      	tst	r7, r2
 8003fa8:	d100      	bne.n	8003fac <round+0x38>
 8003faa:	b19e      	cbz	r6, 8003fd4 <round+0x60>
 8003fac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003fb0:	4123      	asrs	r3, r4
 8003fb2:	442b      	add	r3, r5
 8003fb4:	ea23 0302 	bic.w	r3, r3, r2
 8003fb8:	e7f1      	b.n	8003f9e <round+0x2a>
 8003fba:	2c33      	cmp	r4, #51	; 0x33
 8003fbc:	dd0d      	ble.n	8003fda <round+0x66>
 8003fbe:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003fc2:	d107      	bne.n	8003fd4 <round+0x60>
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	4639      	mov	r1, r7
 8003fc8:	ee10 2a10 	vmov	r2, s0
 8003fcc:	f7fc f902 	bl	80001d4 <__adddf3>
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	460f      	mov	r7, r1
 8003fd4:	ec47 6b10 	vmov	d0, r6, r7
 8003fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fda:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8003fde:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe2:	40d0      	lsrs	r0, r2
 8003fe4:	4206      	tst	r6, r0
 8003fe6:	d0f5      	beq.n	8003fd4 <round+0x60>
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003fee:	fa02 f404 	lsl.w	r4, r2, r4
 8003ff2:	1931      	adds	r1, r6, r4
 8003ff4:	bf28      	it	cs
 8003ff6:	189b      	addcs	r3, r3, r2
 8003ff8:	ea21 0100 	bic.w	r1, r1, r0
 8003ffc:	461f      	mov	r7, r3
 8003ffe:	460e      	mov	r6, r1
 8004000:	e7e8      	b.n	8003fd4 <round+0x60>
 8004002:	bf00      	nop
 8004004:	000fffff 	.word	0x000fffff

08004008 <pow>:
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	ed2d 8b04 	vpush	{d8-d9}
 8004010:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80042e4 <pow+0x2dc>
 8004014:	b08d      	sub	sp, #52	; 0x34
 8004016:	ec57 6b10 	vmov	r6, r7, d0
 800401a:	ec55 4b11 	vmov	r4, r5, d1
 800401e:	f000 f963 	bl	80042e8 <__ieee754_pow>
 8004022:	f999 3000 	ldrsb.w	r3, [r9]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	3301      	adds	r3, #1
 800402a:	eeb0 8a40 	vmov.f32	s16, s0
 800402e:	eef0 8a60 	vmov.f32	s17, s1
 8004032:	46c8      	mov	r8, r9
 8004034:	d05f      	beq.n	80040f6 <pow+0xee>
 8004036:	4622      	mov	r2, r4
 8004038:	462b      	mov	r3, r5
 800403a:	4620      	mov	r0, r4
 800403c:	4629      	mov	r1, r5
 800403e:	f7fc fd19 	bl	8000a74 <__aeabi_dcmpun>
 8004042:	4683      	mov	fp, r0
 8004044:	2800      	cmp	r0, #0
 8004046:	d156      	bne.n	80040f6 <pow+0xee>
 8004048:	4632      	mov	r2, r6
 800404a:	463b      	mov	r3, r7
 800404c:	4630      	mov	r0, r6
 800404e:	4639      	mov	r1, r7
 8004050:	f7fc fd10 	bl	8000a74 <__aeabi_dcmpun>
 8004054:	9001      	str	r0, [sp, #4]
 8004056:	b1e8      	cbz	r0, 8004094 <pow+0x8c>
 8004058:	2200      	movs	r2, #0
 800405a:	2300      	movs	r3, #0
 800405c:	4620      	mov	r0, r4
 800405e:	4629      	mov	r1, r5
 8004060:	f7fc fcd6 	bl	8000a10 <__aeabi_dcmpeq>
 8004064:	2800      	cmp	r0, #0
 8004066:	d046      	beq.n	80040f6 <pow+0xee>
 8004068:	2301      	movs	r3, #1
 800406a:	9302      	str	r3, [sp, #8]
 800406c:	4b96      	ldr	r3, [pc, #600]	; (80042c8 <pow+0x2c0>)
 800406e:	9303      	str	r3, [sp, #12]
 8004070:	4b96      	ldr	r3, [pc, #600]	; (80042cc <pow+0x2c4>)
 8004072:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004076:	2200      	movs	r2, #0
 8004078:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800407c:	9b00      	ldr	r3, [sp, #0]
 800407e:	2b02      	cmp	r3, #2
 8004080:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004084:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004088:	d033      	beq.n	80040f2 <pow+0xea>
 800408a:	a802      	add	r0, sp, #8
 800408c:	f000 fef2 	bl	8004e74 <matherr>
 8004090:	bb48      	cbnz	r0, 80040e6 <pow+0xde>
 8004092:	e05d      	b.n	8004150 <pow+0x148>
 8004094:	f04f 0a00 	mov.w	sl, #0
 8004098:	f04f 0b00 	mov.w	fp, #0
 800409c:	4652      	mov	r2, sl
 800409e:	465b      	mov	r3, fp
 80040a0:	4630      	mov	r0, r6
 80040a2:	4639      	mov	r1, r7
 80040a4:	f7fc fcb4 	bl	8000a10 <__aeabi_dcmpeq>
 80040a8:	ec4b ab19 	vmov	d9, sl, fp
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d054      	beq.n	800415a <pow+0x152>
 80040b0:	4652      	mov	r2, sl
 80040b2:	465b      	mov	r3, fp
 80040b4:	4620      	mov	r0, r4
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7fc fcaa 	bl	8000a10 <__aeabi_dcmpeq>
 80040bc:	4680      	mov	r8, r0
 80040be:	b318      	cbz	r0, 8004108 <pow+0x100>
 80040c0:	2301      	movs	r3, #1
 80040c2:	9302      	str	r3, [sp, #8]
 80040c4:	4b80      	ldr	r3, [pc, #512]	; (80042c8 <pow+0x2c0>)
 80040c6:	9303      	str	r3, [sp, #12]
 80040c8:	9b01      	ldr	r3, [sp, #4]
 80040ca:	930a      	str	r3, [sp, #40]	; 0x28
 80040cc:	9b00      	ldr	r3, [sp, #0]
 80040ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80040d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80040d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0d5      	beq.n	800408a <pow+0x82>
 80040de:	4b7b      	ldr	r3, [pc, #492]	; (80042cc <pow+0x2c4>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80040e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040e8:	b11b      	cbz	r3, 80040f2 <pow+0xea>
 80040ea:	f7ff fd6f 	bl	8003bcc <__errno>
 80040ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040f0:	6003      	str	r3, [r0, #0]
 80040f2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80040f6:	eeb0 0a48 	vmov.f32	s0, s16
 80040fa:	eef0 0a68 	vmov.f32	s1, s17
 80040fe:	b00d      	add	sp, #52	; 0x34
 8004100:	ecbd 8b04 	vpop	{d8-d9}
 8004104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004108:	ec45 4b10 	vmov	d0, r4, r5
 800410c:	f000 feaa 	bl	8004e64 <finite>
 8004110:	2800      	cmp	r0, #0
 8004112:	d0f0      	beq.n	80040f6 <pow+0xee>
 8004114:	4652      	mov	r2, sl
 8004116:	465b      	mov	r3, fp
 8004118:	4620      	mov	r0, r4
 800411a:	4629      	mov	r1, r5
 800411c:	f7fc fc82 	bl	8000a24 <__aeabi_dcmplt>
 8004120:	2800      	cmp	r0, #0
 8004122:	d0e8      	beq.n	80040f6 <pow+0xee>
 8004124:	2301      	movs	r3, #1
 8004126:	9302      	str	r3, [sp, #8]
 8004128:	4b67      	ldr	r3, [pc, #412]	; (80042c8 <pow+0x2c0>)
 800412a:	9303      	str	r3, [sp, #12]
 800412c:	f999 3000 	ldrsb.w	r3, [r9]
 8004130:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004134:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004138:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800413c:	b913      	cbnz	r3, 8004144 <pow+0x13c>
 800413e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004142:	e7a2      	b.n	800408a <pow+0x82>
 8004144:	4962      	ldr	r1, [pc, #392]	; (80042d0 <pow+0x2c8>)
 8004146:	2000      	movs	r0, #0
 8004148:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d19c      	bne.n	800408a <pow+0x82>
 8004150:	f7ff fd3c 	bl	8003bcc <__errno>
 8004154:	2321      	movs	r3, #33	; 0x21
 8004156:	6003      	str	r3, [r0, #0]
 8004158:	e7c5      	b.n	80040e6 <pow+0xde>
 800415a:	eeb0 0a48 	vmov.f32	s0, s16
 800415e:	eef0 0a68 	vmov.f32	s1, s17
 8004162:	f000 fe7f 	bl	8004e64 <finite>
 8004166:	9000      	str	r0, [sp, #0]
 8004168:	2800      	cmp	r0, #0
 800416a:	f040 8081 	bne.w	8004270 <pow+0x268>
 800416e:	ec47 6b10 	vmov	d0, r6, r7
 8004172:	f000 fe77 	bl	8004e64 <finite>
 8004176:	2800      	cmp	r0, #0
 8004178:	d07a      	beq.n	8004270 <pow+0x268>
 800417a:	ec45 4b10 	vmov	d0, r4, r5
 800417e:	f000 fe71 	bl	8004e64 <finite>
 8004182:	2800      	cmp	r0, #0
 8004184:	d074      	beq.n	8004270 <pow+0x268>
 8004186:	ec53 2b18 	vmov	r2, r3, d8
 800418a:	ee18 0a10 	vmov	r0, s16
 800418e:	4619      	mov	r1, r3
 8004190:	f7fc fc70 	bl	8000a74 <__aeabi_dcmpun>
 8004194:	f999 9000 	ldrsb.w	r9, [r9]
 8004198:	4b4b      	ldr	r3, [pc, #300]	; (80042c8 <pow+0x2c0>)
 800419a:	b1b0      	cbz	r0, 80041ca <pow+0x1c2>
 800419c:	2201      	movs	r2, #1
 800419e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041a2:	9b00      	ldr	r3, [sp, #0]
 80041a4:	930a      	str	r3, [sp, #40]	; 0x28
 80041a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80041aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80041ae:	f1b9 0f00 	cmp.w	r9, #0
 80041b2:	d0c4      	beq.n	800413e <pow+0x136>
 80041b4:	4652      	mov	r2, sl
 80041b6:	465b      	mov	r3, fp
 80041b8:	4650      	mov	r0, sl
 80041ba:	4659      	mov	r1, fp
 80041bc:	f7fc faea 	bl	8000794 <__aeabi_ddiv>
 80041c0:	f1b9 0f02 	cmp.w	r9, #2
 80041c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80041c8:	e7c1      	b.n	800414e <pow+0x146>
 80041ca:	2203      	movs	r2, #3
 80041cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041d0:	900a      	str	r0, [sp, #40]	; 0x28
 80041d2:	4629      	mov	r1, r5
 80041d4:	4620      	mov	r0, r4
 80041d6:	2200      	movs	r2, #0
 80041d8:	4b3e      	ldr	r3, [pc, #248]	; (80042d4 <pow+0x2cc>)
 80041da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80041de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80041e2:	f7fc f9ad 	bl	8000540 <__aeabi_dmul>
 80041e6:	4604      	mov	r4, r0
 80041e8:	460d      	mov	r5, r1
 80041ea:	f1b9 0f00 	cmp.w	r9, #0
 80041ee:	d124      	bne.n	800423a <pow+0x232>
 80041f0:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <pow+0x2d0>)
 80041f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80041f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80041fa:	4630      	mov	r0, r6
 80041fc:	4652      	mov	r2, sl
 80041fe:	465b      	mov	r3, fp
 8004200:	4639      	mov	r1, r7
 8004202:	f7fc fc0f 	bl	8000a24 <__aeabi_dcmplt>
 8004206:	2800      	cmp	r0, #0
 8004208:	d056      	beq.n	80042b8 <pow+0x2b0>
 800420a:	ec45 4b10 	vmov	d0, r4, r5
 800420e:	f000 fe3b 	bl	8004e88 <rint>
 8004212:	4622      	mov	r2, r4
 8004214:	462b      	mov	r3, r5
 8004216:	ec51 0b10 	vmov	r0, r1, d0
 800421a:	f7fc fbf9 	bl	8000a10 <__aeabi_dcmpeq>
 800421e:	b920      	cbnz	r0, 800422a <pow+0x222>
 8004220:	4b2e      	ldr	r3, [pc, #184]	; (80042dc <pow+0x2d4>)
 8004222:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004226:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800422a:	f998 3000 	ldrsb.w	r3, [r8]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d142      	bne.n	80042b8 <pow+0x2b0>
 8004232:	f7ff fccb 	bl	8003bcc <__errno>
 8004236:	2322      	movs	r3, #34	; 0x22
 8004238:	e78d      	b.n	8004156 <pow+0x14e>
 800423a:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <pow+0x2d8>)
 800423c:	2200      	movs	r2, #0
 800423e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004242:	4630      	mov	r0, r6
 8004244:	4652      	mov	r2, sl
 8004246:	465b      	mov	r3, fp
 8004248:	4639      	mov	r1, r7
 800424a:	f7fc fbeb 	bl	8000a24 <__aeabi_dcmplt>
 800424e:	2800      	cmp	r0, #0
 8004250:	d0eb      	beq.n	800422a <pow+0x222>
 8004252:	ec45 4b10 	vmov	d0, r4, r5
 8004256:	f000 fe17 	bl	8004e88 <rint>
 800425a:	4622      	mov	r2, r4
 800425c:	462b      	mov	r3, r5
 800425e:	ec51 0b10 	vmov	r0, r1, d0
 8004262:	f7fc fbd5 	bl	8000a10 <__aeabi_dcmpeq>
 8004266:	2800      	cmp	r0, #0
 8004268:	d1df      	bne.n	800422a <pow+0x222>
 800426a:	2200      	movs	r2, #0
 800426c:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <pow+0x2c8>)
 800426e:	e7da      	b.n	8004226 <pow+0x21e>
 8004270:	2200      	movs	r2, #0
 8004272:	2300      	movs	r3, #0
 8004274:	ec51 0b18 	vmov	r0, r1, d8
 8004278:	f7fc fbca 	bl	8000a10 <__aeabi_dcmpeq>
 800427c:	2800      	cmp	r0, #0
 800427e:	f43f af3a 	beq.w	80040f6 <pow+0xee>
 8004282:	ec47 6b10 	vmov	d0, r6, r7
 8004286:	f000 fded 	bl	8004e64 <finite>
 800428a:	2800      	cmp	r0, #0
 800428c:	f43f af33 	beq.w	80040f6 <pow+0xee>
 8004290:	ec45 4b10 	vmov	d0, r4, r5
 8004294:	f000 fde6 	bl	8004e64 <finite>
 8004298:	2800      	cmp	r0, #0
 800429a:	f43f af2c 	beq.w	80040f6 <pow+0xee>
 800429e:	2304      	movs	r3, #4
 80042a0:	9302      	str	r3, [sp, #8]
 80042a2:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <pow+0x2c0>)
 80042a4:	9303      	str	r3, [sp, #12]
 80042a6:	2300      	movs	r3, #0
 80042a8:	930a      	str	r3, [sp, #40]	; 0x28
 80042aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80042ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80042b2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80042b6:	e7b8      	b.n	800422a <pow+0x222>
 80042b8:	a802      	add	r0, sp, #8
 80042ba:	f000 fddb 	bl	8004e74 <matherr>
 80042be:	2800      	cmp	r0, #0
 80042c0:	f47f af11 	bne.w	80040e6 <pow+0xde>
 80042c4:	e7b5      	b.n	8004232 <pow+0x22a>
 80042c6:	bf00      	nop
 80042c8:	08005138 	.word	0x08005138
 80042cc:	3ff00000 	.word	0x3ff00000
 80042d0:	fff00000 	.word	0xfff00000
 80042d4:	3fe00000 	.word	0x3fe00000
 80042d8:	47efffff 	.word	0x47efffff
 80042dc:	c7efffff 	.word	0xc7efffff
 80042e0:	7ff00000 	.word	0x7ff00000
 80042e4:	2000006c 	.word	0x2000006c

080042e8 <__ieee754_pow>:
 80042e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ec:	b091      	sub	sp, #68	; 0x44
 80042ee:	ed8d 1b00 	vstr	d1, [sp]
 80042f2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80042f6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80042fa:	ea58 0302 	orrs.w	r3, r8, r2
 80042fe:	ec57 6b10 	vmov	r6, r7, d0
 8004302:	f000 84be 	beq.w	8004c82 <__ieee754_pow+0x99a>
 8004306:	4b7a      	ldr	r3, [pc, #488]	; (80044f0 <__ieee754_pow+0x208>)
 8004308:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800430c:	429c      	cmp	r4, r3
 800430e:	463d      	mov	r5, r7
 8004310:	ee10 aa10 	vmov	sl, s0
 8004314:	dc09      	bgt.n	800432a <__ieee754_pow+0x42>
 8004316:	d103      	bne.n	8004320 <__ieee754_pow+0x38>
 8004318:	b93e      	cbnz	r6, 800432a <__ieee754_pow+0x42>
 800431a:	45a0      	cmp	r8, r4
 800431c:	dc0d      	bgt.n	800433a <__ieee754_pow+0x52>
 800431e:	e001      	b.n	8004324 <__ieee754_pow+0x3c>
 8004320:	4598      	cmp	r8, r3
 8004322:	dc02      	bgt.n	800432a <__ieee754_pow+0x42>
 8004324:	4598      	cmp	r8, r3
 8004326:	d10e      	bne.n	8004346 <__ieee754_pow+0x5e>
 8004328:	b16a      	cbz	r2, 8004346 <__ieee754_pow+0x5e>
 800432a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800432e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004332:	ea54 030a 	orrs.w	r3, r4, sl
 8004336:	f000 84a4 	beq.w	8004c82 <__ieee754_pow+0x99a>
 800433a:	486e      	ldr	r0, [pc, #440]	; (80044f4 <__ieee754_pow+0x20c>)
 800433c:	b011      	add	sp, #68	; 0x44
 800433e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004342:	f000 bd99 	b.w	8004e78 <nan>
 8004346:	2d00      	cmp	r5, #0
 8004348:	da53      	bge.n	80043f2 <__ieee754_pow+0x10a>
 800434a:	4b6b      	ldr	r3, [pc, #428]	; (80044f8 <__ieee754_pow+0x210>)
 800434c:	4598      	cmp	r8, r3
 800434e:	dc4d      	bgt.n	80043ec <__ieee754_pow+0x104>
 8004350:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004354:	4598      	cmp	r8, r3
 8004356:	dd4c      	ble.n	80043f2 <__ieee754_pow+0x10a>
 8004358:	ea4f 5328 	mov.w	r3, r8, asr #20
 800435c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004360:	2b14      	cmp	r3, #20
 8004362:	dd26      	ble.n	80043b2 <__ieee754_pow+0xca>
 8004364:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004368:	fa22 f103 	lsr.w	r1, r2, r3
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	4293      	cmp	r3, r2
 8004372:	d13e      	bne.n	80043f2 <__ieee754_pow+0x10a>
 8004374:	f001 0101 	and.w	r1, r1, #1
 8004378:	f1c1 0b02 	rsb	fp, r1, #2
 800437c:	2a00      	cmp	r2, #0
 800437e:	d15b      	bne.n	8004438 <__ieee754_pow+0x150>
 8004380:	4b5b      	ldr	r3, [pc, #364]	; (80044f0 <__ieee754_pow+0x208>)
 8004382:	4598      	cmp	r8, r3
 8004384:	d124      	bne.n	80043d0 <__ieee754_pow+0xe8>
 8004386:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800438a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800438e:	ea53 030a 	orrs.w	r3, r3, sl
 8004392:	f000 8476 	beq.w	8004c82 <__ieee754_pow+0x99a>
 8004396:	4b59      	ldr	r3, [pc, #356]	; (80044fc <__ieee754_pow+0x214>)
 8004398:	429c      	cmp	r4, r3
 800439a:	dd2d      	ble.n	80043f8 <__ieee754_pow+0x110>
 800439c:	f1b9 0f00 	cmp.w	r9, #0
 80043a0:	f280 8473 	bge.w	8004c8a <__ieee754_pow+0x9a2>
 80043a4:	2000      	movs	r0, #0
 80043a6:	2100      	movs	r1, #0
 80043a8:	ec41 0b10 	vmov	d0, r0, r1
 80043ac:	b011      	add	sp, #68	; 0x44
 80043ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b2:	2a00      	cmp	r2, #0
 80043b4:	d13e      	bne.n	8004434 <__ieee754_pow+0x14c>
 80043b6:	f1c3 0314 	rsb	r3, r3, #20
 80043ba:	fa48 f103 	asr.w	r1, r8, r3
 80043be:	fa01 f303 	lsl.w	r3, r1, r3
 80043c2:	4543      	cmp	r3, r8
 80043c4:	f040 8469 	bne.w	8004c9a <__ieee754_pow+0x9b2>
 80043c8:	f001 0101 	and.w	r1, r1, #1
 80043cc:	f1c1 0b02 	rsb	fp, r1, #2
 80043d0:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <__ieee754_pow+0x218>)
 80043d2:	4598      	cmp	r8, r3
 80043d4:	d118      	bne.n	8004408 <__ieee754_pow+0x120>
 80043d6:	f1b9 0f00 	cmp.w	r9, #0
 80043da:	f280 845a 	bge.w	8004c92 <__ieee754_pow+0x9aa>
 80043de:	4948      	ldr	r1, [pc, #288]	; (8004500 <__ieee754_pow+0x218>)
 80043e0:	4632      	mov	r2, r6
 80043e2:	463b      	mov	r3, r7
 80043e4:	2000      	movs	r0, #0
 80043e6:	f7fc f9d5 	bl	8000794 <__aeabi_ddiv>
 80043ea:	e7dd      	b.n	80043a8 <__ieee754_pow+0xc0>
 80043ec:	f04f 0b02 	mov.w	fp, #2
 80043f0:	e7c4      	b.n	800437c <__ieee754_pow+0x94>
 80043f2:	f04f 0b00 	mov.w	fp, #0
 80043f6:	e7c1      	b.n	800437c <__ieee754_pow+0x94>
 80043f8:	f1b9 0f00 	cmp.w	r9, #0
 80043fc:	dad2      	bge.n	80043a4 <__ieee754_pow+0xbc>
 80043fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004402:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004406:	e7cf      	b.n	80043a8 <__ieee754_pow+0xc0>
 8004408:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800440c:	d106      	bne.n	800441c <__ieee754_pow+0x134>
 800440e:	4632      	mov	r2, r6
 8004410:	463b      	mov	r3, r7
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
 8004416:	f7fc f893 	bl	8000540 <__aeabi_dmul>
 800441a:	e7c5      	b.n	80043a8 <__ieee754_pow+0xc0>
 800441c:	4b39      	ldr	r3, [pc, #228]	; (8004504 <__ieee754_pow+0x21c>)
 800441e:	4599      	cmp	r9, r3
 8004420:	d10a      	bne.n	8004438 <__ieee754_pow+0x150>
 8004422:	2d00      	cmp	r5, #0
 8004424:	db08      	blt.n	8004438 <__ieee754_pow+0x150>
 8004426:	ec47 6b10 	vmov	d0, r6, r7
 800442a:	b011      	add	sp, #68	; 0x44
 800442c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004430:	f000 bc68 	b.w	8004d04 <__ieee754_sqrt>
 8004434:	f04f 0b00 	mov.w	fp, #0
 8004438:	ec47 6b10 	vmov	d0, r6, r7
 800443c:	f7ff fd90 	bl	8003f60 <fabs>
 8004440:	ec51 0b10 	vmov	r0, r1, d0
 8004444:	f1ba 0f00 	cmp.w	sl, #0
 8004448:	d127      	bne.n	800449a <__ieee754_pow+0x1b2>
 800444a:	b124      	cbz	r4, 8004456 <__ieee754_pow+0x16e>
 800444c:	4b2c      	ldr	r3, [pc, #176]	; (8004500 <__ieee754_pow+0x218>)
 800444e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004452:	429a      	cmp	r2, r3
 8004454:	d121      	bne.n	800449a <__ieee754_pow+0x1b2>
 8004456:	f1b9 0f00 	cmp.w	r9, #0
 800445a:	da05      	bge.n	8004468 <__ieee754_pow+0x180>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	2000      	movs	r0, #0
 8004462:	4927      	ldr	r1, [pc, #156]	; (8004500 <__ieee754_pow+0x218>)
 8004464:	f7fc f996 	bl	8000794 <__aeabi_ddiv>
 8004468:	2d00      	cmp	r5, #0
 800446a:	da9d      	bge.n	80043a8 <__ieee754_pow+0xc0>
 800446c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004470:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004474:	ea54 030b 	orrs.w	r3, r4, fp
 8004478:	d108      	bne.n	800448c <__ieee754_pow+0x1a4>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4610      	mov	r0, r2
 8004480:	4619      	mov	r1, r3
 8004482:	f7fb fea5 	bl	80001d0 <__aeabi_dsub>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	e7ac      	b.n	80043e6 <__ieee754_pow+0xfe>
 800448c:	f1bb 0f01 	cmp.w	fp, #1
 8004490:	d18a      	bne.n	80043a8 <__ieee754_pow+0xc0>
 8004492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004496:	4619      	mov	r1, r3
 8004498:	e786      	b.n	80043a8 <__ieee754_pow+0xc0>
 800449a:	0fed      	lsrs	r5, r5, #31
 800449c:	1e6b      	subs	r3, r5, #1
 800449e:	930d      	str	r3, [sp, #52]	; 0x34
 80044a0:	ea5b 0303 	orrs.w	r3, fp, r3
 80044a4:	d102      	bne.n	80044ac <__ieee754_pow+0x1c4>
 80044a6:	4632      	mov	r2, r6
 80044a8:	463b      	mov	r3, r7
 80044aa:	e7e8      	b.n	800447e <__ieee754_pow+0x196>
 80044ac:	4b16      	ldr	r3, [pc, #88]	; (8004508 <__ieee754_pow+0x220>)
 80044ae:	4598      	cmp	r8, r3
 80044b0:	f340 80fe 	ble.w	80046b0 <__ieee754_pow+0x3c8>
 80044b4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80044b8:	4598      	cmp	r8, r3
 80044ba:	dd0a      	ble.n	80044d2 <__ieee754_pow+0x1ea>
 80044bc:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <__ieee754_pow+0x214>)
 80044be:	429c      	cmp	r4, r3
 80044c0:	dc0d      	bgt.n	80044de <__ieee754_pow+0x1f6>
 80044c2:	f1b9 0f00 	cmp.w	r9, #0
 80044c6:	f6bf af6d 	bge.w	80043a4 <__ieee754_pow+0xbc>
 80044ca:	a307      	add	r3, pc, #28	; (adr r3, 80044e8 <__ieee754_pow+0x200>)
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	e79f      	b.n	8004412 <__ieee754_pow+0x12a>
 80044d2:	4b0e      	ldr	r3, [pc, #56]	; (800450c <__ieee754_pow+0x224>)
 80044d4:	429c      	cmp	r4, r3
 80044d6:	ddf4      	ble.n	80044c2 <__ieee754_pow+0x1da>
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <__ieee754_pow+0x218>)
 80044da:	429c      	cmp	r4, r3
 80044dc:	dd18      	ble.n	8004510 <__ieee754_pow+0x228>
 80044de:	f1b9 0f00 	cmp.w	r9, #0
 80044e2:	dcf2      	bgt.n	80044ca <__ieee754_pow+0x1e2>
 80044e4:	e75e      	b.n	80043a4 <__ieee754_pow+0xbc>
 80044e6:	bf00      	nop
 80044e8:	8800759c 	.word	0x8800759c
 80044ec:	7e37e43c 	.word	0x7e37e43c
 80044f0:	7ff00000 	.word	0x7ff00000
 80044f4:	0800513b 	.word	0x0800513b
 80044f8:	433fffff 	.word	0x433fffff
 80044fc:	3fefffff 	.word	0x3fefffff
 8004500:	3ff00000 	.word	0x3ff00000
 8004504:	3fe00000 	.word	0x3fe00000
 8004508:	41e00000 	.word	0x41e00000
 800450c:	3feffffe 	.word	0x3feffffe
 8004510:	2200      	movs	r2, #0
 8004512:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <__ieee754_pow+0x3b8>)
 8004514:	f7fb fe5c 	bl	80001d0 <__aeabi_dsub>
 8004518:	a355      	add	r3, pc, #340	; (adr r3, 8004670 <__ieee754_pow+0x388>)
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	4604      	mov	r4, r0
 8004520:	460d      	mov	r5, r1
 8004522:	f7fc f80d 	bl	8000540 <__aeabi_dmul>
 8004526:	a354      	add	r3, pc, #336	; (adr r3, 8004678 <__ieee754_pow+0x390>)
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	4606      	mov	r6, r0
 800452e:	460f      	mov	r7, r1
 8004530:	4620      	mov	r0, r4
 8004532:	4629      	mov	r1, r5
 8004534:	f7fc f804 	bl	8000540 <__aeabi_dmul>
 8004538:	2200      	movs	r2, #0
 800453a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800453e:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <__ieee754_pow+0x3bc>)
 8004540:	4620      	mov	r0, r4
 8004542:	4629      	mov	r1, r5
 8004544:	f7fb fffc 	bl	8000540 <__aeabi_dmul>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	a14c      	add	r1, pc, #304	; (adr r1, 8004680 <__ieee754_pow+0x398>)
 800454e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004552:	f7fb fe3d 	bl	80001d0 <__aeabi_dsub>
 8004556:	4622      	mov	r2, r4
 8004558:	462b      	mov	r3, r5
 800455a:	f7fb fff1 	bl	8000540 <__aeabi_dmul>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	2000      	movs	r0, #0
 8004564:	4950      	ldr	r1, [pc, #320]	; (80046a8 <__ieee754_pow+0x3c0>)
 8004566:	f7fb fe33 	bl	80001d0 <__aeabi_dsub>
 800456a:	4622      	mov	r2, r4
 800456c:	462b      	mov	r3, r5
 800456e:	4680      	mov	r8, r0
 8004570:	4689      	mov	r9, r1
 8004572:	4620      	mov	r0, r4
 8004574:	4629      	mov	r1, r5
 8004576:	f7fb ffe3 	bl	8000540 <__aeabi_dmul>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4640      	mov	r0, r8
 8004580:	4649      	mov	r1, r9
 8004582:	f7fb ffdd 	bl	8000540 <__aeabi_dmul>
 8004586:	a340      	add	r3, pc, #256	; (adr r3, 8004688 <__ieee754_pow+0x3a0>)
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	f7fb ffd8 	bl	8000540 <__aeabi_dmul>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004598:	f7fb fe1a 	bl	80001d0 <__aeabi_dsub>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4604      	mov	r4, r0
 80045a2:	460d      	mov	r5, r1
 80045a4:	4630      	mov	r0, r6
 80045a6:	4639      	mov	r1, r7
 80045a8:	f7fb fe14 	bl	80001d4 <__adddf3>
 80045ac:	2000      	movs	r0, #0
 80045ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045b2:	4632      	mov	r2, r6
 80045b4:	463b      	mov	r3, r7
 80045b6:	f7fb fe0b 	bl	80001d0 <__aeabi_dsub>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4620      	mov	r0, r4
 80045c0:	4629      	mov	r1, r5
 80045c2:	f7fb fe05 	bl	80001d0 <__aeabi_dsub>
 80045c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80045c8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80045cc:	4313      	orrs	r3, r2
 80045ce:	4606      	mov	r6, r0
 80045d0:	460f      	mov	r7, r1
 80045d2:	f040 81eb 	bne.w	80049ac <__ieee754_pow+0x6c4>
 80045d6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004690 <__ieee754_pow+0x3a8>
 80045da:	e9dd 4500 	ldrd	r4, r5, [sp]
 80045de:	2400      	movs	r4, #0
 80045e0:	4622      	mov	r2, r4
 80045e2:	462b      	mov	r3, r5
 80045e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80045ec:	f7fb fdf0 	bl	80001d0 <__aeabi_dsub>
 80045f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045f4:	f7fb ffa4 	bl	8000540 <__aeabi_dmul>
 80045f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045fc:	4680      	mov	r8, r0
 80045fe:	4689      	mov	r9, r1
 8004600:	4630      	mov	r0, r6
 8004602:	4639      	mov	r1, r7
 8004604:	f7fb ff9c 	bl	8000540 <__aeabi_dmul>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4640      	mov	r0, r8
 800460e:	4649      	mov	r1, r9
 8004610:	f7fb fde0 	bl	80001d4 <__adddf3>
 8004614:	4622      	mov	r2, r4
 8004616:	462b      	mov	r3, r5
 8004618:	4680      	mov	r8, r0
 800461a:	4689      	mov	r9, r1
 800461c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004620:	f7fb ff8e 	bl	8000540 <__aeabi_dmul>
 8004624:	460b      	mov	r3, r1
 8004626:	4604      	mov	r4, r0
 8004628:	460d      	mov	r5, r1
 800462a:	4602      	mov	r2, r0
 800462c:	4649      	mov	r1, r9
 800462e:	4640      	mov	r0, r8
 8004630:	e9cd 4500 	strd	r4, r5, [sp]
 8004634:	f7fb fdce 	bl	80001d4 <__adddf3>
 8004638:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <__ieee754_pow+0x3c4>)
 800463a:	4299      	cmp	r1, r3
 800463c:	4606      	mov	r6, r0
 800463e:	460f      	mov	r7, r1
 8004640:	468b      	mov	fp, r1
 8004642:	f340 82f7 	ble.w	8004c34 <__ieee754_pow+0x94c>
 8004646:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800464a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800464e:	4303      	orrs	r3, r0
 8004650:	f000 81ea 	beq.w	8004a28 <__ieee754_pow+0x740>
 8004654:	a310      	add	r3, pc, #64	; (adr r3, 8004698 <__ieee754_pow+0x3b0>)
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800465e:	f7fb ff6f 	bl	8000540 <__aeabi_dmul>
 8004662:	a30d      	add	r3, pc, #52	; (adr r3, 8004698 <__ieee754_pow+0x3b0>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	e6d5      	b.n	8004416 <__ieee754_pow+0x12e>
 800466a:	bf00      	nop
 800466c:	f3af 8000 	nop.w
 8004670:	60000000 	.word	0x60000000
 8004674:	3ff71547 	.word	0x3ff71547
 8004678:	f85ddf44 	.word	0xf85ddf44
 800467c:	3e54ae0b 	.word	0x3e54ae0b
 8004680:	55555555 	.word	0x55555555
 8004684:	3fd55555 	.word	0x3fd55555
 8004688:	652b82fe 	.word	0x652b82fe
 800468c:	3ff71547 	.word	0x3ff71547
 8004690:	00000000 	.word	0x00000000
 8004694:	bff00000 	.word	0xbff00000
 8004698:	8800759c 	.word	0x8800759c
 800469c:	7e37e43c 	.word	0x7e37e43c
 80046a0:	3ff00000 	.word	0x3ff00000
 80046a4:	3fd00000 	.word	0x3fd00000
 80046a8:	3fe00000 	.word	0x3fe00000
 80046ac:	408fffff 	.word	0x408fffff
 80046b0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	da05      	bge.n	80046c6 <__ieee754_pow+0x3de>
 80046ba:	4bd3      	ldr	r3, [pc, #844]	; (8004a08 <__ieee754_pow+0x720>)
 80046bc:	f7fb ff40 	bl	8000540 <__aeabi_dmul>
 80046c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80046c4:	460c      	mov	r4, r1
 80046c6:	1523      	asrs	r3, r4, #20
 80046c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80046cc:	4413      	add	r3, r2
 80046ce:	9309      	str	r3, [sp, #36]	; 0x24
 80046d0:	4bce      	ldr	r3, [pc, #824]	; (8004a0c <__ieee754_pow+0x724>)
 80046d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80046d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80046da:	429c      	cmp	r4, r3
 80046dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80046e0:	dd08      	ble.n	80046f4 <__ieee754_pow+0x40c>
 80046e2:	4bcb      	ldr	r3, [pc, #812]	; (8004a10 <__ieee754_pow+0x728>)
 80046e4:	429c      	cmp	r4, r3
 80046e6:	f340 815e 	ble.w	80049a6 <__ieee754_pow+0x6be>
 80046ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ec:	3301      	adds	r3, #1
 80046ee:	9309      	str	r3, [sp, #36]	; 0x24
 80046f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80046f4:	f04f 0a00 	mov.w	sl, #0
 80046f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80046fc:	930c      	str	r3, [sp, #48]	; 0x30
 80046fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004700:	4bc4      	ldr	r3, [pc, #784]	; (8004a14 <__ieee754_pow+0x72c>)
 8004702:	4413      	add	r3, r2
 8004704:	ed93 7b00 	vldr	d7, [r3]
 8004708:	4629      	mov	r1, r5
 800470a:	ec53 2b17 	vmov	r2, r3, d7
 800470e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004712:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004716:	f7fb fd5b 	bl	80001d0 <__aeabi_dsub>
 800471a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800471e:	4606      	mov	r6, r0
 8004720:	460f      	mov	r7, r1
 8004722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004726:	f7fb fd55 	bl	80001d4 <__adddf3>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	2000      	movs	r0, #0
 8004730:	49b9      	ldr	r1, [pc, #740]	; (8004a18 <__ieee754_pow+0x730>)
 8004732:	f7fc f82f 	bl	8000794 <__aeabi_ddiv>
 8004736:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4630      	mov	r0, r6
 8004740:	4639      	mov	r1, r7
 8004742:	f7fb fefd 	bl	8000540 <__aeabi_dmul>
 8004746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800474a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800474e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004752:	2300      	movs	r3, #0
 8004754:	9302      	str	r3, [sp, #8]
 8004756:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800475a:	106d      	asrs	r5, r5, #1
 800475c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004760:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004764:	2200      	movs	r2, #0
 8004766:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800476a:	4640      	mov	r0, r8
 800476c:	4649      	mov	r1, r9
 800476e:	4614      	mov	r4, r2
 8004770:	461d      	mov	r5, r3
 8004772:	f7fb fee5 	bl	8000540 <__aeabi_dmul>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4630      	mov	r0, r6
 800477c:	4639      	mov	r1, r7
 800477e:	f7fb fd27 	bl	80001d0 <__aeabi_dsub>
 8004782:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004786:	4606      	mov	r6, r0
 8004788:	460f      	mov	r7, r1
 800478a:	4620      	mov	r0, r4
 800478c:	4629      	mov	r1, r5
 800478e:	f7fb fd1f 	bl	80001d0 <__aeabi_dsub>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800479a:	f7fb fd19 	bl	80001d0 <__aeabi_dsub>
 800479e:	4642      	mov	r2, r8
 80047a0:	464b      	mov	r3, r9
 80047a2:	f7fb fecd 	bl	8000540 <__aeabi_dmul>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4630      	mov	r0, r6
 80047ac:	4639      	mov	r1, r7
 80047ae:	f7fb fd0f 	bl	80001d0 <__aeabi_dsub>
 80047b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80047b6:	f7fb fec3 	bl	8000540 <__aeabi_dmul>
 80047ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	f7fb febb 	bl	8000540 <__aeabi_dmul>
 80047ca:	a37b      	add	r3, pc, #492	; (adr r3, 80049b8 <__ieee754_pow+0x6d0>)
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	4604      	mov	r4, r0
 80047d2:	460d      	mov	r5, r1
 80047d4:	f7fb feb4 	bl	8000540 <__aeabi_dmul>
 80047d8:	a379      	add	r3, pc, #484	; (adr r3, 80049c0 <__ieee754_pow+0x6d8>)
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	f7fb fcf9 	bl	80001d4 <__adddf3>
 80047e2:	4622      	mov	r2, r4
 80047e4:	462b      	mov	r3, r5
 80047e6:	f7fb feab 	bl	8000540 <__aeabi_dmul>
 80047ea:	a377      	add	r3, pc, #476	; (adr r3, 80049c8 <__ieee754_pow+0x6e0>)
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	f7fb fcf0 	bl	80001d4 <__adddf3>
 80047f4:	4622      	mov	r2, r4
 80047f6:	462b      	mov	r3, r5
 80047f8:	f7fb fea2 	bl	8000540 <__aeabi_dmul>
 80047fc:	a374      	add	r3, pc, #464	; (adr r3, 80049d0 <__ieee754_pow+0x6e8>)
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f7fb fce7 	bl	80001d4 <__adddf3>
 8004806:	4622      	mov	r2, r4
 8004808:	462b      	mov	r3, r5
 800480a:	f7fb fe99 	bl	8000540 <__aeabi_dmul>
 800480e:	a372      	add	r3, pc, #456	; (adr r3, 80049d8 <__ieee754_pow+0x6f0>)
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f7fb fcde 	bl	80001d4 <__adddf3>
 8004818:	4622      	mov	r2, r4
 800481a:	462b      	mov	r3, r5
 800481c:	f7fb fe90 	bl	8000540 <__aeabi_dmul>
 8004820:	a36f      	add	r3, pc, #444	; (adr r3, 80049e0 <__ieee754_pow+0x6f8>)
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f7fb fcd5 	bl	80001d4 <__adddf3>
 800482a:	4622      	mov	r2, r4
 800482c:	4606      	mov	r6, r0
 800482e:	460f      	mov	r7, r1
 8004830:	462b      	mov	r3, r5
 8004832:	4620      	mov	r0, r4
 8004834:	4629      	mov	r1, r5
 8004836:	f7fb fe83 	bl	8000540 <__aeabi_dmul>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4630      	mov	r0, r6
 8004840:	4639      	mov	r1, r7
 8004842:	f7fb fe7d 	bl	8000540 <__aeabi_dmul>
 8004846:	4642      	mov	r2, r8
 8004848:	4604      	mov	r4, r0
 800484a:	460d      	mov	r5, r1
 800484c:	464b      	mov	r3, r9
 800484e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004852:	f7fb fcbf 	bl	80001d4 <__adddf3>
 8004856:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800485a:	f7fb fe71 	bl	8000540 <__aeabi_dmul>
 800485e:	4622      	mov	r2, r4
 8004860:	462b      	mov	r3, r5
 8004862:	f7fb fcb7 	bl	80001d4 <__adddf3>
 8004866:	4642      	mov	r2, r8
 8004868:	4606      	mov	r6, r0
 800486a:	460f      	mov	r7, r1
 800486c:	464b      	mov	r3, r9
 800486e:	4640      	mov	r0, r8
 8004870:	4649      	mov	r1, r9
 8004872:	f7fb fe65 	bl	8000540 <__aeabi_dmul>
 8004876:	2200      	movs	r2, #0
 8004878:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <__ieee754_pow+0x734>)
 800487a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800487e:	f7fb fca9 	bl	80001d4 <__adddf3>
 8004882:	4632      	mov	r2, r6
 8004884:	463b      	mov	r3, r7
 8004886:	f7fb fca5 	bl	80001d4 <__adddf3>
 800488a:	9802      	ldr	r0, [sp, #8]
 800488c:	460d      	mov	r5, r1
 800488e:	4604      	mov	r4, r0
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4640      	mov	r0, r8
 8004896:	4649      	mov	r1, r9
 8004898:	f7fb fe52 	bl	8000540 <__aeabi_dmul>
 800489c:	2200      	movs	r2, #0
 800489e:	4680      	mov	r8, r0
 80048a0:	4689      	mov	r9, r1
 80048a2:	4b5e      	ldr	r3, [pc, #376]	; (8004a1c <__ieee754_pow+0x734>)
 80048a4:	4620      	mov	r0, r4
 80048a6:	4629      	mov	r1, r5
 80048a8:	f7fb fc92 	bl	80001d0 <__aeabi_dsub>
 80048ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80048b0:	f7fb fc8e 	bl	80001d0 <__aeabi_dsub>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4630      	mov	r0, r6
 80048ba:	4639      	mov	r1, r7
 80048bc:	f7fb fc88 	bl	80001d0 <__aeabi_dsub>
 80048c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048c4:	f7fb fe3c 	bl	8000540 <__aeabi_dmul>
 80048c8:	4622      	mov	r2, r4
 80048ca:	4606      	mov	r6, r0
 80048cc:	460f      	mov	r7, r1
 80048ce:	462b      	mov	r3, r5
 80048d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048d4:	f7fb fe34 	bl	8000540 <__aeabi_dmul>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4630      	mov	r0, r6
 80048de:	4639      	mov	r1, r7
 80048e0:	f7fb fc78 	bl	80001d4 <__adddf3>
 80048e4:	4606      	mov	r6, r0
 80048e6:	460f      	mov	r7, r1
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4640      	mov	r0, r8
 80048ee:	4649      	mov	r1, r9
 80048f0:	f7fb fc70 	bl	80001d4 <__adddf3>
 80048f4:	9802      	ldr	r0, [sp, #8]
 80048f6:	a33c      	add	r3, pc, #240	; (adr r3, 80049e8 <__ieee754_pow+0x700>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	4604      	mov	r4, r0
 80048fe:	460d      	mov	r5, r1
 8004900:	f7fb fe1e 	bl	8000540 <__aeabi_dmul>
 8004904:	4642      	mov	r2, r8
 8004906:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800490a:	464b      	mov	r3, r9
 800490c:	4620      	mov	r0, r4
 800490e:	4629      	mov	r1, r5
 8004910:	f7fb fc5e 	bl	80001d0 <__aeabi_dsub>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4630      	mov	r0, r6
 800491a:	4639      	mov	r1, r7
 800491c:	f7fb fc58 	bl	80001d0 <__aeabi_dsub>
 8004920:	a333      	add	r3, pc, #204	; (adr r3, 80049f0 <__ieee754_pow+0x708>)
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	f7fb fe0b 	bl	8000540 <__aeabi_dmul>
 800492a:	a333      	add	r3, pc, #204	; (adr r3, 80049f8 <__ieee754_pow+0x710>)
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	4606      	mov	r6, r0
 8004932:	460f      	mov	r7, r1
 8004934:	4620      	mov	r0, r4
 8004936:	4629      	mov	r1, r5
 8004938:	f7fb fe02 	bl	8000540 <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4630      	mov	r0, r6
 8004942:	4639      	mov	r1, r7
 8004944:	f7fb fc46 	bl	80001d4 <__adddf3>
 8004948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800494a:	4b35      	ldr	r3, [pc, #212]	; (8004a20 <__ieee754_pow+0x738>)
 800494c:	4413      	add	r3, r2
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f7fb fc3f 	bl	80001d4 <__adddf3>
 8004956:	4604      	mov	r4, r0
 8004958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800495a:	460d      	mov	r5, r1
 800495c:	f7fb fd86 	bl	800046c <__aeabi_i2d>
 8004960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004962:	4b30      	ldr	r3, [pc, #192]	; (8004a24 <__ieee754_pow+0x73c>)
 8004964:	4413      	add	r3, r2
 8004966:	e9d3 8900 	ldrd	r8, r9, [r3]
 800496a:	4606      	mov	r6, r0
 800496c:	460f      	mov	r7, r1
 800496e:	4622      	mov	r2, r4
 8004970:	462b      	mov	r3, r5
 8004972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004976:	f7fb fc2d 	bl	80001d4 <__adddf3>
 800497a:	4642      	mov	r2, r8
 800497c:	464b      	mov	r3, r9
 800497e:	f7fb fc29 	bl	80001d4 <__adddf3>
 8004982:	4632      	mov	r2, r6
 8004984:	463b      	mov	r3, r7
 8004986:	f7fb fc25 	bl	80001d4 <__adddf3>
 800498a:	9802      	ldr	r0, [sp, #8]
 800498c:	4632      	mov	r2, r6
 800498e:	463b      	mov	r3, r7
 8004990:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004994:	f7fb fc1c 	bl	80001d0 <__aeabi_dsub>
 8004998:	4642      	mov	r2, r8
 800499a:	464b      	mov	r3, r9
 800499c:	f7fb fc18 	bl	80001d0 <__aeabi_dsub>
 80049a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049a4:	e607      	b.n	80045b6 <__ieee754_pow+0x2ce>
 80049a6:	f04f 0a01 	mov.w	sl, #1
 80049aa:	e6a5      	b.n	80046f8 <__ieee754_pow+0x410>
 80049ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004a00 <__ieee754_pow+0x718>
 80049b0:	e613      	b.n	80045da <__ieee754_pow+0x2f2>
 80049b2:	bf00      	nop
 80049b4:	f3af 8000 	nop.w
 80049b8:	4a454eef 	.word	0x4a454eef
 80049bc:	3fca7e28 	.word	0x3fca7e28
 80049c0:	93c9db65 	.word	0x93c9db65
 80049c4:	3fcd864a 	.word	0x3fcd864a
 80049c8:	a91d4101 	.word	0xa91d4101
 80049cc:	3fd17460 	.word	0x3fd17460
 80049d0:	518f264d 	.word	0x518f264d
 80049d4:	3fd55555 	.word	0x3fd55555
 80049d8:	db6fabff 	.word	0xdb6fabff
 80049dc:	3fdb6db6 	.word	0x3fdb6db6
 80049e0:	33333303 	.word	0x33333303
 80049e4:	3fe33333 	.word	0x3fe33333
 80049e8:	e0000000 	.word	0xe0000000
 80049ec:	3feec709 	.word	0x3feec709
 80049f0:	dc3a03fd 	.word	0xdc3a03fd
 80049f4:	3feec709 	.word	0x3feec709
 80049f8:	145b01f5 	.word	0x145b01f5
 80049fc:	be3e2fe0 	.word	0xbe3e2fe0
 8004a00:	00000000 	.word	0x00000000
 8004a04:	3ff00000 	.word	0x3ff00000
 8004a08:	43400000 	.word	0x43400000
 8004a0c:	0003988e 	.word	0x0003988e
 8004a10:	000bb679 	.word	0x000bb679
 8004a14:	08005140 	.word	0x08005140
 8004a18:	3ff00000 	.word	0x3ff00000
 8004a1c:	40080000 	.word	0x40080000
 8004a20:	08005160 	.word	0x08005160
 8004a24:	08005150 	.word	0x08005150
 8004a28:	a3b4      	add	r3, pc, #720	; (adr r3, 8004cfc <__ieee754_pow+0xa14>)
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	4640      	mov	r0, r8
 8004a30:	4649      	mov	r1, r9
 8004a32:	f7fb fbcf 	bl	80001d4 <__adddf3>
 8004a36:	4622      	mov	r2, r4
 8004a38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a3c:	462b      	mov	r3, r5
 8004a3e:	4630      	mov	r0, r6
 8004a40:	4639      	mov	r1, r7
 8004a42:	f7fb fbc5 	bl	80001d0 <__aeabi_dsub>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a4e:	f7fc f807 	bl	8000a60 <__aeabi_dcmpgt>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	f47f adfe 	bne.w	8004654 <__ieee754_pow+0x36c>
 8004a58:	4aa3      	ldr	r2, [pc, #652]	; (8004ce8 <__ieee754_pow+0xa00>)
 8004a5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	f340 810a 	ble.w	8004c78 <__ieee754_pow+0x990>
 8004a64:	151b      	asrs	r3, r3, #20
 8004a66:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004a6a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004a6e:	fa4a f303 	asr.w	r3, sl, r3
 8004a72:	445b      	add	r3, fp
 8004a74:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004a78:	4e9c      	ldr	r6, [pc, #624]	; (8004cec <__ieee754_pow+0xa04>)
 8004a7a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004a7e:	4116      	asrs	r6, r2
 8004a80:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004a84:	2000      	movs	r0, #0
 8004a86:	ea23 0106 	bic.w	r1, r3, r6
 8004a8a:	f1c2 0214 	rsb	r2, r2, #20
 8004a8e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004a92:	fa4a fa02 	asr.w	sl, sl, r2
 8004a96:	f1bb 0f00 	cmp.w	fp, #0
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	bfb8      	it	lt
 8004aa4:	f1ca 0a00 	rsblt	sl, sl, #0
 8004aa8:	f7fb fb92 	bl	80001d0 <__aeabi_dsub>
 8004aac:	e9cd 0100 	strd	r0, r1, [sp]
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ab8:	f7fb fb8c 	bl	80001d4 <__adddf3>
 8004abc:	2000      	movs	r0, #0
 8004abe:	a378      	add	r3, pc, #480	; (adr r3, 8004ca0 <__ieee754_pow+0x9b8>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	460d      	mov	r5, r1
 8004ac8:	f7fb fd3a 	bl	8000540 <__aeabi_dmul>
 8004acc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	460f      	mov	r7, r1
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	f7fb fb7a 	bl	80001d0 <__aeabi_dsub>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4640      	mov	r0, r8
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	f7fb fb74 	bl	80001d0 <__aeabi_dsub>
 8004ae8:	a36f      	add	r3, pc, #444	; (adr r3, 8004ca8 <__ieee754_pow+0x9c0>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f7fb fd27 	bl	8000540 <__aeabi_dmul>
 8004af2:	a36f      	add	r3, pc, #444	; (adr r3, 8004cb0 <__ieee754_pow+0x9c8>)
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	4680      	mov	r8, r0
 8004afa:	4689      	mov	r9, r1
 8004afc:	4620      	mov	r0, r4
 8004afe:	4629      	mov	r1, r5
 8004b00:	f7fb fd1e 	bl	8000540 <__aeabi_dmul>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4640      	mov	r0, r8
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	f7fb fb62 	bl	80001d4 <__adddf3>
 8004b10:	4604      	mov	r4, r0
 8004b12:	460d      	mov	r5, r1
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4630      	mov	r0, r6
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	f7fb fb5a 	bl	80001d4 <__adddf3>
 8004b20:	4632      	mov	r2, r6
 8004b22:	463b      	mov	r3, r7
 8004b24:	4680      	mov	r8, r0
 8004b26:	4689      	mov	r9, r1
 8004b28:	f7fb fb52 	bl	80001d0 <__aeabi_dsub>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4620      	mov	r0, r4
 8004b32:	4629      	mov	r1, r5
 8004b34:	f7fb fb4c 	bl	80001d0 <__aeabi_dsub>
 8004b38:	4642      	mov	r2, r8
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	460f      	mov	r7, r1
 8004b3e:	464b      	mov	r3, r9
 8004b40:	4640      	mov	r0, r8
 8004b42:	4649      	mov	r1, r9
 8004b44:	f7fb fcfc 	bl	8000540 <__aeabi_dmul>
 8004b48:	a35b      	add	r3, pc, #364	; (adr r3, 8004cb8 <__ieee754_pow+0x9d0>)
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	4604      	mov	r4, r0
 8004b50:	460d      	mov	r5, r1
 8004b52:	f7fb fcf5 	bl	8000540 <__aeabi_dmul>
 8004b56:	a35a      	add	r3, pc, #360	; (adr r3, 8004cc0 <__ieee754_pow+0x9d8>)
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f7fb fb38 	bl	80001d0 <__aeabi_dsub>
 8004b60:	4622      	mov	r2, r4
 8004b62:	462b      	mov	r3, r5
 8004b64:	f7fb fcec 	bl	8000540 <__aeabi_dmul>
 8004b68:	a357      	add	r3, pc, #348	; (adr r3, 8004cc8 <__ieee754_pow+0x9e0>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f7fb fb31 	bl	80001d4 <__adddf3>
 8004b72:	4622      	mov	r2, r4
 8004b74:	462b      	mov	r3, r5
 8004b76:	f7fb fce3 	bl	8000540 <__aeabi_dmul>
 8004b7a:	a355      	add	r3, pc, #340	; (adr r3, 8004cd0 <__ieee754_pow+0x9e8>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fb26 	bl	80001d0 <__aeabi_dsub>
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	f7fb fcda 	bl	8000540 <__aeabi_dmul>
 8004b8c:	a352      	add	r3, pc, #328	; (adr r3, 8004cd8 <__ieee754_pow+0x9f0>)
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f7fb fb1f 	bl	80001d4 <__adddf3>
 8004b96:	4622      	mov	r2, r4
 8004b98:	462b      	mov	r3, r5
 8004b9a:	f7fb fcd1 	bl	8000540 <__aeabi_dmul>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	f7fb fb13 	bl	80001d0 <__aeabi_dsub>
 8004baa:	4604      	mov	r4, r0
 8004bac:	460d      	mov	r5, r1
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	f7fb fcc3 	bl	8000540 <__aeabi_dmul>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	e9cd 0100 	strd	r0, r1, [sp]
 8004bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	f7fb fb02 	bl	80001d0 <__aeabi_dsub>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bd4:	f7fb fdde 	bl	8000794 <__aeabi_ddiv>
 8004bd8:	4632      	mov	r2, r6
 8004bda:	4604      	mov	r4, r0
 8004bdc:	460d      	mov	r5, r1
 8004bde:	463b      	mov	r3, r7
 8004be0:	4640      	mov	r0, r8
 8004be2:	4649      	mov	r1, r9
 8004be4:	f7fb fcac 	bl	8000540 <__aeabi_dmul>
 8004be8:	4632      	mov	r2, r6
 8004bea:	463b      	mov	r3, r7
 8004bec:	f7fb faf2 	bl	80001d4 <__adddf3>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f7fb faea 	bl	80001d0 <__aeabi_dsub>
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	464b      	mov	r3, r9
 8004c00:	f7fb fae6 	bl	80001d0 <__aeabi_dsub>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	2000      	movs	r0, #0
 8004c0a:	4939      	ldr	r1, [pc, #228]	; (8004cf0 <__ieee754_pow+0xa08>)
 8004c0c:	f7fb fae0 	bl	80001d0 <__aeabi_dsub>
 8004c10:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004c14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	da2f      	bge.n	8004c7e <__ieee754_pow+0x996>
 8004c1e:	4650      	mov	r0, sl
 8004c20:	ec43 2b10 	vmov	d0, r2, r3
 8004c24:	f000 f9b4 	bl	8004f90 <scalbn>
 8004c28:	ec51 0b10 	vmov	r0, r1, d0
 8004c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c30:	f7ff bbf1 	b.w	8004416 <__ieee754_pow+0x12e>
 8004c34:	4b2f      	ldr	r3, [pc, #188]	; (8004cf4 <__ieee754_pow+0xa0c>)
 8004c36:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004c3a:	429e      	cmp	r6, r3
 8004c3c:	f77f af0c 	ble.w	8004a58 <__ieee754_pow+0x770>
 8004c40:	4b2d      	ldr	r3, [pc, #180]	; (8004cf8 <__ieee754_pow+0xa10>)
 8004c42:	440b      	add	r3, r1
 8004c44:	4303      	orrs	r3, r0
 8004c46:	d00b      	beq.n	8004c60 <__ieee754_pow+0x978>
 8004c48:	a325      	add	r3, pc, #148	; (adr r3, 8004ce0 <__ieee754_pow+0x9f8>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c52:	f7fb fc75 	bl	8000540 <__aeabi_dmul>
 8004c56:	a322      	add	r3, pc, #136	; (adr r3, 8004ce0 <__ieee754_pow+0x9f8>)
 8004c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5c:	f7ff bbdb 	b.w	8004416 <__ieee754_pow+0x12e>
 8004c60:	4622      	mov	r2, r4
 8004c62:	462b      	mov	r3, r5
 8004c64:	f7fb fab4 	bl	80001d0 <__aeabi_dsub>
 8004c68:	4642      	mov	r2, r8
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	f7fb feee 	bl	8000a4c <__aeabi_dcmpge>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	f43f aef1 	beq.w	8004a58 <__ieee754_pow+0x770>
 8004c76:	e7e7      	b.n	8004c48 <__ieee754_pow+0x960>
 8004c78:	f04f 0a00 	mov.w	sl, #0
 8004c7c:	e718      	b.n	8004ab0 <__ieee754_pow+0x7c8>
 8004c7e:	4621      	mov	r1, r4
 8004c80:	e7d4      	b.n	8004c2c <__ieee754_pow+0x944>
 8004c82:	2000      	movs	r0, #0
 8004c84:	491a      	ldr	r1, [pc, #104]	; (8004cf0 <__ieee754_pow+0xa08>)
 8004c86:	f7ff bb8f 	b.w	80043a8 <__ieee754_pow+0xc0>
 8004c8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c8e:	f7ff bb8b 	b.w	80043a8 <__ieee754_pow+0xc0>
 8004c92:	4630      	mov	r0, r6
 8004c94:	4639      	mov	r1, r7
 8004c96:	f7ff bb87 	b.w	80043a8 <__ieee754_pow+0xc0>
 8004c9a:	4693      	mov	fp, r2
 8004c9c:	f7ff bb98 	b.w	80043d0 <__ieee754_pow+0xe8>
 8004ca0:	00000000 	.word	0x00000000
 8004ca4:	3fe62e43 	.word	0x3fe62e43
 8004ca8:	fefa39ef 	.word	0xfefa39ef
 8004cac:	3fe62e42 	.word	0x3fe62e42
 8004cb0:	0ca86c39 	.word	0x0ca86c39
 8004cb4:	be205c61 	.word	0xbe205c61
 8004cb8:	72bea4d0 	.word	0x72bea4d0
 8004cbc:	3e663769 	.word	0x3e663769
 8004cc0:	c5d26bf1 	.word	0xc5d26bf1
 8004cc4:	3ebbbd41 	.word	0x3ebbbd41
 8004cc8:	af25de2c 	.word	0xaf25de2c
 8004ccc:	3f11566a 	.word	0x3f11566a
 8004cd0:	16bebd93 	.word	0x16bebd93
 8004cd4:	3f66c16c 	.word	0x3f66c16c
 8004cd8:	5555553e 	.word	0x5555553e
 8004cdc:	3fc55555 	.word	0x3fc55555
 8004ce0:	c2f8f359 	.word	0xc2f8f359
 8004ce4:	01a56e1f 	.word	0x01a56e1f
 8004ce8:	3fe00000 	.word	0x3fe00000
 8004cec:	000fffff 	.word	0x000fffff
 8004cf0:	3ff00000 	.word	0x3ff00000
 8004cf4:	4090cbff 	.word	0x4090cbff
 8004cf8:	3f6f3400 	.word	0x3f6f3400
 8004cfc:	652b82fe 	.word	0x652b82fe
 8004d00:	3c971547 	.word	0x3c971547

08004d04 <__ieee754_sqrt>:
 8004d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d08:	4955      	ldr	r1, [pc, #340]	; (8004e60 <__ieee754_sqrt+0x15c>)
 8004d0a:	ec55 4b10 	vmov	r4, r5, d0
 8004d0e:	43a9      	bics	r1, r5
 8004d10:	462b      	mov	r3, r5
 8004d12:	462a      	mov	r2, r5
 8004d14:	d112      	bne.n	8004d3c <__ieee754_sqrt+0x38>
 8004d16:	ee10 2a10 	vmov	r2, s0
 8004d1a:	ee10 0a10 	vmov	r0, s0
 8004d1e:	4629      	mov	r1, r5
 8004d20:	f7fb fc0e 	bl	8000540 <__aeabi_dmul>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4620      	mov	r0, r4
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	f7fb fa52 	bl	80001d4 <__adddf3>
 8004d30:	4604      	mov	r4, r0
 8004d32:	460d      	mov	r5, r1
 8004d34:	ec45 4b10 	vmov	d0, r4, r5
 8004d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d3c:	2d00      	cmp	r5, #0
 8004d3e:	ee10 0a10 	vmov	r0, s0
 8004d42:	4621      	mov	r1, r4
 8004d44:	dc0f      	bgt.n	8004d66 <__ieee754_sqrt+0x62>
 8004d46:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004d4a:	4330      	orrs	r0, r6
 8004d4c:	d0f2      	beq.n	8004d34 <__ieee754_sqrt+0x30>
 8004d4e:	b155      	cbz	r5, 8004d66 <__ieee754_sqrt+0x62>
 8004d50:	ee10 2a10 	vmov	r2, s0
 8004d54:	4620      	mov	r0, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	f7fb fa3a 	bl	80001d0 <__aeabi_dsub>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	f7fb fd18 	bl	8000794 <__aeabi_ddiv>
 8004d64:	e7e4      	b.n	8004d30 <__ieee754_sqrt+0x2c>
 8004d66:	151b      	asrs	r3, r3, #20
 8004d68:	d073      	beq.n	8004e52 <__ieee754_sqrt+0x14e>
 8004d6a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004d6e:	07dd      	lsls	r5, r3, #31
 8004d70:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004d74:	bf48      	it	mi
 8004d76:	0fc8      	lsrmi	r0, r1, #31
 8004d78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d7c:	bf44      	itt	mi
 8004d7e:	0049      	lslmi	r1, r1, #1
 8004d80:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004d84:	2500      	movs	r5, #0
 8004d86:	1058      	asrs	r0, r3, #1
 8004d88:	0fcb      	lsrs	r3, r1, #31
 8004d8a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004d8e:	0049      	lsls	r1, r1, #1
 8004d90:	2316      	movs	r3, #22
 8004d92:	462c      	mov	r4, r5
 8004d94:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004d98:	19a7      	adds	r7, r4, r6
 8004d9a:	4297      	cmp	r7, r2
 8004d9c:	bfde      	ittt	le
 8004d9e:	19bc      	addle	r4, r7, r6
 8004da0:	1bd2      	suble	r2, r2, r7
 8004da2:	19ad      	addle	r5, r5, r6
 8004da4:	0fcf      	lsrs	r7, r1, #31
 8004da6:	3b01      	subs	r3, #1
 8004da8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004dac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004db0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004db4:	d1f0      	bne.n	8004d98 <__ieee754_sqrt+0x94>
 8004db6:	f04f 0c20 	mov.w	ip, #32
 8004dba:	469e      	mov	lr, r3
 8004dbc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004dc0:	42a2      	cmp	r2, r4
 8004dc2:	eb06 070e 	add.w	r7, r6, lr
 8004dc6:	dc02      	bgt.n	8004dce <__ieee754_sqrt+0xca>
 8004dc8:	d112      	bne.n	8004df0 <__ieee754_sqrt+0xec>
 8004dca:	428f      	cmp	r7, r1
 8004dcc:	d810      	bhi.n	8004df0 <__ieee754_sqrt+0xec>
 8004dce:	2f00      	cmp	r7, #0
 8004dd0:	eb07 0e06 	add.w	lr, r7, r6
 8004dd4:	da42      	bge.n	8004e5c <__ieee754_sqrt+0x158>
 8004dd6:	f1be 0f00 	cmp.w	lr, #0
 8004dda:	db3f      	blt.n	8004e5c <__ieee754_sqrt+0x158>
 8004ddc:	f104 0801 	add.w	r8, r4, #1
 8004de0:	1b12      	subs	r2, r2, r4
 8004de2:	428f      	cmp	r7, r1
 8004de4:	bf88      	it	hi
 8004de6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004dea:	1bc9      	subs	r1, r1, r7
 8004dec:	4433      	add	r3, r6
 8004dee:	4644      	mov	r4, r8
 8004df0:	0052      	lsls	r2, r2, #1
 8004df2:	f1bc 0c01 	subs.w	ip, ip, #1
 8004df6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004dfa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004dfe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004e02:	d1dd      	bne.n	8004dc0 <__ieee754_sqrt+0xbc>
 8004e04:	430a      	orrs	r2, r1
 8004e06:	d006      	beq.n	8004e16 <__ieee754_sqrt+0x112>
 8004e08:	1c5c      	adds	r4, r3, #1
 8004e0a:	bf13      	iteet	ne
 8004e0c:	3301      	addne	r3, #1
 8004e0e:	3501      	addeq	r5, #1
 8004e10:	4663      	moveq	r3, ip
 8004e12:	f023 0301 	bicne.w	r3, r3, #1
 8004e16:	106a      	asrs	r2, r5, #1
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	07e9      	lsls	r1, r5, #31
 8004e1c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004e20:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004e24:	bf48      	it	mi
 8004e26:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004e2a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004e2e:	461c      	mov	r4, r3
 8004e30:	e780      	b.n	8004d34 <__ieee754_sqrt+0x30>
 8004e32:	0aca      	lsrs	r2, r1, #11
 8004e34:	3815      	subs	r0, #21
 8004e36:	0549      	lsls	r1, r1, #21
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	d0fa      	beq.n	8004e32 <__ieee754_sqrt+0x12e>
 8004e3c:	02d6      	lsls	r6, r2, #11
 8004e3e:	d50a      	bpl.n	8004e56 <__ieee754_sqrt+0x152>
 8004e40:	f1c3 0420 	rsb	r4, r3, #32
 8004e44:	fa21 f404 	lsr.w	r4, r1, r4
 8004e48:	1e5d      	subs	r5, r3, #1
 8004e4a:	4099      	lsls	r1, r3
 8004e4c:	4322      	orrs	r2, r4
 8004e4e:	1b43      	subs	r3, r0, r5
 8004e50:	e78b      	b.n	8004d6a <__ieee754_sqrt+0x66>
 8004e52:	4618      	mov	r0, r3
 8004e54:	e7f0      	b.n	8004e38 <__ieee754_sqrt+0x134>
 8004e56:	0052      	lsls	r2, r2, #1
 8004e58:	3301      	adds	r3, #1
 8004e5a:	e7ef      	b.n	8004e3c <__ieee754_sqrt+0x138>
 8004e5c:	46a0      	mov	r8, r4
 8004e5e:	e7bf      	b.n	8004de0 <__ieee754_sqrt+0xdc>
 8004e60:	7ff00000 	.word	0x7ff00000

08004e64 <finite>:
 8004e64:	ee10 3a90 	vmov	r3, s1
 8004e68:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8004e6c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004e70:	0fc0      	lsrs	r0, r0, #31
 8004e72:	4770      	bx	lr

08004e74 <matherr>:
 8004e74:	2000      	movs	r0, #0
 8004e76:	4770      	bx	lr

08004e78 <nan>:
 8004e78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004e80 <nan+0x8>
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	00000000 	.word	0x00000000
 8004e84:	7ff80000 	.word	0x7ff80000

08004e88 <rint>:
 8004e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e8a:	ec51 0b10 	vmov	r0, r1, d0
 8004e8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004e92:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004e96:	2e13      	cmp	r6, #19
 8004e98:	460b      	mov	r3, r1
 8004e9a:	ee10 4a10 	vmov	r4, s0
 8004e9e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8004ea2:	dc56      	bgt.n	8004f52 <rint+0xca>
 8004ea4:	2e00      	cmp	r6, #0
 8004ea6:	da2b      	bge.n	8004f00 <rint+0x78>
 8004ea8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004eac:	4302      	orrs	r2, r0
 8004eae:	d023      	beq.n	8004ef8 <rint+0x70>
 8004eb0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004eb4:	4302      	orrs	r2, r0
 8004eb6:	4254      	negs	r4, r2
 8004eb8:	4314      	orrs	r4, r2
 8004eba:	0c4b      	lsrs	r3, r1, #17
 8004ebc:	0b24      	lsrs	r4, r4, #12
 8004ebe:	045b      	lsls	r3, r3, #17
 8004ec0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8004ec4:	ea44 0103 	orr.w	r1, r4, r3
 8004ec8:	460b      	mov	r3, r1
 8004eca:	492f      	ldr	r1, [pc, #188]	; (8004f88 <rint+0x100>)
 8004ecc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8004ed0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4639      	mov	r1, r7
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f7fb f97b 	bl	80001d4 <__adddf3>
 8004ede:	e9cd 0100 	strd	r0, r1, [sp]
 8004ee2:	463b      	mov	r3, r7
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eea:	f7fb f971 	bl	80001d0 <__aeabi_dsub>
 8004eee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ef2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8004ef6:	4639      	mov	r1, r7
 8004ef8:	ec41 0b10 	vmov	d0, r0, r1
 8004efc:	b003      	add	sp, #12
 8004efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f00:	4a22      	ldr	r2, [pc, #136]	; (8004f8c <rint+0x104>)
 8004f02:	4132      	asrs	r2, r6
 8004f04:	ea01 0702 	and.w	r7, r1, r2
 8004f08:	4307      	orrs	r7, r0
 8004f0a:	d0f5      	beq.n	8004ef8 <rint+0x70>
 8004f0c:	0852      	lsrs	r2, r2, #1
 8004f0e:	4011      	ands	r1, r2
 8004f10:	430c      	orrs	r4, r1
 8004f12:	d00b      	beq.n	8004f2c <rint+0xa4>
 8004f14:	ea23 0202 	bic.w	r2, r3, r2
 8004f18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f1c:	2e13      	cmp	r6, #19
 8004f1e:	fa43 f306 	asr.w	r3, r3, r6
 8004f22:	bf0c      	ite	eq
 8004f24:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8004f28:	2400      	movne	r4, #0
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	4916      	ldr	r1, [pc, #88]	; (8004f88 <rint+0x100>)
 8004f2e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004f32:	4622      	mov	r2, r4
 8004f34:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004f38:	4620      	mov	r0, r4
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f7fb f94a 	bl	80001d4 <__adddf3>
 8004f40:	e9cd 0100 	strd	r0, r1, [sp]
 8004f44:	4622      	mov	r2, r4
 8004f46:	462b      	mov	r3, r5
 8004f48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f4c:	f7fb f940 	bl	80001d0 <__aeabi_dsub>
 8004f50:	e7d2      	b.n	8004ef8 <rint+0x70>
 8004f52:	2e33      	cmp	r6, #51	; 0x33
 8004f54:	dd07      	ble.n	8004f66 <rint+0xde>
 8004f56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004f5a:	d1cd      	bne.n	8004ef8 <rint+0x70>
 8004f5c:	ee10 2a10 	vmov	r2, s0
 8004f60:	f7fb f938 	bl	80001d4 <__adddf3>
 8004f64:	e7c8      	b.n	8004ef8 <rint+0x70>
 8004f66:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8004f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6e:	40f2      	lsrs	r2, r6
 8004f70:	4210      	tst	r0, r2
 8004f72:	d0c1      	beq.n	8004ef8 <rint+0x70>
 8004f74:	0852      	lsrs	r2, r2, #1
 8004f76:	4210      	tst	r0, r2
 8004f78:	bf1f      	itttt	ne
 8004f7a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8004f7e:	ea20 0202 	bicne.w	r2, r0, r2
 8004f82:	4134      	asrne	r4, r6
 8004f84:	4314      	orrne	r4, r2
 8004f86:	e7d1      	b.n	8004f2c <rint+0xa4>
 8004f88:	08005170 	.word	0x08005170
 8004f8c:	000fffff 	.word	0x000fffff

08004f90 <scalbn>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	ec55 4b10 	vmov	r4, r5, d0
 8004f96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	b9aa      	cbnz	r2, 8004fcc <scalbn+0x3c>
 8004fa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004fa4:	4323      	orrs	r3, r4
 8004fa6:	d03b      	beq.n	8005020 <scalbn+0x90>
 8004fa8:	4b31      	ldr	r3, [pc, #196]	; (8005070 <scalbn+0xe0>)
 8004faa:	4629      	mov	r1, r5
 8004fac:	2200      	movs	r2, #0
 8004fae:	ee10 0a10 	vmov	r0, s0
 8004fb2:	f7fb fac5 	bl	8000540 <__aeabi_dmul>
 8004fb6:	4b2f      	ldr	r3, [pc, #188]	; (8005074 <scalbn+0xe4>)
 8004fb8:	429e      	cmp	r6, r3
 8004fba:	4604      	mov	r4, r0
 8004fbc:	460d      	mov	r5, r1
 8004fbe:	da12      	bge.n	8004fe6 <scalbn+0x56>
 8004fc0:	a327      	add	r3, pc, #156	; (adr r3, 8005060 <scalbn+0xd0>)
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	f7fb fabb 	bl	8000540 <__aeabi_dmul>
 8004fca:	e009      	b.n	8004fe0 <scalbn+0x50>
 8004fcc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004fd0:	428a      	cmp	r2, r1
 8004fd2:	d10c      	bne.n	8004fee <scalbn+0x5e>
 8004fd4:	ee10 2a10 	vmov	r2, s0
 8004fd8:	4620      	mov	r0, r4
 8004fda:	4629      	mov	r1, r5
 8004fdc:	f7fb f8fa 	bl	80001d4 <__adddf3>
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	460d      	mov	r5, r1
 8004fe4:	e01c      	b.n	8005020 <scalbn+0x90>
 8004fe6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004fea:	460b      	mov	r3, r1
 8004fec:	3a36      	subs	r2, #54	; 0x36
 8004fee:	4432      	add	r2, r6
 8004ff0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004ff4:	428a      	cmp	r2, r1
 8004ff6:	dd0b      	ble.n	8005010 <scalbn+0x80>
 8004ff8:	ec45 4b11 	vmov	d1, r4, r5
 8004ffc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005068 <scalbn+0xd8>
 8005000:	f000 f83c 	bl	800507c <copysign>
 8005004:	a318      	add	r3, pc, #96	; (adr r3, 8005068 <scalbn+0xd8>)
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	ec51 0b10 	vmov	r0, r1, d0
 800500e:	e7da      	b.n	8004fc6 <scalbn+0x36>
 8005010:	2a00      	cmp	r2, #0
 8005012:	dd08      	ble.n	8005026 <scalbn+0x96>
 8005014:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005018:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800501c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005020:	ec45 4b10 	vmov	d0, r4, r5
 8005024:	bd70      	pop	{r4, r5, r6, pc}
 8005026:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800502a:	da0d      	bge.n	8005048 <scalbn+0xb8>
 800502c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005030:	429e      	cmp	r6, r3
 8005032:	ec45 4b11 	vmov	d1, r4, r5
 8005036:	dce1      	bgt.n	8004ffc <scalbn+0x6c>
 8005038:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005060 <scalbn+0xd0>
 800503c:	f000 f81e 	bl	800507c <copysign>
 8005040:	a307      	add	r3, pc, #28	; (adr r3, 8005060 <scalbn+0xd0>)
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	e7e0      	b.n	800500a <scalbn+0x7a>
 8005048:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800504c:	3236      	adds	r2, #54	; 0x36
 800504e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005052:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005056:	4620      	mov	r0, r4
 8005058:	4629      	mov	r1, r5
 800505a:	2200      	movs	r2, #0
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <scalbn+0xe8>)
 800505e:	e7b2      	b.n	8004fc6 <scalbn+0x36>
 8005060:	c2f8f359 	.word	0xc2f8f359
 8005064:	01a56e1f 	.word	0x01a56e1f
 8005068:	8800759c 	.word	0x8800759c
 800506c:	7e37e43c 	.word	0x7e37e43c
 8005070:	43500000 	.word	0x43500000
 8005074:	ffff3cb0 	.word	0xffff3cb0
 8005078:	3c900000 	.word	0x3c900000

0800507c <copysign>:
 800507c:	ec51 0b10 	vmov	r0, r1, d0
 8005080:	ee11 0a90 	vmov	r0, s3
 8005084:	ee10 2a10 	vmov	r2, s0
 8005088:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800508c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005090:	ea41 0300 	orr.w	r3, r1, r0
 8005094:	ec43 2b10 	vmov	d0, r2, r3
 8005098:	4770      	bx	lr
	...

0800509c <_init>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	bf00      	nop
 80050a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a2:	bc08      	pop	{r3}
 80050a4:	469e      	mov	lr, r3
 80050a6:	4770      	bx	lr

080050a8 <_fini>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	bf00      	nop
 80050ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ae:	bc08      	pop	{r3}
 80050b0:	469e      	mov	lr, r3
 80050b2:	4770      	bx	lr
